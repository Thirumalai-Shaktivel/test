; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @mysum(%array* %a) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %r, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body2, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = getelementptr %array, %array* %a, i32 0, i32 2
  %3 = load %dimension_descriptor*, %dimension_descriptor** %2, align 8
  %4 = getelementptr %array, %array* %a, i32 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = alloca i32, align 4
  store i32 1, i32* %6, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %7, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body, %loop.head
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, %5
  br i1 %9, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head1
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %6, align 4
  %12 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %3, i32 %10
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %11, %14
  store i32 %15, i32* %6, align 4
  %16 = add i32 %10, 1
  store i32 %16, i32* %7, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %17 = load i32, i32* %6, align 4
  %18 = icmp sle i32 %1, %17
  br i1 %18, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.end
  %19 = load i32, i32* %i, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %i, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %i, align 4
  %23 = getelementptr %array, %array* %a, i32 0, i32 2
  %24 = load %dimension_descriptor*, %dimension_descriptor** %23, align 8
  %25 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %24, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sub i32 %22, %27
  %29 = mul i32 1, %28
  %30 = add i32 0, %29
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %25, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = mul i32 1, %32
  %34 = getelementptr %array, %array* %a, i32 0, i32 0
  %35 = load i32*, i32** %34, align 8
  %36 = getelementptr inbounds i32, i32* %35, i32 %30
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %21, %37
  store i32 %38, i32* %r, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.end
  br label %return

return:                                           ; preds = %loop.end3
  %39 = load i32, i32* %r, align 4
  ret i32 %39
}

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %x = alloca %array, align 8
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  %11 = load i32, i32* %9, align 4
  %12 = sub i32 10, %11
  %13 = add i32 %12, 1
  store i32 %13, i32* %10, align 4
  %14 = alloca i32, align 4
  store i32 10, i32* %14, align 4
  %15 = getelementptr %array, %array* %x, i32 0, i32 0
  %16 = load i32, i32* %14, align 4
  %17 = alloca i32, i32 %16, align 4
  store i32* %17, i32** %15, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body2, %.entry
  %18 = load i32, i32* %i, align 4
  %19 = add i32 %18, 1
  %20 = getelementptr %array, %array* %x, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr %array, %array* %x, i32 0, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = alloca i32, align 4
  store i32 1, i32* %24, align 4
  %25 = alloca i32, align 4
  store i32 0, i32* %25, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body, %loop.head
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, %23
  br i1 %27, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head1
  %28 = load i32, i32* %25, align 4
  %29 = load i32, i32* %24, align 4
  %30 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 %28
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %30, i32 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = mul i32 %29, %32
  store i32 %33, i32* %24, align 4
  %34 = add i32 %28, 1
  store i32 %34, i32* %25, align 4
  br label %loop.head1

loop.end:                                         ; preds = %loop.head1
  %35 = load i32, i32* %24, align 4
  %36 = icmp sle i32 %19, %35
  br i1 %36, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.end
  %37 = load i32, i32* %i, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %i, align 4
  %40 = getelementptr %array, %array* %x, i32 0, i32 2
  %41 = load %dimension_descriptor*, %dimension_descriptor** %40, align 8
  %42 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %41, i32 0
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 %39, %44
  %46 = mul i32 1, %45
  %47 = add i32 0, %46
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = mul i32 1, %49
  %51 = getelementptr %array, %array* %x, i32 0, i32 0
  %52 = load i32*, i32** %51, align 8
  %53 = getelementptr inbounds i32, i32* %52, i32 %47
  %54 = load i32, i32* %i, align 4
  store i32 %54, i32* %53, align 4
  br label %loop.head

loop.end3:                                        ; preds = %loop.end
  %55 = alloca %array, align 8
  %56 = call i32 @mysum(%array* %x)
  store i32 %56, i32* %s, align 4
  %57 = load i32, i32* %s, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i32 %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %58 = load i32, i32* %s, align 4
  %59 = icmp ne i32 %58, 55
  br i1 %59, label %then, label %else

then:                                             ; preds = %loop.end3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end3
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
