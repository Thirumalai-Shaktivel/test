; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i64 @main() {
.entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store i64 0, i64* %j, align 4
  store i64 0, i64* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i64, i64* %i, align 4
  %1 = add i64 %0, 1
  %2 = icmp sle i64 %1, 10
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i64, i64* %i, align 4
  %4 = add i64 %3, 1
  store i64 %4, i64* %i, align 4
  %5 = load i64, i64* %j, align 4
  %6 = load i64, i64* %i, align 4
  %7 = add i64 %5, %6
  store i64 %7, i64* %j, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %8 = load i64, i64* %j, align 4
  %9 = icmp ne i64 %8, 55
  br i1 %9, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i64 [ 1, %then ], [ 2, %else ]
  store i64 0, i64* %j, align 4
  store i64 11, i64* %i, align 4
  br label %loop.head1

loop.head1:                                       ; preds = %loop.body2, %ifcont
  %10 = load i64, i64* %i, align 4
  %11 = add i64 %10, -1
  %12 = icmp sge i64 %11, 1
  br i1 %12, label %loop.body2, label %loop.end3

loop.body2:                                       ; preds = %loop.head1
  %13 = load i64, i64* %i, align 4
  %14 = add i64 %13, -1
  store i64 %14, i64* %i, align 4
  %15 = load i64, i64* %j, align 4
  %16 = load i64, i64* %i, align 4
  %17 = add i64 %15, %16
  store i64 %17, i64* %j, align 4
  br label %loop.head1

loop.end3:                                        ; preds = %loop.head1
  %18 = load i64, i64* %j, align 4
  %19 = icmp ne i64 %18, 55
  br i1 %19, label %then4, label %else5

then4:                                            ; preds = %loop.end3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont6

else5:                                            ; preds = %loop.end3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  %iftmp7 = phi i64 [ 1, %then4 ], [ 2, %else5 ]
  store i64 0, i64* %j, align 4
  store i64 -1, i64* %i, align 4
  br label %loop.head8

loop.head8:                                       ; preds = %loop.body9, %ifcont6
  %20 = load i64, i64* %i, align 4
  %21 = add i64 %20, 2
  %22 = icmp sle i64 %21, 9
  br i1 %22, label %loop.body9, label %loop.end10

loop.body9:                                       ; preds = %loop.head8
  %23 = load i64, i64* %i, align 4
  %24 = add i64 %23, 2
  store i64 %24, i64* %i, align 4
  %25 = load i64, i64* %j, align 4
  %26 = load i64, i64* %i, align 4
  %27 = add i64 %25, %26
  store i64 %27, i64* %j, align 4
  br label %loop.head8

loop.end10:                                       ; preds = %loop.head8
  %28 = load i64, i64* %j, align 4
  %29 = icmp ne i64 %28, 25
  br i1 %29, label %then11, label %else12

then11:                                           ; preds = %loop.end10
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont13

else12:                                           ; preds = %loop.end10
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then11
  %iftmp14 = phi i64 [ 1, %then11 ], [ 2, %else12 ]
  store i64 0, i64* %j, align 4
  store i64 11, i64* %i, align 4
  br label %loop.head15

loop.head15:                                      ; preds = %loop.body16, %ifcont13
  %30 = load i64, i64* %i, align 4
  %31 = add i64 %30, -2
  %32 = icmp sge i64 %31, 1
  br i1 %32, label %loop.body16, label %loop.end17

loop.body16:                                      ; preds = %loop.head15
  %33 = load i64, i64* %i, align 4
  %34 = add i64 %33, -2
  store i64 %34, i64* %i, align 4
  %35 = load i64, i64* %j, align 4
  %36 = load i64, i64* %i, align 4
  %37 = add i64 %35, %36
  store i64 %37, i64* %j, align 4
  br label %loop.head15

loop.end17:                                       ; preds = %loop.head15
  %38 = load i64, i64* %j, align 4
  %39 = icmp ne i64 %38, 25
  br i1 %39, label %then18, label %else19

then18:                                           ; preds = %loop.end17
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont20

else19:                                           ; preds = %loop.end17
  br label %ifcont20

ifcont20:                                         ; preds = %else19, %then18
  %iftmp21 = phi i64 [ 1, %then18 ], [ 2, %else19 ]
  store i64 0, i64* %j, align 4
  store i64 -1, i64* %i, align 4
  br label %loop.head22

loop.head22:                                      ; preds = %loop.body23, %ifcont20
  %40 = load i64, i64* %i, align 4
  %41 = add i64 %40, 2
  %42 = icmp sle i64 %41, 10
  br i1 %42, label %loop.body23, label %loop.end24

loop.body23:                                      ; preds = %loop.head22
  %43 = load i64, i64* %i, align 4
  %44 = add i64 %43, 2
  store i64 %44, i64* %i, align 4
  %45 = load i64, i64* %j, align 4
  %46 = load i64, i64* %i, align 4
  %47 = add i64 %45, %46
  store i64 %47, i64* %j, align 4
  br label %loop.head22

loop.end24:                                       ; preds = %loop.head22
  %48 = load i64, i64* %j, align 4
  %49 = icmp ne i64 %48, 25
  br i1 %49, label %then25, label %else26

then25:                                           ; preds = %loop.end24
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont27

else26:                                           ; preds = %loop.end24
  br label %ifcont27

ifcont27:                                         ; preds = %else26, %then25
  %iftmp28 = phi i64 [ 1, %then25 ], [ 2, %else26 ]
  store i64 0, i64* %j, align 4
  store i64 -2, i64* %i, align 4
  br label %loop.head29

loop.head29:                                      ; preds = %loop.body30, %ifcont27
  %50 = load i64, i64* %i, align 4
  %51 = add i64 %50, 3
  %52 = icmp sle i64 %51, 10
  br i1 %52, label %loop.body30, label %loop.end31

loop.body30:                                      ; preds = %loop.head29
  %53 = load i64, i64* %i, align 4
  %54 = add i64 %53, 3
  store i64 %54, i64* %i, align 4
  %55 = load i64, i64* %j, align 4
  %56 = load i64, i64* %i, align 4
  %57 = add i64 %55, %56
  store i64 %57, i64* %j, align 4
  br label %loop.head29

loop.end31:                                       ; preds = %loop.head29
  %58 = load i64, i64* %j, align 4
  %59 = icmp ne i64 %58, 22
  br i1 %59, label %then32, label %else33

then32:                                           ; preds = %loop.end31
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont34

else33:                                           ; preds = %loop.end31
  br label %ifcont34

ifcont34:                                         ; preds = %else33, %then32
  %iftmp35 = phi i64 [ 1, %then32 ], [ 2, %else33 ]
  store i64 0, i64* %j, align 4
  store i64 13, i64* %i, align 4
  br label %loop.head36

loop.head36:                                      ; preds = %loop.body37, %ifcont34
  %60 = load i64, i64* %i, align 4
  %61 = add i64 %60, -3
  %62 = icmp sge i64 %61, 1
  br i1 %62, label %loop.body37, label %loop.end38

loop.body37:                                      ; preds = %loop.head36
  %63 = load i64, i64* %i, align 4
  %64 = add i64 %63, -3
  store i64 %64, i64* %i, align 4
  %65 = load i64, i64* %j, align 4
  %66 = load i64, i64* %i, align 4
  %67 = add i64 %65, %66
  store i64 %67, i64* %j, align 4
  br label %loop.head36

loop.end38:                                       ; preds = %loop.head36
  %68 = load i64, i64* %j, align 4
  %69 = icmp ne i64 %68, 22
  br i1 %69, label %then39, label %else40

then39:                                           ; preds = %loop.end38
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont41

else40:                                           ; preds = %loop.end38
  br label %ifcont41

ifcont41:                                         ; preds = %else40, %then39
  %iftmp42 = phi i64 [ 1, %then39 ], [ 2, %else40 ]
  store i64 0, i64* %j, align 4
  store i64 0, i64* %i, align 4
  br label %loop.head43

loop.head43:                                      ; preds = %loop.body44, %ifcont41
  %70 = load i64, i64* %i, align 4
  %71 = add i64 %70, 1
  %72 = icmp sle i64 %71, 1
  br i1 %72, label %loop.body44, label %loop.end45

loop.body44:                                      ; preds = %loop.head43
  %73 = load i64, i64* %i, align 4
  %74 = add i64 %73, 1
  store i64 %74, i64* %i, align 4
  %75 = load i64, i64* %j, align 4
  %76 = load i64, i64* %i, align 4
  %77 = add i64 %75, %76
  store i64 %77, i64* %j, align 4
  br label %loop.head43

loop.end45:                                       ; preds = %loop.head43
  %78 = load i64, i64* %j, align 4
  %79 = icmp ne i64 %78, 1
  br i1 %79, label %then46, label %else47

then46:                                           ; preds = %loop.end45
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont48

else47:                                           ; preds = %loop.end45
  br label %ifcont48

ifcont48:                                         ; preds = %else47, %then46
  %iftmp49 = phi i64 [ 1, %then46 ], [ 2, %else47 ]
  store i64 0, i64* %j, align 4
  store i64 2, i64* %i, align 4
  br label %loop.head50

loop.head50:                                      ; preds = %loop.body51, %ifcont48
  %80 = load i64, i64* %i, align 4
  %81 = add i64 %80, -1
  %82 = icmp sge i64 %81, 1
  br i1 %82, label %loop.body51, label %loop.end52

loop.body51:                                      ; preds = %loop.head50
  %83 = load i64, i64* %i, align 4
  %84 = add i64 %83, -1
  store i64 %84, i64* %i, align 4
  %85 = load i64, i64* %j, align 4
  %86 = load i64, i64* %i, align 4
  %87 = add i64 %85, %86
  store i64 %87, i64* %j, align 4
  br label %loop.head50

loop.end52:                                       ; preds = %loop.head50
  %88 = load i64, i64* %j, align 4
  %89 = icmp ne i64 %88, 1
  br i1 %89, label %then53, label %else54

then53:                                           ; preds = %loop.end52
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont55

else54:                                           ; preds = %loop.end52
  br label %ifcont55

ifcont55:                                         ; preds = %else54, %then53
  %iftmp56 = phi i64 [ 1, %then53 ], [ 2, %else54 ]
  store i64 0, i64* %j, align 4
  store i64 0, i64* %i, align 4
  br label %loop.head57

loop.head57:                                      ; preds = %loop.body58, %ifcont55
  %90 = load i64, i64* %i, align 4
  %91 = add i64 %90, 1
  %92 = icmp sle i64 %91, 0
  br i1 %92, label %loop.body58, label %loop.end59

loop.body58:                                      ; preds = %loop.head57
  %93 = load i64, i64* %i, align 4
  %94 = add i64 %93, 1
  store i64 %94, i64* %i, align 4
  %95 = load i64, i64* %j, align 4
  %96 = load i64, i64* %i, align 4
  %97 = add i64 %95, %96
  store i64 %97, i64* %j, align 4
  br label %loop.head57

loop.end59:                                       ; preds = %loop.head57
  %98 = load i64, i64* %j, align 4
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %then60, label %else61

then60:                                           ; preds = %loop.end59
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont62

else61:                                           ; preds = %loop.end59
  br label %ifcont62

ifcont62:                                         ; preds = %else61, %then60
  %iftmp63 = phi i64 [ 1, %then60 ], [ 2, %else61 ]
  store i64 0, i64* %j, align 4
  store i64 1, i64* %i, align 4
  br label %loop.head64

loop.head64:                                      ; preds = %loop.body65, %ifcont62
  %100 = load i64, i64* %i, align 4
  %101 = add i64 %100, -1
  %102 = icmp sge i64 %101, 1
  br i1 %102, label %loop.body65, label %loop.end66

loop.body65:                                      ; preds = %loop.head64
  %103 = load i64, i64* %i, align 4
  %104 = add i64 %103, -1
  store i64 %104, i64* %i, align 4
  %105 = load i64, i64* %j, align 4
  %106 = load i64, i64* %i, align 4
  %107 = add i64 %105, %106
  store i64 %107, i64* %j, align 4
  br label %loop.head64

loop.end66:                                       ; preds = %loop.head64
  %108 = load i64, i64* %j, align 4
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %then67, label %else68

then67:                                           ; preds = %loop.end66
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i64 1)
  br label %ifcont69

else68:                                           ; preds = %loop.end66
  br label %ifcont69

ifcont69:                                         ; preds = %else68, %then67
  %iftmp70 = phi i64 [ 1, %then67 ], [ 2, %else68 ]
  ret i64 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i64)

