; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [27 x i8] c"Line 1 - Condition is true\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@2 = private unnamed_addr constant [28 x i8] c"Line 1 - Condition is false\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @main() {
.entry:
  %a = alloca i1, align 1
  %b = alloca i1, align 1
  store i1 true, i1* %a, align 1
  store i1 false, i1* %b, align 1
  %0 = load i1, i1* %a, align 1
  %1 = load i1, i1* %b, align 1
  %2 = and i1 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @0, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @2, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lcompilers_printf(i8*, ...)
