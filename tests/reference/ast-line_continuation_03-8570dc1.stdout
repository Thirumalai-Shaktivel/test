(TranslationUnit [(Program line_continuation_03 [] [(ImplicitNone [])] [(Declaration (AttrType TypeInteger [] () None) [] [(i [] [] () None ())]) (Declaration (AttrType TypeInteger [] () None) [] [(k [] [] () None ())])] [(= 0 i 5 (TriviaNode [] [(EmptyLines)])) (Print 0 () [i] (TriviaNode [] [(EmptyLines) (Comment "! One can continue strings also by treating them as tokens:") (EmptyLines)])) (Print 0 () [(String "some string is continued")] (TriviaNode [] [(EmptyLines) (Comment "! Unless the & is at the end of the line, it can be used as a regular") (Comment "! character in a string:") (EmptyLines)])) (Print 0 () [(String "some string can contain & as a regular character is continued")] (TriviaNode [] [(EmptyLines)])) (Print 0 () [(String "Even here: && <- there will be two &")] (TriviaNode [] [(EmptyLines) (Comment "! One can put arbitrary comments and empty lines after & that will be skipped:") (EmptyLines)])) (Print 0 () [i] (TriviaNode [] [(EmptyLines)])) (Print 0 () [i] (TriviaNode [] [(EmptyLines)])) (Print 0 () [i] (TriviaNode [] [(EmptyLines) (Comment "! In strings the comment cannot be after the first &, but it can be on") (Comment "! subsequent lines:") (EmptyLines)])) (Print 0 () [(String "some string is continued")] (TriviaNode [] [(EmptyLines)]))] [])])
