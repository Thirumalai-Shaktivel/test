(TranslationUnit (SymbolTable 1 {allocate_01: (Program (SymbolTable 2 {a: (Variable 2 a Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), b: (Variable 2 b Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), c: (Variable 2 c Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), ierr: (Variable 2 ierr Local () () Default (Integer 4 []) Source Public Required .false.), n: (Variable 2 n Local () () Default (Integer 4 []) Source Public Required .false.), whole_square: (Function (SymbolTable 3 {a: (Variable 3 a Unspecified () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), a_2: (Variable 3 a_2 Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), ab: (Variable 3 ab Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), abc: (Variable 3 abc Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), b: (Variable 3 b Unspecified () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), b_2: (Variable 3 b_2 Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), bc: (Variable 3 bc Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), c: (Variable 3 c Unspecified () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), c_2: (Variable 3 c_2 Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), ca: (Variable 3 ca Local () () Allocatable (Integer 4 [(() ())]) Source Public Required .false.), n: (Variable 3 n Local () () Default (Integer 4 []) Source Public Required .false.), size: (ExternalSymbol 3 size 5 size lfortran_intrinsic_builtin [] size Private), status: (Variable 3 status ReturnVar () () Default (Integer 4 []) Source Public Required .false.)}) whole_square [(Var 3 a) (Var 3 b) (Var 3 c)] [(= (Var 3 n) (FunctionCall 3 size () [((Var 3 a))] [] (Integer 4 []) () ()) ()) (Allocate [(3 a_2 [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))]) (3 b_2 [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))]) (3 c_2 [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))])] ()) (Allocate [(3 ab [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))]) (3 bc [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))]) (3 ca [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))]) (3 abc [((ConstantInteger 1 (Integer 4 [])) (Var 3 n))])] ()) (= (Var 3 status) (ConstantInteger 0 (Integer 4 [])) ()) (= (Var 3 a_2) (BinOp (Var 3 a) Mul (Var 3 a) (Integer 4 [(() ())]) () ()) ()) (= (Var 3 b_2) (BinOp (Var 3 b) Mul (Var 3 b) (Integer 4 [(() ())]) () ()) ()) (= (Var 3 c_2) (BinOp (Var 3 c) Mul (Var 3 c) (Integer 4 [(() ())]) () ()) ()) (= (Var 3 ab) (BinOp (BinOp (ConstantInteger 2 (Integer 4 [])) Mul (Var 3 a) (Integer 4 []) () ()) Mul (Var 3 b) (Integer 4 []) () ()) ()) (= (Var 3 bc) (BinOp (BinOp (ConstantInteger 2 (Integer 4 [])) Mul (Var 3 b) (Integer 4 []) () ()) Mul (Var 3 c) (Integer 4 []) () ()) ()) (= (Var 3 ca) (BinOp (BinOp (ConstantInteger 2 (Integer 4 [])) Mul (Var 3 c) (Integer 4 []) () ()) Mul (Var 3 a) (Integer 4 []) () ()) ()) (= (Var 3 abc) (BinOp (BinOp (BinOp (ConstantInteger 2 (Integer 4 [])) Mul (Var 3 a) (Integer 4 []) () ()) Mul (Var 3 b) (Integer 4 []) () ()) Mul (Var 3 c) (Integer 4 []) () ()) ()) (= (Var 3 status) (ConstantInteger 1 (Integer 4 [])) ()) (ImplicitDeallocate [3 a_2 3 ab 3 abc 3 b_2 3 bc 3 c_2 3 ca])] (Var 3 status) Source Public Implementation ())}) allocate_01 [] [(= (Var 2 n) (ConstantInteger 10 (Integer 4 [])) ()) (Allocate [(2 a [((ConstantInteger 1 (Integer 4 [])) (Var 2 n))]) (2 b [((ConstantInteger 1 (Integer 4 [])) (Var 2 n))]) (2 c [((ConstantInteger 1 (Integer 4 [])) (Var 2 n))])] (Var 2 ierr)) (= (Var 2 a) (ConstantInteger 1 (Integer 4 [])) ()) (= (Var 2 b) (ConstantInteger 2 (Integer 4 [])) ()) (= (Var 2 c) (ConstantInteger 3 (Integer 4 [])) ()) (Print () [(FunctionCall 2 whole_square () [((Var 2 a)) ((Var 2 b)) ((Var 2 c))] [] (Integer 4 []) () ())]) (ImplicitDeallocate [2 a 2 b 2 c])]), lfortran_intrinsic_builtin: (IntrinsicModule lfortran_intrinsic_builtin)}) [])
