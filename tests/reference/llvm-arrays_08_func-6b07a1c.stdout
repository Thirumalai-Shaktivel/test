; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, [1 x %dimension_descriptor] }
%dimension_descriptor = type { i32, i32, i32, i32 }
%size_arg = type { %dimension_descriptor*, i32 }
%array_call = type { i32*, i32, [1 x %dimension_descriptor] }
%array_call.0 = type { i32*, i32, [1 x %dimension_descriptor] }
%array_call.1 = type { i32*, i32, [1 x %dimension_descriptor] }
%array_call.2 = type { i32*, i32, [1 x %dimension_descriptor] }
%array.3 = type { [10 x i32], i32, [1 x %dimension_descriptor] }

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @__module_lfortran_intrinsic_array_abs(%array*)

declare i1 @__module_lfortran_intrinsic_array_allocated(%array*)

define i32 @__module_lfortran_intrinsic_array_lbound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %lbound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %lbound, align 4
  %6 = load i32, i32* %lbound, align 4
  ret i32 %6
}

declare i32 @__module_lfortran_intrinsic_array_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_array_maxval(%array*)

declare i32 @__module_lfortran_intrinsic_array_min(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_array_minval(%array*)

declare i32 @__module_lfortran_intrinsic_array_real(%array*, i32*)

define i32 @__module_lfortran_intrinsic_array_size(%size_arg* %x) {
.entry:
  %size = alloca i32, align 4
  %0 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 0
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  store i32 1, i32* %size, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, %3
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %size, align 4
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 %7
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %8, %11
  store i32 %12, i32* %size, align 4
  %13 = add i32 %7, 1
  store i32 %13, i32* %4, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %14 = load i32, i32* %size, align 4
  ret i32 %14
}

declare i32 @__module_lfortran_intrinsic_array_sum(%array*)

declare float @__module_lfortran_intrinsic_array_tiny(%array*)

define i32 @__module_lfortran_intrinsic_array_ubound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %ubound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %ubound, align 4
  %6 = load i32, i32* %ubound, align 4
  ret i32 %6
}

define void @copy_from_to(%array_call* %a, %array_call.0* %b) {
.entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = alloca %size_arg, align 8
  %3 = getelementptr %array_call, %array_call* %a, i32 0, i32 2
  %4 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %3, i32 0, i32 0
  %5 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 0
  store %dimension_descriptor* %4, %dimension_descriptor** %5, align 8
  %6 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 1
  store i32 1, i32* %6, align 4
  %7 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %2)
  %8 = icmp sle i32 %1, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  %11 = load i32, i32* %i, align 4
  %12 = getelementptr %array_call.0, %array_call.0* %b, i32 0, i32 2
  %13 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %12, i32 0, i32 0
  %14 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sub i32 %11, %15
  %17 = mul i32 1, %16
  %18 = add i32 0, %17
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = mul i32 1, %20
  %22 = getelementptr %array_call.0, %array_call.0* %b, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = getelementptr inbounds i32, i32* %23, i32 %18
  %25 = load i32, i32* %i, align 4
  %26 = getelementptr %array_call, %array_call* %a, i32 0, i32 2
  %27 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %26, i32 0, i32 0
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sub i32 %25, %29
  %31 = mul i32 1, %30
  %32 = add i32 0, %31
  %33 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = mul i32 1, %34
  %36 = getelementptr %array_call, %array_call* %a, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = getelementptr inbounds i32, i32* %37, i32 %32
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %24, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  ret void
}

define i1 @verify(%array_call.1* %a, %array_call.2* %b) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  store i1 true, i1* %r, align 1
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = alloca %size_arg, align 8
  %3 = getelementptr %array_call.1, %array_call.1* %a, i32 0, i32 2
  %4 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %3, i32 0, i32 0
  %5 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 0
  store %dimension_descriptor* %4, %dimension_descriptor** %5, align 8
  %6 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 1
  store i32 1, i32* %6, align 4
  %7 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %2)
  %8 = icmp sle i32 %1, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  %11 = load i1, i1* %r, align 1
  %12 = load i32, i32* %i, align 4
  %13 = getelementptr %array_call.1, %array_call.1* %a, i32 0, i32 2
  %14 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %13, i32 0, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %12, %16
  %18 = mul i32 1, %17
  %19 = add i32 0, %18
  %20 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = mul i32 1, %21
  %23 = getelementptr %array_call.1, %array_call.1* %a, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i32 %19
  %26 = load i32, i32* %25, align 4
  %27 = load i32, i32* %i, align 4
  %28 = getelementptr %array_call.2, %array_call.2* %b, i32 0, i32 2
  %29 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %28, i32 0, i32 0
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %29, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = sub i32 %27, %31
  %33 = mul i32 1, %32
  %34 = add i32 0, %33
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %29, i32 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = mul i32 1, %36
  %38 = getelementptr %array_call.2, %array_call.2* %b, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = getelementptr inbounds i32, i32* %39, i32 %34
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %26, %41
  %43 = and i1 %11, %42
  store i1 %43, i1* %r, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %44 = load i1, i1* %r, align 1
  ret i1 %44
}

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %x = alloca %array.3, align 8
  %0 = getelementptr %array.3, %array.3* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array.3, %array.3* %x, i32 0, i32 2
  %2 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %1, i32 0, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %5 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2
  %6 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 10, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub i32 %7, %8
  %10 = add i32 %9, 1
  store i32 %10, i32* %6, align 4
  %y = alloca %array.3, align 8
  %11 = getelementptr %array.3, %array.3* %y, i32 0, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr %array.3, %array.3* %y, i32 0, i32 2
  %13 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %12, i32 0, i32 0
  %14 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 1
  %16 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 2
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 3
  store i32 1, i32* %14, align 4
  store i32 1, i32* %15, align 4
  store i32 10, i32* %16, align 4
  %18 = load i32, i32* %16, align 4
  %19 = load i32, i32* %15, align 4
  %20 = sub i32 %18, %19
  %21 = add i32 %20, 1
  store i32 %21, i32* %17, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %22 = load i32, i32* %i, align 4
  %23 = add i32 %22, 1
  %24 = alloca %size_arg, align 8
  %25 = getelementptr %array.3, %array.3* %x, i32 0, i32 2
  %26 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %25, i32 0, i32 0
  %27 = getelementptr %size_arg, %size_arg* %24, i32 0, i32 0
  store %dimension_descriptor* %26, %dimension_descriptor** %27, align 8
  %28 = getelementptr %size_arg, %size_arg* %24, i32 0, i32 1
  store i32 1, i32* %28, align 4
  %29 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %24)
  %30 = icmp sle i32 %23, %29
  br i1 %30, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %31 = load i32, i32* %i, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %i, align 4
  %33 = load i32, i32* %i, align 4
  %34 = getelementptr %array.3, %array.3* %x, i32 0, i32 2
  %35 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %34, i32 0, i32 0
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub i32 %33, %37
  %39 = mul i32 1, %38
  %40 = add i32 0, %39
  %41 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = mul i32 1, %42
  %44 = getelementptr %array.3, %array.3* %x, i32 0, i32 0
  %45 = getelementptr [10 x i32], [10 x i32]* %44, i32 0, i32 %40
  %46 = load i32, i32* %i, align 4
  store i32 %46, i32* %45, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %47 = alloca %array_call, align 8
  %48 = getelementptr %array.3, %array.3* %x, i32 0, i32 0
  %49 = getelementptr [10 x i32], [10 x i32]* %48, i32 0, i32 0
  %50 = getelementptr %array_call, %array_call* %47, i32 0, i32 0
  store i32* %49, i32** %50, align 8
  %51 = getelementptr %array.3, %array.3* %x, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr %array_call, %array_call* %47, i32 0, i32 1
  store i32 %52, i32* %53, align 4
  %54 = getelementptr %array.3, %array.3* %x, i32 0, i32 2
  %55 = load [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %54, align 4
  %56 = getelementptr %array_call, %array_call* %47, i32 0, i32 2
  store [1 x %dimension_descriptor] %55, [1 x %dimension_descriptor]* %56, align 4
  %57 = alloca %array_call.0, align 8
  %58 = getelementptr %array.3, %array.3* %y, i32 0, i32 0
  %59 = getelementptr [10 x i32], [10 x i32]* %58, i32 0, i32 0
  %60 = getelementptr %array_call.0, %array_call.0* %57, i32 0, i32 0
  store i32* %59, i32** %60, align 8
  %61 = getelementptr %array.3, %array.3* %y, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr %array_call.0, %array_call.0* %57, i32 0, i32 1
  store i32 %62, i32* %63, align 4
  %64 = getelementptr %array.3, %array.3* %y, i32 0, i32 2
  %65 = load [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %64, align 4
  %66 = getelementptr %array_call.0, %array_call.0* %57, i32 0, i32 2
  store [1 x %dimension_descriptor] %65, [1 x %dimension_descriptor]* %66, align 4
  call void @copy_from_to(%array_call* %47, %array_call.0* %57)
  %67 = alloca %array_call.1, align 8
  %68 = getelementptr %array.3, %array.3* %x, i32 0, i32 0
  %69 = getelementptr [10 x i32], [10 x i32]* %68, i32 0, i32 0
  %70 = getelementptr %array_call.1, %array_call.1* %67, i32 0, i32 0
  store i32* %69, i32** %70, align 8
  %71 = getelementptr %array.3, %array.3* %x, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr %array_call.1, %array_call.1* %67, i32 0, i32 1
  store i32 %72, i32* %73, align 4
  %74 = getelementptr %array.3, %array.3* %x, i32 0, i32 2
  %75 = load [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %74, align 4
  %76 = getelementptr %array_call.1, %array_call.1* %67, i32 0, i32 2
  store [1 x %dimension_descriptor] %75, [1 x %dimension_descriptor]* %76, align 4
  %77 = alloca %array_call.2, align 8
  %78 = getelementptr %array.3, %array.3* %y, i32 0, i32 0
  %79 = getelementptr [10 x i32], [10 x i32]* %78, i32 0, i32 0
  %80 = getelementptr %array_call.2, %array_call.2* %77, i32 0, i32 0
  store i32* %79, i32** %80, align 8
  %81 = getelementptr %array.3, %array.3* %y, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr %array_call.2, %array_call.2* %77, i32 0, i32 1
  store i32 %82, i32* %83, align 4
  %84 = getelementptr %array.3, %array.3* %y, i32 0, i32 2
  %85 = load [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %84, align 4
  %86 = getelementptr %array_call.2, %array_call.2* %77, i32 0, i32 2
  store [1 x %dimension_descriptor] %85, [1 x %dimension_descriptor]* %86, align 4
  %87 = call i1 @verify(%array_call.1* %67, %array_call.2* %77)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i1 %87)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

