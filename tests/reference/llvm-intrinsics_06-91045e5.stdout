; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@6 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_array_char(i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*)

define float @__module_lfortran_intrinsic_math_sacos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacos(float)

define float @__module_lfortran_intrinsic_math_sacosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacosh(float)

define float @__module_lfortran_intrinsic_math_sasin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasin(float)

define float @__module_lfortran_intrinsic_math_sasinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasinh(float)

define float @__module_lfortran_intrinsic_math_satan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satan(float)

define float @__module_lfortran_intrinsic_math_satanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satanh(float)

define i32 @main() {
.entry:
  %x = alloca float, align 4
  %0 = alloca float, align 4
  store float 0x3FEAED5480000000, float* %0, align 4
  %1 = call float @__module_lfortran_intrinsic_math_sasin(float* %0)
  store float %1, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), double %3)
  %4 = alloca float, align 4
  store float 0x3FE14A2820000000, float* %4, align 4
  %5 = call float @__module_lfortran_intrinsic_math_sacos(float* %4)
  store float %5, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fpext float %6 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), double %7)
  %8 = alloca float, align 4
  store float 0x3FF8EB2460000000, float* %8, align 4
  %9 = call float @__module_lfortran_intrinsic_math_satan(float* %8)
  store float %9, float* %x, align 4
  %10 = load float, float* %x, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), double %11)
  %12 = alloca float, align 4
  store float 0x3FF2CD9FC0000000, float* %12, align 4
  %13 = call float @__module_lfortran_intrinsic_math_sasinh(float* %12)
  store float %13, float* %x, align 4
  %14 = load float, float* %x, align 4
  %15 = fpext float %14 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i32 0, i32 0), double %15)
  %16 = alloca float, align 4
  store float 0x3FF8B07540000000, float* %16, align 4
  %17 = call float @__module_lfortran_intrinsic_math_sacosh(float* %16)
  store float %17, float* %x, align 4
  %18 = load float, float* %x, align 4
  %19 = fpext float %18 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), double %19)
  %20 = alloca float, align 4
  store float 0x3FE85EFAC0000000, float* %20, align 4
  %21 = call float @__module_lfortran_intrinsic_math_satanh(float* %20)
  store float %21, float* %x, align 4
  %22 = load float, float* %x, align 4
  %23 = fpext float %22 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @6, i32 0, i32 0), double %23)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
