; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

define i64 @main() {
.entry:
  %x = alloca float, align 4
  %0 = alloca float, align 4
  store float 0x3FEAED5480000000, float* %0, align 4
  %1 = alloca float, align 4
  %2 = load float, float* %0, align 4
  call void @_lfortran_asin(float %2, float* %1)
  %3 = load float, float* %1, align 4
  store float %3, float* %x, align 4
  %4 = load float, float* %x, align 4
  %5 = fpext float %4 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), double %5)
  %6 = alloca float, align 4
  store float 0x3FE14A2820000000, float* %6, align 4
  %7 = alloca float, align 4
  %8 = load float, float* %6, align 4
  call void @_lfortran_acos(float %8, float* %7)
  %9 = load float, float* %7, align 4
  store float %9, float* %x, align 4
  %10 = load float, float* %x, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), double %11)
  %12 = alloca float, align 4
  store float 0x3FF8EB2460000000, float* %12, align 4
  %13 = alloca float, align 4
  %14 = load float, float* %12, align 4
  call void @_lfortran_atan(float %14, float* %13)
  %15 = load float, float* %13, align 4
  store float %15, float* %x, align 4
  %16 = load float, float* %x, align 4
  %17 = fpext float %16 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), double %17)
  %18 = alloca float, align 4
  store float 0x3FF2CD9FC0000000, float* %18, align 4
  %19 = alloca float, align 4
  %20 = load float, float* %18, align 4
  call void @_lfortran_asinh(float %20, float* %19)
  %21 = load float, float* %19, align 4
  store float %21, float* %x, align 4
  %22 = load float, float* %x, align 4
  %23 = fpext float %22 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), double %23)
  %24 = alloca float, align 4
  store float 0x3FF8B07540000000, float* %24, align 4
  %25 = alloca float, align 4
  %26 = load float, float* %24, align 4
  call void @_lfortran_acosh(float %26, float* %25)
  %27 = load float, float* %25, align 4
  store float %27, float* %x, align 4
  %28 = load float, float* %x, align 4
  %29 = fpext float %28 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i32 0, i32 0), double %29)
  %30 = alloca float, align 4
  store float 0x3FE85EFAC0000000, float* %30, align 4
  %31 = alloca float, align 4
  %32 = load float, float* %30, align 4
  call void @_lfortran_atanh(float %32, float* %31)
  %33 = load float, float* %31, align 4
  store float %33, float* %x, align 4
  %34 = load float, float* %x, align 4
  %35 = fpext float %34 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), double %35)
  ret i64 0
}

declare void @_lfortran_sin(float, float*)

declare void @_lfortran_cos(float, float*)

declare void @_lfortran_tan(float, float*)

declare void @_lfortran_sinh(float, float*)

declare void @_lfortran_cosh(float, float*)

declare void @_lfortran_tanh(float, float*)

declare void @_lfortran_asin(float, float*)

declare void @_lfortran_acos(float, float*)

declare void @_lfortran_atan(float, float*)

declare void @_lfortran_asinh(float, float*)

declare void @_lfortran_acosh(float, float*)

declare void @_lfortran_atanh(float, float*)

declare void @_lfortran_printf(i8*, ...)

