; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex_4 = type { float, float }
%complex_8 = type { double, double }

@0 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

define %complex_4 @__module_lfortran_intrinsic_math_cacos(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_cacos(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_cacos(%complex_4)

define %complex_4 @__module_lfortran_intrinsic_math_cacosh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_cacosh(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_cacosh(%complex_4)

define %complex_4 @__module_lfortran_intrinsic_math_casin(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_casin(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_casin(%complex_4)

define %complex_4 @__module_lfortran_intrinsic_math_casinh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_casinh(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_casinh(%complex_4)

define %complex_4 @__module_lfortran_intrinsic_math_catan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_catan(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_catan(%complex_4)

define %complex_4 @__module_lfortran_intrinsic_math_catanh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = call %complex_4 @_lfortran_catanh(%complex_4 %0)
  store %complex_4 %1, %complex_4* %r, align 4
  %2 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %2
}

declare %complex_4 @_lfortran_catanh(%complex_4)

define double @__module_lfortran_intrinsic_math_dacos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacos(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacos(double)

define double @__module_lfortran_intrinsic_math_dacosh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacosh(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacosh(double)

define double @__module_lfortran_intrinsic_math_dasin(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasin(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasin(double)

define double @__module_lfortran_intrinsic_math_dasinh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasinh(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasinh(double)

define double @__module_lfortran_intrinsic_math_datan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datan(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datan(double)

define double @__module_lfortran_intrinsic_math_datanh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datanh(double %0)
  store double %1, double* %r, align 8
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datanh(double)

define float @__module_lfortran_intrinsic_math_sacos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacos(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacos(float)

define float @__module_lfortran_intrinsic_math_sacosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacosh(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacosh(float)

define float @__module_lfortran_intrinsic_math_sasin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasin(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasin(float)

define float @__module_lfortran_intrinsic_math_sasinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasinh(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasinh(float)

define float @__module_lfortran_intrinsic_math_satan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satan(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satan(float)

define float @__module_lfortran_intrinsic_math_satanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satanh(float %0)
  store float %1, float* %r, align 4
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satanh(float)

define %complex_8 @__module_lfortran_intrinsic_math_zacos(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacos(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacos(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zacosh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacosh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacosh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasin(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasin(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasin(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasinh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasinh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasinh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatan(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatanh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatanh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatanh(%complex_8)

define i32 @main() {
.entry:
  %x = alloca float, align 4
  %0 = alloca float, align 4
  store float 0x3FEAED5480000000, float* %0, align 4
  %1 = call float @__module_lfortran_intrinsic_math_sasin(float* %0)
  store float %1, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), double %3)
  %4 = alloca float, align 4
  store float 0x3FE14A2820000000, float* %4, align 4
  %5 = call float @__module_lfortran_intrinsic_math_sacos(float* %4)
  store float %5, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fpext float %6 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), double %7)
  %8 = alloca float, align 4
  store float 0x3FF8EB2460000000, float* %8, align 4
  %9 = call float @__module_lfortran_intrinsic_math_satan(float* %8)
  store float %9, float* %x, align 4
  %10 = load float, float* %x, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), double %11)
  %12 = alloca float, align 4
  store float 0x3FF2CD9FC0000000, float* %12, align 4
  %13 = call float @__module_lfortran_intrinsic_math_sasinh(float* %12)
  store float %13, float* %x, align 4
  %14 = load float, float* %x, align 4
  %15 = fpext float %14 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), double %15)
  %16 = alloca float, align 4
  store float 0x3FF8B07540000000, float* %16, align 4
  %17 = call float @__module_lfortran_intrinsic_math_sacosh(float* %16)
  store float %17, float* %x, align 4
  %18 = load float, float* %x, align 4
  %19 = fpext float %18 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i32 0, i32 0), double %19)
  %20 = alloca float, align 4
  store float 0x3FE85EFAC0000000, float* %20, align 4
  %21 = call float @__module_lfortran_intrinsic_math_satanh(float* %20)
  store float %21, float* %x, align 4
  %22 = load float, float* %x, align 4
  %23 = fpext float %22 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), double %23)
  ret i32 0
}

declare void @_lfortran_sin(float, float*)

declare void @_lfortran_cos(float, float*)

declare void @_lfortran_tan(float, float*)

declare void @_lfortran_sinh(float, float*)

declare void @_lfortran_cosh(float, float*)

declare void @_lfortran_tanh(float, float*)

declare void @_lfortran_asin(float, float*)

declare void @_lfortran_acos(float, float*)

declare void @_lfortran_atan(float, float*)

declare void @_lfortran_asinh(float, float*)

declare void @_lfortran_acosh(float, float*)

declare void @_lfortran_atanh(float, float*)

declare void @_lfortran_printf(i8*, ...)

