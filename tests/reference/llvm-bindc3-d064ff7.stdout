; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [11 x i8] c"%lld %lld\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*, %array*)

define i32 @main() {
.entry:
  %idx = alloca i32, align 4
  store i32 1, i32* %idx, align 4
  %queries = alloca void*, align 8
  %x = alloca i16*, align 8
  %0 = load void*, void** %queries, align 8
  %1 = bitcast void* %0 to i16*
  store i16* %1, i16** %x, align 8
  %2 = load i16*, i16** %x, align 8
  %3 = bitcast i16* %2 to void*
  %4 = ptrtoint void* %3 to i64
  %5 = load void*, void** %queries, align 8
  %6 = ptrtoint void* %5 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0), i64 %4, i64 %6)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
