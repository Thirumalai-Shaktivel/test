; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont3, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = icmp sle i32 %1, 10
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %i, align 4
  %7 = add i32 %5, %6
  store i32 %7, i32* %j, align 4
  %8 = load i32, i32* %i, align 4
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %then, label %else

then:                                             ; preds = %loop.body
  br label %ifcont

else:                                             ; preds = %loop.body
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %10 = load i32, i32* %i, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %loop.end

dead_block:                                       ; No predecessors!
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %dead_block
  %iftmp4 = phi i32 [ 1, %dead_block ], [ 2, %else2 ]
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  %12 = load i32, i32* %j, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %then5, label %else6

then5:                                            ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %loop.end
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %iftmp8 = phi i32 [ 1, %then5 ], [ 2, %else6 ]
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head9

loop.head9:                                       ; preds = %ifcont14, %ifcont7
  %14 = load i32, i32* %i, align 4
  %15 = add i32 %14, 1
  %16 = icmp sle i32 %15, 10
  br i1 %16, label %loop.body10, label %loop.end16

loop.body10:                                      ; preds = %loop.head9
  %17 = load i32, i32* %i, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %i, align 4
  %19 = load i32, i32* %i, align 4
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %then11, label %else13

then11:                                           ; preds = %loop.body10
  br label %loop.end16

dead_block12:                                     ; No predecessors!
  br label %ifcont14

else13:                                           ; preds = %loop.body10
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %dead_block12
  %iftmp15 = phi i32 [ 1, %dead_block12 ], [ 2, %else13 ]
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i, align 4
  %23 = add i32 %21, %22
  store i32 %23, i32* %j, align 4
  br label %loop.head9

loop.end16:                                       ; preds = %then11, %loop.head9
  %24 = load i32, i32* %j, align 4
  %25 = icmp ne i32 %24, 1
  br i1 %25, label %then17, label %else18

then17:                                           ; preds = %loop.end16
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont19

else18:                                           ; preds = %loop.end16
  br label %ifcont19

ifcont19:                                         ; preds = %else18, %then17
  %iftmp20 = phi i32 [ 1, %then17 ], [ 2, %else18 ]
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head21

loop.head21:                                      ; preds = %ifcont26, %then23, %ifcont19
  %26 = load i32, i32* %i, align 4
  %27 = add i32 %26, 1
  %28 = icmp sle i32 %27, 10
  br i1 %28, label %loop.body22, label %loop.end28

loop.body22:                                      ; preds = %loop.head21
  %29 = load i32, i32* %i, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %then23, label %else25

then23:                                           ; preds = %loop.body22
  br label %loop.head21

dead_block24:                                     ; No predecessors!
  br label %ifcont26

else25:                                           ; preds = %loop.body22
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %dead_block24
  %iftmp27 = phi i32 [ 1, %dead_block24 ], [ 2, %else25 ]
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %33, %34
  store i32 %35, i32* %j, align 4
  br label %loop.head21

loop.end28:                                       ; preds = %loop.head21
  %36 = load i32, i32* %j, align 4
  %37 = icmp ne i32 %36, 53
  br i1 %37, label %then29, label %else30

then29:                                           ; preds = %loop.end28
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont31

else30:                                           ; preds = %loop.end28
  br label %ifcont31

ifcont31:                                         ; preds = %else30, %then29
  %iftmp32 = phi i32 [ 1, %then29 ], [ 2, %else30 ]
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
