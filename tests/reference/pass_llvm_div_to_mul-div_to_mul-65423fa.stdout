; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array.0 = type { i1*, i32, %dimension_descriptor*, i1, i32 }
%array.1 = type { float*, i32, %dimension_descriptor*, i1, i32 }
%c_ptr = type { i32 }
%complex_4 = type { float, float }
%complex_8 = type { double, double }
%array.2 = type { double*, i32, %dimension_descriptor*, i1, i32 }
%array.3 = type { %complex_4*, i32, %dimension_descriptor*, i1, i32 }
%array.4 = type { %complex_8*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_achar(i32*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_allocated(%array*)

declare i1 @__module_lfortran_intrinsic_builtin_any(%array.0*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_bit_size(i32*)

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_iachar(i8**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_int(%array.1*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_is_iostat_eor(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_maxval(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_min(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_minval(%array*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_present(i32*)

declare float @__module_lfortran_intrinsic_builtin_real(%array*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_reshape(%array*, %array*)

declare i32 @__module_lfortran_intrinsic_builtin_shape(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_sum(%array*)

declare float @__module_lfortran_intrinsic_builtin_tiny(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor**, i32*)

declare i1 @__module_lfortran_intrinsic_iso_c_binding_c_associated(%c_ptr*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

declare i32 @__module_lfortran_intrinsic_iso_c_binding_c_loc(i32*)

define float @__module_lfortran_intrinsic_math_cabs(%complex_4* %x) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca float, align 4
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = alloca %complex_4, align 8
  store %complex_4 %0, %complex_4* %1, align 4
  %2 = getelementptr %complex_4, %complex_4* %1, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = call float @llvm.pow.f32(float %3, float 2.000000e+00)
  %5 = call float @__module_lfortran_intrinsic_math_caimag(%complex_4* %x)
  %6 = call float @llvm.pow.f32(float %5, float 2.000000e+00)
  %7 = fadd float %4, %6
  store float %7, float* %call_arg_value, align 4
  %8 = call float @__module_lfortran_intrinsic_math_ssqrt(float* %call_arg_value)
  store float %8, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %9 = load float, float* %r, align 4
  ret float %9
}

define %complex_4 @__module_lfortran_intrinsic_math_cacos(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cacos(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cacos(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_cacosh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cacosh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cacosh(<2 x float>)

define float @__module_lfortran_intrinsic_math_caimag(%complex_4* %x) {
.entry:
  %r = alloca float, align 4
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call float @_lfortran_caimag(<2 x float> %1)
  store float %2, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %r, align 4
  ret float %3
}

declare float @_lfortran_caimag(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_casin(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_casin(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_casin(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_casinh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_casinh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_casinh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_catan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_catan(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_catan(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_catanh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_catanh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_catanh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ccos(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ccos(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ccos(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ccosh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ccosh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ccosh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_cexp(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cexp(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cexp(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_clog(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_clog(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_clog(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_conjgz32(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_conjgz64(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %0
}

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define i32 @__module_lfortran_intrinsic_math_crange(%complex_4* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 37, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define %complex_4 @__module_lfortran_intrinsic_math_csin(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csin(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csin(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_csinh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csinh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csinh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_csqrt(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csqrt(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csqrt(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ctan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ctan(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ctan(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ctanh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ctanh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ctanh(<2 x float>)

define double @__module_lfortran_intrinsic_math_dabs(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_math_dacos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacos(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacos(double)

define double @__module_lfortran_intrinsic_math_dacosh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacosh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacosh(double)

define double @__module_lfortran_intrinsic_math_dasin(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasin(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasin(double)

define double @__module_lfortran_intrinsic_math_dasinh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasinh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasinh(double)

define double @__module_lfortran_intrinsic_math_datan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datan(double)

define double @__module_lfortran_intrinsic_math_datan2(double* %y, double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %y, align 8
  %1 = load double, double* %x, align 8
  %2 = call double @_lfortran_datan2(double %0, double %1)
  store double %2, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load double, double* %r, align 8
  ret double %3
}

declare double @_lfortran_datan2(double, double)

define double @__module_lfortran_intrinsic_math_datanh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datanh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datanh(double)

define double @__module_lfortran_intrinsic_math_dcos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcos(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dcos(double)

define double @__module_lfortran_intrinsic_math_dcosh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcosh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dcosh(double)

define double @__module_lfortran_intrinsic_math_depsilon(double* %x) {
.entry:
  %r = alloca double, align 8
  store double 0x3CB0000000000000, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define double @__module_lfortran_intrinsic_math_derf(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_derf(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_derf(double)

define double @__module_lfortran_intrinsic_math_derfc(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_derfc(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_derfc(double)

define double @__module_lfortran_intrinsic_math_dexp(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dexp(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dexp(double)

define double @__module_lfortran_intrinsic_math_dgamma(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dgamma(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dgamma(double)

define double @__module_lfortran_intrinsic_math_dlog(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog(double)

define double @__module_lfortran_intrinsic_math_dlog10(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog10(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog10(double)

define double @__module_lfortran_intrinsic_math_dlog_gamma(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog_gamma(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog_gamma(double)

define float @__module_lfortran_intrinsic_math_dotproductr32r32(%array.1* %x, %array.1* %y) {
.entry:
  %r = alloca float, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define double @__module_lfortran_intrinsic_math_dotproductr64r64(%array.2* %x, %array.2* %y) {
.entry:
  %r = alloca double, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define %complex_4 @__module_lfortran_intrinsic_math_dotproductz32z32(%array.3* %x, %array.3* %y) {
.entry:
  %r = alloca %complex_4, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_dotproductz64z64(%array.4* %x, %array.4* %y) {
.entry:
  %r = alloca %complex_8, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %0
}

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define i32 @__module_lfortran_intrinsic_math_drange(double* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 307, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define double @__module_lfortran_intrinsic_math_dsin(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsin(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dsin(double)

define double @__module_lfortran_intrinsic_math_dsinh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsinh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dsinh(double)

define double @__module_lfortran_intrinsic_math_dsqrt(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = call double @llvm.pow.f64(double %2, double 5.000000e-01)
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load double, double* %r, align 8
  ret double %4
}

define double @__module_lfortran_intrinsic_math_dtan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtan(double)

define double @__module_lfortran_intrinsic_math_dtanh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtanh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtanh(double)

define i16 @__module_lfortran_intrinsic_math_i16abs(i16* %x) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = icmp sge i16 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i16, i16* %x, align 2
  store i16 %2, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i16, i16* %x, align 2
  %4 = sub i16 0, %3
  store i16 %4, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i16, i16* %r, align 2
  ret i16 %5
}

define i32 @__module_lfortran_intrinsic_math_i32range(i32* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define i64 @__module_lfortran_intrinsic_math_i64abs(i64* %x) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i64, i64* %x, align 4
  store i64 %2, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i64, i64* %x, align 4
  %4 = sub i64 0, %3
  store i64 %4, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i64, i64* %r, align 4
  ret i64 %5
}

define i32 @__module_lfortran_intrinsic_math_i64range(i64* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 18, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define i8 @__module_lfortran_intrinsic_math_i8abs(i8* %x) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = icmp sge i8 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i8, i8* %x, align 1
  store i8 %2, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i8, i8* %x, align 1
  %4 = sub i8 0, %3
  store i8 %4, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i8, i8* %r, align 1
  ret i8 %5
}

define i32 @__module_lfortran_intrinsic_math_iabs(i32* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

define i32 @__module_lfortran_intrinsic_math_int16range(i16* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 4, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i32 @__module_lfortran_intrinsic_math_int8range(i8* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 2, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define float @__module_lfortran_intrinsic_math_sabs(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @__module_lfortran_intrinsic_math_sacos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacos(float)

define float @__module_lfortran_intrinsic_math_sacosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacosh(float)

define float @__module_lfortran_intrinsic_math_sasin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasin(float)

define float @__module_lfortran_intrinsic_math_sasinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasinh(float)

define float @__module_lfortran_intrinsic_math_satan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satan(float)

define float @__module_lfortran_intrinsic_math_satan2(float* %y, float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %y, align 4
  %1 = load float, float* %x, align 4
  %2 = call float @_lfortran_satan2(float %0, float %1)
  store float %2, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %r, align 4
  ret float %3
}

declare float @_lfortran_satan2(float, float)

define float @__module_lfortran_intrinsic_math_satanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satanh(float)

define float @__module_lfortran_intrinsic_math_scos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define float @__module_lfortran_intrinsic_math_scosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scosh(float)

define float @__module_lfortran_intrinsic_math_sepsilon(float* %x) {
.entry:
  %r = alloca float, align 4
  store float 0x3E80000000000000, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define float @__module_lfortran_intrinsic_math_serf(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_serf(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_serf(float)

define float @__module_lfortran_intrinsic_math_serfc(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_serfc(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_serfc(float)

define float @__module_lfortran_intrinsic_math_sexp(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sexp(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sexp(float)

define float @__module_lfortran_intrinsic_math_sgamma(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sgamma(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sgamma(float)

define i16 @__module_lfortran_intrinsic_math_signi16(i16* %x, i16* %y) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = icmp sge i16 %0, %0
  %2 = load i16, i16* %y, align 2
  %3 = icmp sge i16 %2, %2
  %4 = and i1 %1, %3
  %5 = load i16, i16* %x, align 2
  %6 = icmp sle i16 %5, %5
  %7 = load i16, i16* %y, align 2
  %8 = icmp sle i16 %7, %7
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i16, i16* %x, align 2
  store i16 %11, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i16, i16* %x, align 2
  %13 = sub i16 0, %12
  store i16 %13, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i16, i16* %r, align 2
  ret i16 %14
}

define i32 @__module_lfortran_intrinsic_math_signi32(i32* %x, i32* %y) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  %2 = load i32, i32* %y, align 4
  %3 = icmp sge i32 %2, 0
  %4 = and i1 %1, %3
  %5 = load i32, i32* %x, align 4
  %6 = icmp sle i32 %5, 0
  %7 = load i32, i32* %y, align 4
  %8 = icmp sle i32 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i32, i32* %x, align 4
  store i32 %11, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i32, i32* %x, align 4
  %13 = sub i32 0, %12
  store i32 %13, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i32, i32* %r, align 4
  ret i32 %14
}

define i64 @__module_lfortran_intrinsic_math_signi64(i64* %x, i64* %y) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  %2 = load i64, i64* %y, align 4
  %3 = icmp sge i64 %2, 0
  %4 = and i1 %1, %3
  %5 = load i64, i64* %x, align 4
  %6 = icmp sle i64 %5, 0
  %7 = load i64, i64* %y, align 4
  %8 = icmp sle i64 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i64, i64* %x, align 4
  store i64 %11, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i64, i64* %x, align 4
  %13 = sub i64 0, %12
  store i64 %13, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i64, i64* %r, align 4
  ret i64 %14
}

define i8 @__module_lfortran_intrinsic_math_signi8(i8* %x, i8* %y) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = icmp sge i8 %0, %0
  %2 = load i8, i8* %y, align 1
  %3 = icmp sge i8 %2, %2
  %4 = and i1 %1, %3
  %5 = load i8, i8* %x, align 1
  %6 = icmp sle i8 %5, %5
  %7 = load i8, i8* %y, align 1
  %8 = icmp sle i8 %7, %7
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i8, i8* %x, align 1
  store i8 %11, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i8, i8* %x, align 1
  %13 = sub i8 0, %12
  store i8 %13, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i8, i8* %r, align 1
  ret i8 %14
}

define float @__module_lfortran_intrinsic_math_signr32(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = load float, float* %y, align 4
  %3 = fcmp uge float %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load float, float* %x, align 4
  %6 = fcmp ule float %5, 0.000000e+00
  %7 = load float, float* %y, align 4
  %8 = fcmp ule float %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load float, float* %x, align 4
  store float %11, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load float, float* %x, align 4
  %13 = fsub float 0.000000e+00, %12
  store float %13, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load float, float* %r, align 4
  ret float %14
}

define double @__module_lfortran_intrinsic_math_signr64(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  %2 = load double, double* %y, align 8
  %3 = fcmp uge double %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load double, double* %x, align 8
  %6 = fcmp ule double %5, 0.000000e+00
  %7 = load double, double* %y, align 8
  %8 = fcmp ule double %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load double, double* %x, align 8
  store double %11, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load double, double* %x, align 8
  %13 = fsub double 0.000000e+00, %12
  store double %13, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load double, double* %r, align 8
  ret double %14
}

define float @__module_lfortran_intrinsic_math_slog(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog(float)

define float @__module_lfortran_intrinsic_math_slog10(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog10(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog10(float)

define float @__module_lfortran_intrinsic_math_slog_gamma(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog_gamma(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog_gamma(float)

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @__module_lfortran_intrinsic_math_srange(float* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 37, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define float @__module_lfortran_intrinsic_math_ssin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_ssin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_ssin(float)

define float @__module_lfortran_intrinsic_math_ssinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_ssinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_ssinh(float)

define float @__module_lfortran_intrinsic_math_ssqrt(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = call float @llvm.pow.f32(float %2, float 5.000000e-01)
  store float %3, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load float, float* %r, align 4
  ret float %4
}

define float @__module_lfortran_intrinsic_math_stan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_stan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_stan(float)

define float @__module_lfortran_intrinsic_math_stanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_stanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_stanh(float)

define double @__module_lfortran_intrinsic_math_zabs(%complex_8* %x) {
.entry:
  %call_arg_value = alloca double, align 8
  %r = alloca double, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = alloca %complex_8, align 8
  store %complex_8 %0, %complex_8* %1, align 8
  %2 = getelementptr %complex_8, %complex_8* %1, i32 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = call double @llvm.pow.f64(double %3, double 2.000000e+00)
  %5 = call double @__module_lfortran_intrinsic_math_zaimag(%complex_8* %x)
  %6 = call double @llvm.pow.f64(double %5, double 2.000000e+00)
  %7 = fadd double %4, %6
  store double %7, double* %call_arg_value, align 8
  %8 = call double @__module_lfortran_intrinsic_math_dsqrt(double* %call_arg_value)
  store double %8, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %9 = load double, double* %r, align 8
  ret double %9
}

define %complex_8 @__module_lfortran_intrinsic_math_zacos(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacos(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacos(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zacosh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacosh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacosh(%complex_8)

define double @__module_lfortran_intrinsic_math_zaimag(%complex_8* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call double @_lfortran_zaimag(%complex_8 %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_zaimag(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasin(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasin(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasin(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasinh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasinh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasinh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatan(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatanh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatanh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatanh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zcos(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zcos(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zcos(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zcosh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zcosh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zcosh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zexp(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zexp(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zexp(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zlog(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zlog(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zlog(%complex_8)

define i32 @__module_lfortran_intrinsic_math_zrange(%complex_8* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 307, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_zsin(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsin(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsin(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zsinh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsinh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsinh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zsqrt(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsqrt(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsqrt(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_ztan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztan(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_ztanh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztanh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztanh(%complex_8)

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.pow.f32(float, float) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  %call_arg_value13 = alloca i32, align 4
  %call_arg_value9 = alloca float, align 4
  %call_arg_value5 = alloca float, align 4
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %eps = alloca float, align 4
  store float 0x3EB0C6F7A0000000, float* %eps, align 4
  %pi = alloca float, align 4
  store float 0x40091EB860000000, float* %pi, align 4
  %x = alloca float, align 4
  store float 0x40091EB860000000, float* %x, align 4
  %y = alloca i32, align 4
  store i32 2, i32* %y, align 4
  %0 = load float, float* %x, align 4
  %1 = fmul float %0, 0x3FD461D5A0000000
  %2 = fsub float %1, 1.000000e+00
  store float %2, float* %call_arg_value, align 4
  %3 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value)
  %4 = load float, float* %eps, align 4
  %5 = fcmp ugt float %3, %4
  br i1 %5, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %6 = load float, float* %x, align 4
  %7 = fmul float %6, 5.000000e-01
  %8 = fsub float %7, 0x3FF91EB860000000
  store float %8, float* %call_arg_value1, align 4
  %9 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value1)
  %10 = load float, float* %eps, align 4
  %11 = fcmp ugt float %9, %10
  br i1 %11, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %12 = load float, float* %x, align 4
  %13 = fmul float %12, 5.000000e-01
  %14 = fsub float %13, 0x3FF91EB860000000
  store float %14, float* %call_arg_value5, align 4
  %15 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value5)
  %16 = load float, float* %eps, align 4
  %17 = fcmp ugt float %15, %16
  br i1 %17, label %then6, label %else7

then6:                                            ; preds = %ifcont4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont8

else7:                                            ; preds = %ifcont4
  br label %ifcont8

ifcont8:                                          ; preds = %else7, %then6
  %18 = load float, float* %x, align 4
  %19 = fmul float %18, 5.000000e-01
  %20 = fsub float %19, 0x3FF91EB860000000
  store float %20, float* %call_arg_value9, align 4
  %21 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value9)
  %22 = load float, float* %eps, align 4
  %23 = fcmp ugt float %21, %22
  br i1 %23, label %then10, label %else11

then10:                                           ; preds = %ifcont8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont12

else11:                                           ; preds = %ifcont8
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %then10
  %24 = load i32, i32* %y, align 4
  %25 = udiv i32 %24, 2
  %26 = sub i32 %25, 1
  store i32 %26, i32* %call_arg_value13, align 4
  %27 = call i32 @__module_lfortran_intrinsic_math_iabs(i32* %call_arg_value13)
  %28 = sitofp i32 %27 to float
  %29 = load float, float* %eps, align 4
  %30 = fcmp ugt float %28, %29
  br i1 %30, label %then14, label %else15

then14:                                           ; preds = %ifcont12
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %ifcont12
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  ret i32 0
}

attributes #0 = { nounwind readnone speculatable willreturn }
