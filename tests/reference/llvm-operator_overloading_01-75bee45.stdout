; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [5 x i8] c"T*T:\00", align 1
@1 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"T*F:\00", align 1
@3 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"F*T:\00", align 1
@5 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"F*F:\00", align 1
@7 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@8 = private unnamed_addr constant [5 x i8] c"T+T:\00", align 1
@9 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@10 = private unnamed_addr constant [5 x i8] c"T+F:\00", align 1
@11 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@12 = private unnamed_addr constant [5 x i8] c"F+T:\00", align 1
@13 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@14 = private unnamed_addr constant [5 x i8] c"F+F:\00", align 1
@15 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1

define i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %log1, i1* %log2) {
.entry:
  %bin_add = alloca i32, align 4
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = and i1 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  store i32 2, i32* %bin_add, align 4
  br label %ifcont3

else:                                             ; preds = %.entry
  %3 = load i1, i1* %log1, align 1
  %4 = xor i1 %3, true
  %5 = load i1, i1* %log2, align 1
  %6 = xor i1 %5, true
  %7 = and i1 %4, %6
  br i1 %7, label %then1, label %else2

then1:                                            ; preds = %else
  store i32 0, i32* %bin_add, align 4
  br label %ifcont

else2:                                            ; preds = %else
  store i32 1, i32* %bin_add, align 4
  br label %ifcont

ifcont:                                           ; preds = %else2, %then1
  br label %ifcont3

ifcont3:                                          ; preds = %ifcont, %then
  br label %return

return:                                           ; preds = %ifcont3
  %8 = load i32, i32* %bin_add, align 4
  ret i32 %8
}

define i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %log1, i1* %log2) {
.entry:
  %logical_and = alloca i1, align 1
  %0 = load i1, i1* %log1, align 1
  %1 = load i1, i1* %log2, align 1
  %2 = and i1 %0, %1
  store i1 %2, i1* %logical_and, align 1
  br label %return

return:                                           ; preds = %.entry
  %3 = load i1, i1* %logical_and, align 1
  ret i1 %3
}

define i32 @main() {
.entry:
  %f = alloca i1, align 1
  store i1 false, i1* %f, align 1
  %t = alloca i1, align 1
  store i1 true, i1* %t, align 1
  %0 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %t, i1* %t)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i1 %0)
  %1 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %t, i1* %f)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i1 %1)
  %2 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %f, i1* %t)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i1 %2)
  %3 = call i1 @__module_operator_overloading_01_overload_asterisk_m_logical_and(i1* %f, i1* %f)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i1 %3)
  %4 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %t, i1* %t)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 %4)
  %5 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %t, i1* %f)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @10, i32 0, i32 0), i32 %5)
  %6 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %f, i1* %t)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @12, i32 0, i32 0), i32 %6)
  %7 = call i32 @__module_operator_overloading_01_overload_asterisk_m_bin_add(i1* %f, i1* %f)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @14, i32 0, i32 0), i32 %7)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
