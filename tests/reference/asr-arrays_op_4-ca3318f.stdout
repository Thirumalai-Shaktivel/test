(TranslationUnit (SymbolTable 1 {array_op_3: (Program (SymbolTable 2 {a: (Variable 2 a Local () () Allocatable (Logical 4 [(() ()) (() ()) (() ())]) Source Public Required .false.), b: (Variable 2 b Local () () Allocatable (Logical 4 [(() ()) (() ()) (() ())]) Source Public Required .false.), c: (Variable 2 c Local () () Allocatable (Logical 4 [(() ()) (() ()) (() ())]) Source Public Required .false.), dim1: (Variable 2 dim1 Local (ConstantInteger 10 (Integer 4 [])) () Default (Integer 4 []) Source Public Required .false.), dim2: (Variable 2 dim2 Local (ConstantInteger 100 (Integer 4 [])) () Default (Integer 4 []) Source Public Required .false.), dim3: (Variable 2 dim3 Local (ConstantInteger 1 (Integer 4 [])) () Default (Integer 4 []) Source Public Required .false.), i: (Variable 2 i Local () () Default (Integer 4 []) Source Public Required .false.), j: (Variable 2 j Local () () Default (Integer 4 []) Source Public Required .false.), k: (Variable 2 k Local () () Default (Integer 4 []) Source Public Required .false.), modulo2: (Function (SymbolTable 3 {r: (Variable 3 r ReturnVar () () Default (Logical 4 []) Source Public Required .false.), x: (Variable 3 x In () () Default (Integer 4 []) Source Public Required .false.)}) modulo2 [(Var 3 x)] [(= (Var 3 r) (Compare (BinOp (Var 3 x) Sub (BinOp (ConstantInteger 2 (Integer 4 [])) Mul (BinOp (Var 3 x) Div (ConstantInteger 2 (Integer 4 [])) (Integer 4 []) ()) (Integer 4 []) ()) (Integer 4 []) ()) Eq (ConstantInteger 1 (Integer 4 [])) (Logical 4 []) ()))] (Var 3 r) Source Public Implementation ()), verify: (Subroutine (SymbolTable 4 {c: (Variable 4 c In () () Allocatable (Logical 4 [(() ()) (() ()) (() ())]) Source Public Required .false.), i: (Variable 4 i Local () () Default (Integer 4 []) Source Public Required .false.), j: (Variable 4 j Local () () Default (Integer 4 []) Source Public Required .false.), k: (Variable 4 k Local () () Default (Integer 4 []) Source Public Required .false.), lbound: (ExternalSymbol 4 lbound 6 lbound lfortran_intrinsic_array [] lbound Private), op_code: (Variable 4 op_code In () () Default (Integer 4 []) Source Public Required .false.), ubound: (ExternalSymbol 4 ubound 6 ubound lfortran_intrinsic_array [] ubound Private), x: (Variable 4 x Local () () Default (Logical 4 []) Source Public Required .false.), y: (Variable 4 y Local () () Default (Logical 4 []) Source Public Required .false.)}) verify [(Var 4 c) (Var 4 op_code)] [(DoLoop ((Var 4 i) (FunctionCall 4 lbound () [(Var 4 c) (ConstantInteger 1 (Integer 4 []))] [] (Integer 4 []) () ()) (FunctionCall 4 ubound () [(Var 4 c) (ConstantInteger 1 (Integer 4 []))] [] (Integer 4 []) () ()) ()) [(DoLoop ((Var 4 j) (FunctionCall 4 lbound () [(Var 4 c) (ConstantInteger 2 (Integer 4 []))] [] (Integer 4 []) () ()) (FunctionCall 4 ubound () [(Var 4 c) (ConstantInteger 2 (Integer 4 []))] [] (Integer 4 []) () ()) ()) [(DoLoop ((Var 4 k) (FunctionCall 4 lbound () [(Var 4 c) (ConstantInteger 3 (Integer 4 []))] [] (Integer 4 []) () ()) (FunctionCall 4 ubound () [(Var 4 c) (ConstantInteger 3 (Integer 4 []))] [] (Integer 4 []) () ()) ()) [(= (Var 4 x) (FunctionCall 2 modulo2 () [(BinOp (BinOp (Var 4 i) Add (Var 4 j) (Integer 4 []) ()) Add (Var 4 k) (Integer 4 []) ())] [] (Logical 4 []) () ())) (= (Var 4 y) (FunctionCall 2 modulo2 () [(BinOp (BinOp (BinOp (Var 4 i) Mul (Var 4 j) (Integer 4 []) ()) Add (BinOp (Var 4 j) Mul (Var 4 k) (Integer 4 []) ()) (Integer 4 []) ()) Add (BinOp (Var 4 k) Mul (Var 4 j) (Integer 4 []) ()) (Integer 4 []) ())] [] (Logical 4 []) () ())) (Select (Var 4 op_code) [(CaseStmt [(ConstantInteger 0 (Integer 4 []))] [(If (BoolOp (ArrayRef 4 c [(() (Var 4 i) ()) (() (Var 4 j) ()) (() (Var 4 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) NEqv (BoolOp (Var 4 x) And (Var 4 y) (Logical 4 []) ()) (Logical 4 [(() ()) (() ()) (() ())]) ()) [(ErrorStop ())] [])]) (CaseStmt [(ConstantInteger 1 (Integer 4 []))] [(If (BoolOp (ArrayRef 4 c [(() (Var 4 i) ()) (() (Var 4 j) ()) (() (Var 4 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) NEqv (BoolOp (Var 4 x) Or (Var 4 y) (Logical 4 []) ()) (Logical 4 [(() ()) (() ()) (() ())]) ()) [(ErrorStop ())] [])]) (CaseStmt [(ConstantInteger 2 (Integer 4 []))] [(If (BoolOp (ArrayRef 4 c [(() (Var 4 i) ()) (() (Var 4 j) ()) (() (Var 4 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) NEqv (BoolOp (Var 4 x) Eqv (Var 4 y) (Logical 4 []) ()) (Logical 4 [(() ()) (() ()) (() ())]) ()) [(ErrorStop ())] [])]) (CaseStmt [(ConstantInteger 3 (Integer 4 []))] [(If (BoolOp (ArrayRef 4 c [(() (Var 4 i) ()) (() (Var 4 j) ()) (() (Var 4 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) NEqv (BoolOp (Var 4 x) NEqv (Var 4 y) (Logical 4 []) ()) (Logical 4 [(() ()) (() ()) (() ())]) ()) [(ErrorStop ())] [])])] [])])])])] Source Public Implementation ())}) array_op_3 [] [(Allocate [(2 a [((ConstantInteger 1 (Integer 4 [])) (Var 2 dim1)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim2)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim3))]) (2 b [((ConstantInteger 1 (Integer 4 [])) (Var 2 dim1)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim2)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim3))]) (2 c [((ConstantInteger 1 (Integer 4 [])) (Var 2 dim1)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim2)) ((ConstantInteger 1 (Integer 4 [])) (Var 2 dim3))])] ()) (DoLoop ((Var 2 i) (ConstantInteger 1 (Integer 4 [])) (Var 2 dim1) ()) [(DoLoop ((Var 2 j) (ConstantInteger 1 (Integer 4 [])) (Var 2 dim2) ()) [(DoLoop ((Var 2 k) (ConstantInteger 1 (Integer 4 [])) (Var 2 dim3) ()) [(= (ArrayRef 2 a [(() (Var 2 i) ()) (() (Var 2 j) ()) (() (Var 2 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) (FunctionCall 2 modulo2 () [(BinOp (BinOp (Var 2 i) Add (Var 2 j) (Integer 4 []) ()) Add (Var 2 k) (Integer 4 []) ())] [] (Logical 4 []) () ())) (= (ArrayRef 2 b [(() (Var 2 i) ()) (() (Var 2 j) ()) (() (Var 2 k) ())] (Logical 4 [(() ()) (() ()) (() ())]) ()) (FunctionCall 2 modulo2 () [(BinOp (BinOp (BinOp (Var 2 i) Mul (Var 2 j) (Integer 4 []) ()) Add (BinOp (Var 2 j) Mul (Var 2 k) (Integer 4 []) ()) (Integer 4 []) ()) Add (BinOp (Var 2 k) Mul (Var 2 j) (Integer 4 []) ()) (Integer 4 []) ())] [] (Logical 4 []) () ()))])])]) (= (Var 2 c) (BoolOp (Var 2 a) And (Var 2 b) (Logical 4 [(() ()) (() ()) (() ())]) ())) (SubroutineCall 2 verify () [(Var 2 c) (ConstantInteger 0 (Integer 4 []))] ()) (= (Var 2 c) (BoolOp (Var 2 a) Or (Var 2 b) (Logical 4 [(() ()) (() ()) (() ())]) ())) (SubroutineCall 2 verify () [(Var 2 c) (ConstantInteger 1 (Integer 4 []))] ()) (= (Var 2 c) (BoolOp (Var 2 a) Eqv (Var 2 b) (Logical 4 [(() ()) (() ()) (() ())]) ())) (SubroutineCall 2 verify () [(Var 2 c) (ConstantInteger 2 (Integer 4 []))] ()) (= (Var 2 c) (BoolOp (Var 2 b) NEqv (Var 2 a) (Logical 4 [(() ()) (() ()) (() ())]) ())) (SubroutineCall 2 verify () [(Var 2 c) (ConstantInteger 3 (Integer 4 []))] ()) (ImplicitDeallocate [2 a 2 b 2 c])]), lfortran_intrinsic_array: (IntrinsicModule lfortran_intrinsic_array)}) [])
