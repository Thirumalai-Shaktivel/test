(TranslationUnit (SymbolTable 1 {flip_sign: (Program (SymbolTable 2 {abs: (ExternalSymbol 2 abs 4 abs lfortran_intrinsic_math [] abs Private), abs@dabs: (ExternalSymbol 2 abs@dabs 4 dabs lfortran_intrinsic_math [] dabs Private), abs@sabs: (ExternalSymbol 2 abs@sabs 4 sabs lfortran_intrinsic_math [] sabs Private), epsidp: (Variable 2 epsidp Local (Cast (ConstantInteger 16 (Integer 4 [])) IntegerToInteger (Integer 8 []) (ConstantInteger 16 (Integer 8 []))) () Default (Integer 8 []) Source Public Required .false.), epsisp: (Variable 2 epsisp Local (ConstantInteger 16 (Integer 4 [])) () Default (Integer 4 []) Source Public Required .false.), epsrdp: (Variable 2 epsrdp Local (Cast (ConstantReal 0.000001 (Real 4 [])) RealToReal (Real 8 []) (ConstantReal 0.000001 (Real 8 []))) () Default (Real 8 []) Source Public Required .false.), epsrsp: (Variable 2 epsrsp Local (ConstantReal 0.000001 (Real 4 [])) () Default (Real 4 []) Source Public Required .false.), ixdp: (Variable 2 ixdp Local (Cast (ConstantInteger 5 (Integer 4 [])) IntegerToInteger (Integer 8 []) (ConstantInteger 5 (Integer 8 []))) () Default (Integer 8 []) Source Public Required .false.), ixsp: (Variable 2 ixsp Local (ConstantInteger 5 (Integer 4 [])) () Default (Integer 4 []) Source Public Required .false.), rxdp: (Variable 2 rxdp Local (Cast (ConstantReal 5.500000 (Real 4 [])) RealToReal (Real 8 []) (ConstantReal 5.500000 (Real 8 []))) () Default (Real 8 []) Source Public Required .false.), rxsp: (Variable 2 rxsp Local (ConstantReal 5.500000 (Real 4 [])) () Default (Real 4 []) Source Public Required .false.), sign: (ExternalSymbol 2 sign 4 sign lfortran_intrinsic_math [] sign Private), sign@signi32: (ExternalSymbol 2 sign@signi32 4 signi32 lfortran_intrinsic_math [] signi32 Private), sign@signi64: (ExternalSymbol 2 sign@signi64 4 signi64 lfortran_intrinsic_math [] signi64 Private), sign@signr32: (ExternalSymbol 2 sign@signr32 4 signr32 lfortran_intrinsic_math [] signr32 Private), sign@signr64: (ExternalSymbol 2 sign@signr64 4 signr64 lfortran_intrinsic_math [] signr64 Private)}) flip_sign [] [(= (Var 2 rxsp) (BinOp (Var 2 rxsp) Mul (FunctionCall 2 sign@signr32 2 sign [((ConstantReal 1.000000 (Real 4 []))) ((Var 2 epsrsp))] (Real 4 []) () ()) (Real 4 []) () ()) ()) (Print () [(Var 2 rxsp)]) (If (Compare (FunctionCall 2 abs@sabs 2 abs [((BinOp (Var 2 rxsp) Sub (ConstantReal 5.500000 (Real 4 [])) (Real 4 []) () ()))] (Real 4 []) () ()) Gt (Var 2 epsrsp) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 rxsp) (BinOp (Var 2 rxsp) Mul (FunctionCall 2 sign@signr32 2 sign [((ConstantReal 1.000000 (Real 4 []))) ((UnaryOp USub (Var 2 epsrsp) (Real 4 []) ()))] (Real 4 []) () ()) (Real 4 []) () ()) ()) (Print () [(Var 2 rxsp)]) (If (Compare (FunctionCall 2 abs@sabs 2 abs [((BinOp (Var 2 rxsp) Add (ConstantReal 5.500000 (Real 4 [])) (Real 4 []) () ()))] (Real 4 []) () ()) Gt (Var 2 epsrsp) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 rxdp) (BinOp (Var 2 rxdp) Mul (FunctionCall 2 sign@signr64 2 sign [((ConstantReal 1.000000 (Real 8 []))) ((Var 2 epsrdp))] (Real 8 []) () ()) (Real 8 []) () ()) ()) (Print () [(Var 2 rxdp)]) (If (Compare (FunctionCall 2 abs@dabs 2 abs [((BinOp (Var 2 rxdp) Sub (Cast (ConstantReal 5.500000 (Real 4 [])) RealToReal (Real 8 []) (ConstantReal 5.500000 (Real 8 []))) (Real 8 []) () ()))] (Real 8 []) () ()) Gt (Var 2 epsrdp) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 rxdp) (BinOp (Var 2 rxdp) Mul (FunctionCall 2 sign@signr64 2 sign [((ConstantReal 1.000000 (Real 8 []))) ((UnaryOp USub (Var 2 epsrdp) (Real 8 []) ()))] (Real 8 []) () ()) (Real 8 []) () ()) ()) (Print () [(Var 2 rxdp)]) (If (Compare (FunctionCall 2 abs@dabs 2 abs [((BinOp (Var 2 rxdp) Add (Cast (ConstantReal 5.500000 (Real 4 [])) RealToReal (Real 8 []) (ConstantReal 5.500000 (Real 8 []))) (Real 8 []) () ()))] (Real 8 []) () ()) Gt (Var 2 epsrdp) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 ixsp) (BinOp (Var 2 ixsp) Mul (FunctionCall 2 sign@signi32 2 sign [((ConstantInteger 1 (Integer 4 []))) ((Var 2 epsisp))] (Integer 4 []) () ()) (Integer 4 []) () ()) ()) (Print () [(Var 2 ixsp)]) (If (Compare (Var 2 ixsp) NotEq (ConstantInteger 5 (Integer 4 [])) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 ixdp) (BinOp (Var 2 ixdp) Mul (FunctionCall 2 sign@signi64 2 sign [((ConstantInteger 1 (Integer 8 []))) ((Var 2 epsidp))] (Integer 8 []) () ()) (Integer 8 []) () ()) ()) (Print () [(Var 2 ixdp)]) (If (Compare (Var 2 ixdp) NotEq (Cast (ConstantInteger 5 (Integer 4 [])) IntegerToInteger (Integer 8 []) (ConstantInteger 5 (Integer 8 []))) (Logical 4 []) () ()) [(ErrorStop ())] [])]), iso_c_binding: (IntrinsicModule lfortran_intrinsic_iso_c_binding), iso_fortran_env: (IntrinsicModule lfortran_intrinsic_iso_fortran_env), lfortran_intrinsic_builtin: (IntrinsicModule lfortran_intrinsic_builtin), lfortran_intrinsic_math: (IntrinsicModule lfortran_intrinsic_math)}) [])
