; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @apply(i32 (i32*)* %fun, i32* %x) {
.entry:
  %y = alloca i32, align 4
  %0 = call i32 %fun(i32* %x)
  store i32 %0, i32* %y, align 4
  %1 = load i32, i32* %y, align 4
  ret i32 %1
}

declare i32 @fun(i32*)

define i32 @main() {
.entry:
  %z = alloca i32, align 4
  store i32 0, i32* %z, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %z, align 4
  %1 = add i32 %0, 1
  %2 = icmp sle i32 %1, 10
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i32, i32* %z, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %z, align 4
  %5 = alloca i32, align 4
  store i32 1, i32* %5, align 4
  %6 = call i32 @apply(<null operand!>, i32* %5)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %6)
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
