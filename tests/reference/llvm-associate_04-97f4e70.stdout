; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }

@"~fma_arg@5" = global float 0.000000e+00
@"~fma_arg@6" = global float 0.000000e+00
@"~fmaresult@10" = global double 0.000000e+00
@"~fmaresult@13" = global float 0.000000e+00
@"~fmaresult@15" = global double 0.000000e+00
@"~fmaresult@17" = global double 0.000000e+00
@"~fmaresult@19" = global float 0.000000e+00
@"~fmaresult@21" = global float 0.000000e+00
@"~fmaresult@4" = global float 0.000000e+00
@"~fmaresult@7" = global float 0.000000e+00
@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define void @fmar32(float* %a, float* %b, float* %c, float* %d) {
.entry:
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  store float %4, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @fmar64(double* %a, double* %b, double* %c, double* %d) {
.entry:
  %0 = load double, double* %a, align 8
  %1 = load double, double* %b, align 8
  %2 = load double, double* %c, align 8
  %3 = fmul double %1, %2
  %4 = fadd double %0, %3
  store double %4, double* %d, align 8
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define float @__module_lfortran_intrinsic_math_scos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %x, i32* %y) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = sitofp i32 %1 to float
  %3 = load i32, i32* %y, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math2_sfloor(float* %call_arg_value)
  %7 = load i32, i32* %y, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %0, %8
  store i32 %9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %10 = load i32, i32* %r, align 4
  ret i32 %10
}

define i32 @__module_lfortran_intrinsic_math2_sfloor(float* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fptosi float %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %x, align 4
  %5 = fsub float %4, 1.000000e+00
  %6 = fptosi float %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define void @__module_lfortran_intrinsic_optimization_flipsigni32r32(i32* %signal, float* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %variable, align 4
  %3 = fsub float 0.000000e+00, %2
  store float %3, float* %variable, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @__module_lfortran_intrinsic_optimization_flipsigni32r64(i32* %signal, double* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %variable, align 8
  %3 = fsub double 0.000000e+00, %2
  store double %3, double* %variable, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define i32 @main() {
.entry:
  %a = alloca float, align 4
  %myreal = alloca float, align 4
  %theta = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %"~fma_arg@0" = alloca float, align 4
  %"~fma_arg@1" = alloca float, align 4
  %"~fma_arg@3" = alloca float, align 4
  %"~fmaresult@2" = alloca float, align 4
  store float 0x3FDAE147A0000000, float* %x, align 4
  store float 0x3FD6666660000000, float* %y, align 4
  store float 0x4022333340000000, float* %myreal, align 4
  store float 1.500000e+00, float* %theta, align 4
  store float 0x3FD99999A0000000, float* %a, align 4
  %0 = load float, float* %x, align 4
  %1 = fmul float %0, 2.000000e+00
  store float %1, float* %"~fma_arg@0", align 4
  store float 2.000000e+00, float* %"~fma_arg@1", align 4
  call void @fmar32(float* %"~fma_arg@0", float* %y, float* %"~fma_arg@1", float* %"~fmaresult@2")
  %2 = call float @__module_lfortran_intrinsic_math_scos(float* %theta)
  store float %2, float* %"~fma_arg@3", align 4
  call void @fmar32(float* %a, float* %"~fmaresult@2", float* %"~fma_arg@3", float* @"~fmaresult@4")
  %3 = load float, float* %"~fmaresult@2", align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* @"~fma_arg@5", align 4
  %5 = call float @__module_lfortran_intrinsic_math_scos(float* %theta)
  store float %5, float* @"~fma_arg@6", align 4
  call void @fmar32(float* %a, float* @"~fma_arg@5", float* @"~fma_arg@6", float* @"~fmaresult@7")
  %6 = load float, float* %myreal, align 4
  %7 = fmul float %6, 0x4012666660000000
  store float %7, float* %myreal, align 4
  %8 = load float, float* %myreal, align 4
  %9 = fpext float %8 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), double %9)
  %10 = load float, float* %myreal, align 4
  %11 = fsub float %10, 0x4044EE1480000000
  %12 = fcmp ugt float %11, 0x3EE4F8B580000000
  %13 = load float, float* %myreal, align 4
  %14 = fsub float %13, 0x4044EE1480000000
  %15 = fcmp ult float %14, 0xBEE4F8B580000000
  %16 = or i1 %12, %15
  br i1 %16, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
