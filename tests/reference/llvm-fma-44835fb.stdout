; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [7 x i8] c"%f %f\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define float @__module_lfortran_intrinsic_math_signr32(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = load float, float* %y, align 4
  %3 = fcmp uge float %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load float, float* %x, align 4
  %6 = fcmp ule float %5, 0.000000e+00
  %7 = load float, float* %y, align 4
  %8 = fcmp ule float %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load float, float* %x, align 4
  store float %11, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load float, float* %x, align 4
  %13 = fsub float 0.000000e+00, %12
  store float %13, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load float, float* %r, align 4
  ret float %14
}

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %x, i32* %y) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = sitofp i32 %1 to float
  %3 = load i32, i32* %y, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math2_sfloor(float* %call_arg_value)
  %7 = load i32, i32* %y, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %0, %8
  store i32 %9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %10 = load i32, i32* %r, align 4
  ret i32 %10
}

define i32 @__module_lfortran_intrinsic_math2_sfloor(float* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fptosi float %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %x, align 4
  %5 = fsub float %4, 1.000000e+00
  %6 = fptosi float %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define void @__module_lfortran_intrinsic_optimization_flipsigni32r32(i32* %signal, float* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %variable, align 4
  %3 = fsub float 0.000000e+00, %2
  store float %3, float* %variable, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @__module_lfortran_intrinsic_optimization_flipsigni32r64(i32* %signal, double* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %variable, align 8
  %3 = fsub double 0.000000e+00, %2
  store double %3, double* %variable, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @__module_lfortran_intrinsic_optimization_fmar32(float* %a, float* %b, float* %c, float* %d) {
.entry:
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  store float %4, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main() {
.entry:
  %call_arg_value = alloca float, align 4
  %pi = alloca float, align 4
  store float 0x40091EB860000000, float* %pi, align 4
  %s1 = alloca float, align 4
  store float 1.000000e+00, float* %s1, align 4
  %s2 = alloca float, align 4
  store float 2.000000e+00, float* %s2, align 4
  %x = alloca float, align 4
  store float 4.000000e+00, float* %x, align 4
  %z = alloca float, align 4
  store float 1.000000e+00, float* %z, align 4
  %"~fma_arg@0" = alloca float, align 4
  %"~fma_arg@1" = alloca float, align 4
  %"~fma_arg@2" = alloca float, align 4
  %"~fma_arg@4" = alloca float, align 4
  %"~fmaresult@3" = alloca float, align 4
  %"~fmaresult@5" = alloca float, align 4
  %"~fmaresult@6" = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fmul float %0, 4.000000e+00
  store float %1, float* %"~fma_arg@0", align 4
  store float 5.000000e-01, float* %"~fma_arg@1", align 4
  store float 1.000000e+00, float* %call_arg_value, align 4
  %2 = call float @__module_lfortran_intrinsic_math_signr32(float* %call_arg_value, float* %x)
  store float %2, float* %"~fma_arg@2", align 4
  call void @__module_lfortran_intrinsic_optimization_fmar32(float* %"~fma_arg@0", float* %"~fma_arg@1", float* %"~fma_arg@2", float* %"~fmaresult@3")
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %"~fma_arg@4", align 4
  call void @__module_lfortran_intrinsic_optimization_fmar32(float* %"~fmaresult@3", float* %"~fma_arg@4", float* %pi, float* %"~fmaresult@5")
  %5 = load float, float* %"~fmaresult@5", align 4
  store float %5, float* %x, align 4
  call void @__module_lfortran_intrinsic_optimization_fmar32(float* %s1, float* %z, float* %s2, float* %"~fmaresult@6")
  %6 = load float, float* %"~fmaresult@6", align 4
  store float %6, float* %z, align 4
  %7 = load float, float* %x, align 4
  %8 = fpext float %7 to double
  %9 = load float, float* %z, align 4
  %10 = fpext float %9 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0), double %8, double %10)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
