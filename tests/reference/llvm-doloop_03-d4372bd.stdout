; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %ifcont3, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = icmp sle i32 %1, 10
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %i, align 4
  %7 = add i32 %5, %6
  store i32 %7, i32* %j, align 4
  %8 = load i32, i32* %i, align 4
  %9 = icmp eq i32 %8, 3
  br i1 %9, label %then, label %else

then:                                             ; preds = %loop.body
  br label %ifcont

else:                                             ; preds = %loop.body
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %10 = load i32, i32* %i, align 4
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %loop.end

unreachable_after_exit:                           ; No predecessors!
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %unreachable_after_exit
  br label %loop.head

loop.end:                                         ; preds = %then1, %loop.head
  %12 = load i32, i32* %j, align 4
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %then4, label %else5

then4:                                            ; preds = %loop.end
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont6

else5:                                            ; preds = %loop.end
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head7

loop.head7:                                       ; preds = %ifcont12, %ifcont6
  %14 = load i32, i32* %i, align 4
  %15 = add i32 %14, 1
  %16 = icmp sle i32 %15, 10
  br i1 %16, label %loop.body8, label %loop.end13

loop.body8:                                       ; preds = %loop.head7
  %17 = load i32, i32* %i, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %i, align 4
  %19 = load i32, i32* %i, align 4
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %then9, label %else11

then9:                                            ; preds = %loop.body8
  br label %loop.end13

unreachable_after_exit10:                         ; No predecessors!
  br label %ifcont12

else11:                                           ; preds = %loop.body8
  br label %ifcont12

ifcont12:                                         ; preds = %else11, %unreachable_after_exit10
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i, align 4
  %23 = add i32 %21, %22
  store i32 %23, i32* %j, align 4
  br label %loop.head7

loop.end13:                                       ; preds = %then9, %loop.head7
  %24 = load i32, i32* %j, align 4
  %25 = icmp ne i32 %24, 1
  br i1 %25, label %then14, label %else15

then14:                                           ; preds = %loop.end13
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont16

else15:                                           ; preds = %loop.end13
  br label %ifcont16

ifcont16:                                         ; preds = %else15, %then14
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head17

loop.head17:                                      ; preds = %ifcont21, %then19, %ifcont16
  %26 = load i32, i32* %i, align 4
  %27 = add i32 %26, 1
  %28 = icmp sle i32 %27, 10
  br i1 %28, label %loop.body18, label %loop.end22

loop.body18:                                      ; preds = %loop.head17
  %29 = load i32, i32* %i, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %then19, label %else20

then19:                                           ; preds = %loop.body18
  br label %loop.head17

unreachable_after_cycle:                          ; No predecessors!
  br label %ifcont21

else20:                                           ; preds = %loop.body18
  br label %ifcont21

ifcont21:                                         ; preds = %else20, %unreachable_after_cycle
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %33, %34
  store i32 %35, i32* %j, align 4
  br label %loop.head17

loop.end22:                                       ; preds = %loop.head17
  %36 = load i32, i32* %j, align 4
  %37 = icmp ne i32 %36, 53
  br i1 %37, label %then23, label %else24

then23:                                           ; preds = %loop.end22
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont25

else24:                                           ; preds = %loop.end22
  br label %ifcont25

ifcont25:                                         ; preds = %else24, %then23
  ret i32 0
}

declare void @_lcompilers_printf(i8*, ...)

declare void @exit(i32)
