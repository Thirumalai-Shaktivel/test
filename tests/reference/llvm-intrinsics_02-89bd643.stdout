; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

define i32 @__module_lfortran_intrinsic_trig_a1floor(double* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = fptosi double %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %x, align 8
  %5 = fsub double %4, 1.000000e+00
  %6 = fptosi double %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define double @__module_lfortran_intrinsic_trig_a2modulo(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %x, align 8
  %2 = load double, double* %y, align 8
  %3 = fdiv double %1, %2
  %4 = alloca double, align 8
  store double %3, double* %4, align 8
  %5 = call i32 @__module_lfortran_intrinsic_trig_a1floor(double* %4)
  %6 = sitofp i32 %5 to double
  %7 = load double, double* %y, align 8
  %8 = fmul double %6, %7
  %9 = fsub double %0, %8
  store double %9, double* %r, align 8
  %10 = load double, double* %r, align 8
  ret double %10
}

define double @__module_lfortran_intrinsic_trig_a3min(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %y, align 8
  %2 = fcmp ult double %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %y, align 8
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_trig_a4max(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %y, align 8
  %2 = fcmp ugt double %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %y, align 8
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_trig_a5kernel_dsin(double* %x) {
.entry:
  %res = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %x, align 8
  %2 = call double @llvm.pow.f64(double %1, double 2.000000e+00)
  %3 = load double, double* %x, align 8
  %4 = call double @llvm.pow.f64(double %3, double 2.000000e+00)
  %5 = load double, double* %x, align 8
  %6 = call double @llvm.pow.f64(double %5, double 2.000000e+00)
  %7 = load double, double* %x, align 8
  %8 = call double @llvm.pow.f64(double %7, double 2.000000e+00)
  %9 = load double, double* %x, align 8
  %10 = call double @llvm.pow.f64(double %9, double 2.000000e+00)
  %11 = load double, double* %x, align 8
  %12 = call double @llvm.pow.f64(double %11, double 2.000000e+00)
  %13 = load double, double* %x, align 8
  %14 = call double @llvm.pow.f64(double %13, double 2.000000e+00)
  %15 = load double, double* %x, align 8
  %16 = call double @llvm.pow.f64(double %15, double 2.000000e+00)
  %17 = load double, double* %x, align 8
  %18 = call double @llvm.pow.f64(double %17, double 2.000000e+00)
  %19 = load double, double* %x, align 8
  %20 = call double @llvm.pow.f64(double %19, double 2.000000e+00)
  %21 = fmul double %20, 0x3CA0000000000000
  %22 = fadd double 0xBCD6000000000000, %21
  %23 = fmul double %18, %22
  %24 = fadd double 0x3D02800000000000, %23
  %25 = fmul double %16, %24
  %26 = fadd double 0xBD6B580000000000, %25
  %27 = fmul double %14, %26
  %28 = fadd double 0x3DE612CE00000000, %27
  %29 = fmul double %12, %28
  %30 = fadd double 0xBE5AE645F0000000, %29
  %31 = fmul double %10, %30
  %32 = fadd double 0x3EC71DE3A5000000, %31
  %33 = fmul double %8, %32
  %34 = fadd double 0xBF2A01A019FEF000, %33
  %35 = fmul double %6, %34
  %36 = fadd double 0x3F81111111110C80, %35
  %37 = fmul double %4, %36
  %38 = fadd double 0xBFC555555555554C, %37
  %39 = fmul double %2, %38
  %40 = fadd double 1.000000e+00, %39
  %41 = fmul double %0, %40
  store double %41, double* %res, align 8
  %42 = load double, double* %res, align 8
  ret double %42
}

define double @__module_lfortran_intrinsic_trig_a6dsin(double* %x) {
.entry:
  %n = alloca i32, align 4
  %r = alloca double, align 8
  %y = alloca double, align 8
  %0 = alloca double, align 8
  store double 0x401921FB54442D18, double* %0, align 8
  %1 = call double @__module_lfortran_intrinsic_trig_a2modulo(double* %x, double* %0)
  store double %1, double* %y, align 8
  %2 = load double, double* %y, align 8
  %3 = fsub double 0x400921FB54442D18, %2
  %4 = alloca double, align 8
  store double %3, double* %4, align 8
  %5 = call double @__module_lfortran_intrinsic_trig_a3min(double* %y, double* %4)
  store double %5, double* %y, align 8
  %6 = load double, double* %y, align 8
  %7 = fsub double 0xC00921FB54442D18, %6
  %8 = alloca double, align 8
  store double %7, double* %8, align 8
  %9 = call double @__module_lfortran_intrinsic_trig_a4max(double* %y, double* %8)
  store double %9, double* %y, align 8
  %10 = load double, double* %y, align 8
  %11 = fsub double 0x400921FB54442D18, %10
  %12 = alloca double, align 8
  store double %11, double* %12, align 8
  %13 = call double @__module_lfortran_intrinsic_trig_a3min(double* %y, double* %12)
  store double %13, double* %y, align 8
  %14 = call double @__module_lfortran_intrinsic_trig_a5kernel_dsin(double* %y)
  store double %14, double* %r, align 8
  %15 = load double, double* %r, align 8
  ret double %15
}

define float @__module_lfortran_intrinsic_trig_a7ssin(float* %x) {
.entry:
  %r = alloca float, align 4
  %tmp = alloca double, align 8
  %x2 = alloca double, align 8
  %y = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fpext float %0 to double
  store double %1, double* %x2, align 8
  %2 = call double @__module_lfortran_intrinsic_trig_a6dsin(double* %x2)
  store double %2, double* %tmp, align 8
  %3 = load double, double* %tmp, align 8
  %4 = fptrunc double %3 to float
  store float %4, float* %r, align 4
  %5 = load float, float* %r, align 4
  ret float %5
}

define double @__module_lfortran_intrinsic_trig_abs3(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %5 = load double, double* %r, align 8
  ret double %5
}

declare void @_lfortran_sin(float, float*)

declare void @_lfortran_cos(float, float*)

declare void @_lfortran_tan(float, float*)

declare void @_lfortran_sinh(float, float*)

declare void @_lfortran_cosh(float, float*)

declare void @_lfortran_tanh(float, float*)

declare void @_lfortran_asin(float, float*)

declare void @_lfortran_acos(float, float*)

declare void @_lfortran_atan(float, float*)

declare void @_lfortran_asinh(float, float*)

declare void @_lfortran_acosh(float, float*)

declare void @_lfortran_atanh(float, float*)

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

define i32 @main() {
.entry:
  %x = alloca float, align 4
  %0 = alloca float, align 4
  store float 1.500000e+00, float* %0, align 4
  %1 = call float @__module_lfortran_intrinsic_trig_a7ssin(float* %0)
  store float %1, float* %x, align 4
  %2 = load float, float* %x, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), double %3)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

attributes #0 = { nounwind readnone speculatable willreturn }

