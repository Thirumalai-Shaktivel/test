; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @f(%array* %c) {
.entry:
  %0 = getelementptr %array, %array* %c, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 true, i1* %1, align 1
  %2 = getelementptr %array, %array* %c, i32 0, i32 2
  %3 = alloca i32, align 4
  store i32 3, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = alloca %dimension_descriptor, i32 %4, align 8
  store %dimension_descriptor* %5, %dimension_descriptor** %2, align 8
  %6 = getelementptr %array, %array* %c, i32 0, i32 4
  store i32 3, i32* %6, align 4
  %7 = load %dimension_descriptor*, %dimension_descriptor** %2, align 8
  %8 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 1
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 2
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %8, i32 0, i32 3
  store i32 1, i32* %9, align 4
  store i32 1, i32* %10, align 4
  store i32 3, i32* %11, align 4
  %13 = load i32, i32* %11, align 4
  %14 = load i32, i32* %10, align 4
  %15 = sub i32 %13, %14
  %16 = add i32 %15, 1
  %17 = mul i32 1, %16
  store i32 %16, i32* %12, align 4
  %18 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 1
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 0
  %20 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 1
  %21 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 2
  %22 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 3
  store i32 1, i32* %19, align 4
  store i32 1, i32* %20, align 4
  store i32 3, i32* %21, align 4
  %23 = load i32, i32* %21, align 4
  %24 = load i32, i32* %20, align 4
  %25 = sub i32 %23, %24
  %26 = add i32 %25, 1
  %27 = mul i32 %17, %26
  store i32 %26, i32* %22, align 4
  %28 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 2
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 0
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 1
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 2
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %28, i32 0, i32 3
  store i32 1, i32* %29, align 4
  store i32 1, i32* %30, align 4
  store i32 3, i32* %31, align 4
  %33 = load i32, i32* %31, align 4
  %34 = load i32, i32* %30, align 4
  %35 = sub i32 %33, %34
  %36 = add i32 %35, 1
  %37 = mul i32 %27, %36
  store i32 %36, i32* %32, align 4
  %38 = getelementptr %array, %array* %c, i32 0, i32 0
  %39 = alloca i32, align 4
  %40 = mul i32 %37, 4
  store i32 %40, i32* %39, align 4
  %41 = load i32, i32* %39, align 4
  %42 = call i8* (i32, ...) @_lfortran_malloc(i32 %41)
  %43 = bitcast i8* %42 to i32*
  store i32* %43, i32** %38, align 8
  %44 = getelementptr %array, %array* %c, i32 0, i32 2
  %45 = load %dimension_descriptor*, %dimension_descriptor** %44, align 8
  %46 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %45, i32 0
  %47 = getelementptr %dimension_descriptor, %dimension_descriptor* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 1, %48
  %50 = mul i32 1, %49
  %51 = add i32 0, %50
  %52 = getelementptr %dimension_descriptor, %dimension_descriptor* %46, i32 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = mul i32 1, %53
  %55 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %45, i32 1
  %56 = getelementptr %dimension_descriptor, %dimension_descriptor* %55, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = sub i32 1, %57
  %59 = mul i32 %54, %58
  %60 = add i32 %51, %59
  %61 = getelementptr %dimension_descriptor, %dimension_descriptor* %55, i32 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 %54, %62
  %64 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %45, i32 2
  %65 = getelementptr %dimension_descriptor, %dimension_descriptor* %64, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = sub i32 1, %66
  %68 = mul i32 %63, %67
  %69 = add i32 %60, %68
  %70 = getelementptr %dimension_descriptor, %dimension_descriptor* %64, i32 0, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = mul i32 %63, %71
  %73 = getelementptr %array, %array* %c, i32 0, i32 0
  %74 = load i32*, i32** %73, align 8
  %75 = getelementptr inbounds i32, i32* %74, i32 %69
  store i32 99, i32* %75, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @g(%array* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = getelementptr %array, %array* %x, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 1, %4
  %6 = mul i32 1, %5
  %7 = add i32 0, %6
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul i32 1, %9
  %11 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 1, %13
  %15 = mul i32 %10, %14
  %16 = add i32 %7, %15
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %10, %18
  %20 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 2
  %21 = getelementptr %dimension_descriptor, %dimension_descriptor* %20, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sub i32 1, %22
  %24 = mul i32 %19, %23
  %25 = add i32 %16, %24
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %20, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = mul i32 %19, %27
  %29 = getelementptr %array, %array* %x, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i32 %25
  %32 = load i32, i32* %31, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %32)
  %33 = load %array, %array* %x, align 8
  %34 = getelementptr %array, %array* %x, i32 0, i32 3
  %35 = load i1, i1* %34, align 1
  br i1 %35, label %then, label %else

then:                                             ; preds = %.entry
  %36 = getelementptr %array, %array* %x, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = alloca i8*, align 8
  %39 = bitcast i32* %37 to i8*
  store i8* %39, i8** %38, align 8
  %40 = load i8*, i8** %38, align 8
  call void (i8*, ...) @_lfortran_free(i8* %40)
  %41 = getelementptr %array, %array* %x, i32 0, i32 3
  store i1 false, i1* %41, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %42 = alloca %array, align 8
  call void @f(%array* %x)
  %43 = getelementptr %array, %array* %x, i32 0, i32 2
  %44 = load %dimension_descriptor*, %dimension_descriptor** %43, align 8
  %45 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 0
  %46 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sub i32 1, %47
  %49 = mul i32 1, %48
  %50 = add i32 0, %49
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 1, %52
  %54 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 1
  %55 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 1, %56
  %58 = mul i32 %53, %57
  %59 = add i32 %50, %58
  %60 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = mul i32 %53, %61
  %63 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 2
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 1, %65
  %67 = mul i32 %62, %66
  %68 = add i32 %59, %67
  %69 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = mul i32 %62, %70
  %72 = getelementptr %array, %array* %x, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = getelementptr inbounds i32, i32* %73, i32 %68
  %75 = load i32, i32* %74, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %75)
  %76 = getelementptr %array, %array* %x, i32 0, i32 2
  %77 = load %dimension_descriptor*, %dimension_descriptor** %76, align 8
  %78 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 0
  %79 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sub i32 1, %80
  %82 = mul i32 1, %81
  %83 = add i32 0, %82
  %84 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = mul i32 1, %85
  %87 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 1
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 1, %89
  %91 = mul i32 %86, %90
  %92 = add i32 %83, %91
  %93 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 3
  %94 = load i32, i32* %93, align 4
  %95 = mul i32 %86, %94
  %96 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 2
  %97 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = sub i32 1, %98
  %100 = mul i32 %95, %99
  %101 = add i32 %92, %100
  %102 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 3
  %103 = load i32, i32* %102, align 4
  %104 = mul i32 %95, %103
  %105 = getelementptr %array, %array* %x, i32 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = getelementptr inbounds i32, i32* %106, i32 %101
  store i32 8, i32* %107, align 4
  store i32 0, i32* %r, align 4
  br label %return

return:                                           ; preds = %ifcont
  %108 = load i32, i32* %r, align 4
  ret i32 %108
}

define void @h(%array* %c) {
.entry:
  %0 = getelementptr %array, %array* %c, i32 0, i32 2
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 1, %4
  %6 = mul i32 1, %5
  %7 = add i32 0, %6
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = mul i32 1, %9
  %11 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 1
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = sub i32 1, %13
  %15 = mul i32 %10, %14
  %16 = add i32 %7, %15
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %10, %18
  %20 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 2
  %21 = getelementptr %dimension_descriptor, %dimension_descriptor* %20, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sub i32 1, %22
  %24 = mul i32 %19, %23
  %25 = add i32 %16, %24
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %20, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = mul i32 %19, %27
  %29 = getelementptr %array, %array* %c, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i32 %25
  %32 = load i32, i32* %31, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i32 %32)
  %33 = load %array, %array* %c, align 8
  %34 = getelementptr %array, %array* %c, i32 0, i32 3
  %35 = load i1, i1* %34, align 1
  br i1 %35, label %then, label %else

then:                                             ; preds = %.entry
  %36 = getelementptr %array, %array* %c, i32 0, i32 0
  %37 = load i32*, i32** %36, align 8
  %38 = alloca i8*, align 8
  %39 = bitcast i32* %37 to i8*
  store i8* %39, i8** %38, align 8
  %40 = load i8*, i8** %38, align 8
  call void (i8*, ...) @_lfortran_free(i8* %40)
  %41 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 false, i1* %41, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %42 = alloca %array, align 8
  call void @f(%array* %c)
  %43 = getelementptr %array, %array* %c, i32 0, i32 2
  %44 = load %dimension_descriptor*, %dimension_descriptor** %43, align 8
  %45 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 0
  %46 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = sub i32 1, %47
  %49 = mul i32 1, %48
  %50 = add i32 0, %49
  %51 = getelementptr %dimension_descriptor, %dimension_descriptor* %45, i32 0, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 1, %52
  %54 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 1
  %55 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 1, %56
  %58 = mul i32 %53, %57
  %59 = add i32 %50, %58
  %60 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = mul i32 %53, %61
  %63 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %44, i32 2
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 1, %65
  %67 = mul i32 %62, %66
  %68 = add i32 %59, %67
  %69 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = mul i32 %62, %70
  %72 = getelementptr %array, %array* %c, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = getelementptr inbounds i32, i32* %73, i32 %68
  %75 = load i32, i32* %74, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i32 %75)
  %76 = getelementptr %array, %array* %c, i32 0, i32 2
  %77 = load %dimension_descriptor*, %dimension_descriptor** %76, align 8
  %78 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 0
  %79 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sub i32 1, %80
  %82 = mul i32 1, %81
  %83 = add i32 0, %82
  %84 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = mul i32 1, %85
  %87 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 1
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 1, %89
  %91 = mul i32 %86, %90
  %92 = add i32 %83, %91
  %93 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 3
  %94 = load i32, i32* %93, align 4
  %95 = mul i32 %86, %94
  %96 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %77, i32 2
  %97 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = sub i32 1, %98
  %100 = mul i32 %95, %99
  %101 = add i32 %92, %100
  %102 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 3
  %103 = load i32, i32* %102, align 4
  %104 = mul i32 %95, %103
  %105 = getelementptr %array, %array* %c, i32 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = getelementptr inbounds i32, i32* %106, i32 %101
  store i32 8, i32* %107, align 4
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

declare i8* @_lfortran_malloc(i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_free(i8*, ...)

define i32 @main() {
.entry:
  %c = alloca %array, align 8
  %0 = getelementptr %array, %array* %c, i32 0, i32 2
  %1 = alloca i32, align 4
  store i32 3, i32* %1, align 4
  %2 = load i32, i32* %1, align 4
  %3 = alloca %dimension_descriptor, i32 %2, align 8
  store %dimension_descriptor* %3, %dimension_descriptor** %0, align 8
  %4 = getelementptr %array, %array* %c, i32 0, i32 4
  store i32 3, i32* %4, align 4
  %5 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 false, i1* %5, align 1
  %r = alloca i32, align 4
  %stat = alloca i32, align 4
  store i32 1, i32* %stat, align 4
  %6 = getelementptr %array, %array* %c, i32 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 true, i1* %7, align 1
  %8 = getelementptr %array, %array* %c, i32 0, i32 2
  %9 = alloca i32, align 4
  store i32 3, i32* %9, align 4
  %10 = load i32, i32* %9, align 4
  %11 = alloca %dimension_descriptor, i32 %10, align 8
  store %dimension_descriptor* %11, %dimension_descriptor** %8, align 8
  %12 = getelementptr %array, %array* %c, i32 0, i32 4
  store i32 3, i32* %12, align 4
  %13 = load %dimension_descriptor*, %dimension_descriptor** %8, align 8
  %14 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %13, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 0
  %16 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 1
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 2
  %18 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 3
  store i32 1, i32* %15, align 4
  store i32 1, i32* %16, align 4
  store i32 3, i32* %17, align 4
  %19 = load i32, i32* %17, align 4
  %20 = load i32, i32* %16, align 4
  %21 = sub i32 %19, %20
  %22 = add i32 %21, 1
  %23 = mul i32 1, %22
  store i32 %22, i32* %18, align 4
  %24 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %13, i32 1
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 3
  store i32 1, i32* %25, align 4
  store i32 1, i32* %26, align 4
  store i32 3, i32* %27, align 4
  %29 = load i32, i32* %27, align 4
  %30 = load i32, i32* %26, align 4
  %31 = sub i32 %29, %30
  %32 = add i32 %31, 1
  %33 = mul i32 %23, %32
  store i32 %32, i32* %28, align 4
  %34 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %13, i32 2
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 0
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 1
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 2
  %38 = getelementptr %dimension_descriptor, %dimension_descriptor* %34, i32 0, i32 3
  store i32 1, i32* %35, align 4
  store i32 1, i32* %36, align 4
  store i32 3, i32* %37, align 4
  %39 = load i32, i32* %37, align 4
  %40 = load i32, i32* %36, align 4
  %41 = sub i32 %39, %40
  %42 = add i32 %41, 1
  %43 = mul i32 %33, %42
  store i32 %42, i32* %38, align 4
  %44 = getelementptr %array, %array* %c, i32 0, i32 0
  %45 = alloca i32, align 4
  %46 = mul i32 %43, 4
  store i32 %46, i32* %45, align 4
  %47 = load i32, i32* %45, align 4
  %48 = call i8* (i32, ...) @_lfortran_malloc(i32 %47)
  %49 = bitcast i8* %48 to i32*
  store i32* %49, i32** %44, align 8
  store i32 0, i32* %stat, align 4
  %50 = load i32, i32* %stat, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %52 = getelementptr %array, %array* %c, i32 0, i32 2
  %53 = load %dimension_descriptor*, %dimension_descriptor** %52, align 8
  %54 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %53, i32 0
  %55 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 1, %56
  %58 = mul i32 1, %57
  %59 = add i32 0, %58
  %60 = getelementptr %dimension_descriptor, %dimension_descriptor* %54, i32 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = mul i32 1, %61
  %63 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %53, i32 1
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sub i32 1, %65
  %67 = mul i32 %62, %66
  %68 = add i32 %59, %67
  %69 = getelementptr %dimension_descriptor, %dimension_descriptor* %63, i32 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = mul i32 %62, %70
  %72 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %53, i32 2
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %72, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = sub i32 1, %74
  %76 = mul i32 %71, %75
  %77 = add i32 %68, %76
  %78 = getelementptr %dimension_descriptor, %dimension_descriptor* %72, i32 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = mul i32 %71, %79
  %81 = getelementptr %array, %array* %c, i32 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = getelementptr inbounds i32, i32* %82, i32 %77
  store i32 3, i32* %83, align 4
  %84 = load %array, %array* %c, align 8
  %85 = getelementptr %array, %array* %c, i32 0, i32 3
  %86 = load i1, i1* %85, align 1
  br i1 %86, label %then1, label %else2

then1:                                            ; preds = %ifcont
  %87 = getelementptr %array, %array* %c, i32 0, i32 0
  %88 = load i32*, i32** %87, align 8
  %89 = alloca i8*, align 8
  %90 = bitcast i32* %88 to i8*
  store i8* %90, i8** %89, align 8
  %91 = load i8*, i8** %89, align 8
  call void (i8*, ...) @_lfortran_free(i8* %91)
  %92 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 false, i1* %92, align 1
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %93 = alloca %array, align 8
  call void @h(%array* %c)
  %94 = alloca %array, align 8
  %95 = call i32 @g(%array* %c)
  store i32 %95, i32* %r, align 4
  %96 = getelementptr %array, %array* %c, i32 0, i32 2
  %97 = load %dimension_descriptor*, %dimension_descriptor** %96, align 8
  %98 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %97, i32 0
  %99 = getelementptr %dimension_descriptor, %dimension_descriptor* %98, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = sub i32 1, %100
  %102 = mul i32 1, %101
  %103 = add i32 0, %102
  %104 = getelementptr %dimension_descriptor, %dimension_descriptor* %98, i32 0, i32 3
  %105 = load i32, i32* %104, align 4
  %106 = mul i32 1, %105
  %107 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %97, i32 1
  %108 = getelementptr %dimension_descriptor, %dimension_descriptor* %107, i32 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = sub i32 1, %109
  %111 = mul i32 %106, %110
  %112 = add i32 %103, %111
  %113 = getelementptr %dimension_descriptor, %dimension_descriptor* %107, i32 0, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = mul i32 %106, %114
  %116 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %97, i32 2
  %117 = getelementptr %dimension_descriptor, %dimension_descriptor* %116, i32 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = sub i32 1, %118
  %120 = mul i32 %115, %119
  %121 = add i32 %112, %120
  %122 = getelementptr %dimension_descriptor, %dimension_descriptor* %116, i32 0, i32 3
  %123 = load i32, i32* %122, align 4
  %124 = mul i32 %115, %123
  %125 = getelementptr %array, %array* %c, i32 0, i32 0
  %126 = load i32*, i32** %125, align 8
  %127 = getelementptr inbounds i32, i32* %126, i32 %121
  %128 = load i32, i32* %127, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i32 %128)
  %129 = load %array, %array* %c, align 8
  %130 = getelementptr %array, %array* %c, i32 0, i32 3
  %131 = load i1, i1* %130, align 1
  br i1 %131, label %then4, label %else5

then4:                                            ; preds = %ifcont3
  %132 = getelementptr %array, %array* %c, i32 0, i32 0
  %133 = load i32*, i32** %132, align 8
  %134 = alloca i8*, align 8
  %135 = bitcast i32* %133 to i8*
  store i8* %135, i8** %134, align 8
  %136 = load i8*, i8** %134, align 8
  call void (i8*, ...) @_lfortran_free(i8* %136)
  %137 = getelementptr %array, %array* %c, i32 0, i32 3
  store i1 false, i1* %137, align 1
  br label %ifcont6

else5:                                            ; preds = %ifcont3
  br label %ifcont6

ifcont6:                                          ; preds = %else5, %then4
  ret i32 0
}

declare void @exit(i32)
