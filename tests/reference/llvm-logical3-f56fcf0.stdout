; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [27 x i8] c"Line 1 - Condition is true\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@2 = private unnamed_addr constant [28 x i8] c"Line 1 - Condition is false\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@4 = private unnamed_addr constant [27 x i8] c"Line 2 - Condition is true\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@6 = private unnamed_addr constant [28 x i8] c"Line 2 - Condition is false\00", align 1
@7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@8 = private unnamed_addr constant [27 x i8] c"Line 3 - Condition is true\00", align 1
@9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@10 = private unnamed_addr constant [28 x i8] c"Line 3 - Condition is false\00", align 1
@11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@12 = private unnamed_addr constant [27 x i8] c"Line 4 - Condition is true\00", align 1
@13 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@14 = private unnamed_addr constant [28 x i8] c"Line 4 - Condition is false\00", align 1
@15 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@16 = private unnamed_addr constant [27 x i8] c"Line 5 - Condition is true\00", align 1
@17 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@18 = private unnamed_addr constant [28 x i8] c"Line 5 - Condition is false\00", align 1
@19 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i64 @main() {
.entry:
  %a = alloca i1
  %b = alloca i1
  store i1 true, i1* %a
  store i1 false, i1* %b
  %0 = load i1, i1* %a
  %1 = load i1, i1* %b
  %2 = and i1 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @0, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @2, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i64 [ 1, %then ], [ 2, %else ]
  %3 = load i1, i1* %a
  %4 = load i1, i1* %b
  %5 = or i1 %3, %4
  br i1 %5, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @4, i32 0, i32 0))
  br label %ifcont3

else2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @6, i32 0, i32 0))
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %iftmp4 = phi i64 [ 1, %then1 ], [ 2, %else2 ]
  store i1 false, i1* %a
  store i1 true, i1* %b
  %6 = load i1, i1* %a
  %7 = load i1, i1* %b
  %8 = and i1 %6, %7
  %9 = xor i1 %8, true
  br i1 %9, label %then5, label %else6

then5:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @8, i32 0, i32 0))
  br label %ifcont7

else6:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @10, i32 0, i32 0))
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %iftmp8 = phi i64 [ 1, %then5 ], [ 2, %else6 ]
  %10 = load i1, i1* %b
  %11 = load i1, i1* %a
  %12 = xor i1 %10, %11
  br i1 %12, label %then9, label %else10

then9:                                            ; preds = %ifcont7
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @12, i32 0, i32 0))
  br label %ifcont11

else10:                                           ; preds = %ifcont7
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @14, i32 0, i32 0))
  br label %ifcont11

ifcont11:                                         ; preds = %else10, %then9
  %iftmp12 = phi i64 [ 1, %then9 ], [ 2, %else10 ]
  %13 = load i1, i1* %b
  %14 = load i1, i1* %a
  %15 = xor i1 %13, %14
  %16 = xor i1 %15, true
  br i1 %16, label %then13, label %else14

then13:                                           ; preds = %ifcont11
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @17, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @16, i32 0, i32 0))
  br label %ifcont15

else14:                                           ; preds = %ifcont11
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @18, i32 0, i32 0))
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %then13
  %iftmp16 = phi i64 [ 1, %then13 ], [ 2, %else14 ]
  ret i64 0
}

declare void @_lfortran_printf(i8*, ...)

