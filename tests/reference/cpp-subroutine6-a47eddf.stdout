#include <iostream>
#include <string>
#include <vector>
#include <Kokkos_Core.hpp>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

int abs(const Kokkos::View<const int*> &x)
{
    int abs;
    return abs;
}

bool allocated(const Kokkos::View<const int*> &x)
{
    bool allocated;
    return allocated;
}

int iint(int x)
{
    int iint;
    return iint;
}

int iinta(const Kokkos::View<const int*> &x)
{
    int iinta;
    return iinta;
}

int iintk(const Kokkos::View<const int*> &x, int kind)
{
    int iintk;
    return iintk;
}

int lbound(const Kokkos::View<const int*> &x, int dim)
{
    int lbound;
    return lbound;
}

int max(int a, int b)
{
    int max;
    return max;
}

int maxval(const Kokkos::View<const int*> &x)
{
    int maxval;
    return maxval;
}

int min(int a, int b)
{
    int min;
    return min;
}

int minval(const Kokkos::View<const int*> &x)
{
    int minval;
    return minval;
}

float real(const Kokkos::View<const int*> &x, int kind)
{
    float real;
    return real;
}

int rint(float x)
{
    int rint;
    return rint;
}

int rinta(const Kokkos::View<const float*> &x)
{
    int rinta;
    return rinta;
}

int rintk(const Kokkos::View<const float*> &x, int kind)
{
    int rintk;
    return rintk;
}

int sum(const Kokkos::View<const int*> &x)
{
    int sum;
    return sum;
}

float tiny(const Kokkos::View<const int*> &x)
{
    float tiny;
    return tiny;
}

int ubound(const Kokkos::View<const int*> &x, int dim)
{
    int ubound;
    return ubound;
}

void triad(const Kokkos::View<const float*> &a, const Kokkos::View<const float*> &b, float scalar, const Kokkos::View<float*> &c)
{
    int N;
    int N2;
    N = a.extent(0);
    N2 = b.extent(0);
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, N+1), KOKKOS_LAMBDA(const long i) {
        c[i-1] = a[i-1] + scalar*b[i-1];
    });
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, N2+1), KOKKOS_LAMBDA(const long j) {
        c[j-1] = b[j-1] + scalar;
    });
}

