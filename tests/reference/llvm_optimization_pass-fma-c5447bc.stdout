; ModuleID = 'LFortran'
source_filename = "LFortran"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-darwin21.2.0"

; Function Attrs: nofree norecurse nounwind
define void @flipsigni32r32(i32* nocapture readonly %signal, float* nocapture %variable) local_unnamed_addr #0 {
.entry:
  %0 = load i32, i32* %signal, align 4
  %1 = and i32 %0, 1
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %return, label %then

then:                                             ; preds = %.entry
  %2 = load float, float* %variable, align 4
  %3 = fsub float 0.000000e+00, %2
  store float %3, float* %variable, align 4
  br label %return

return:                                           ; preds = %.entry, %then
  ret void
}

; Function Attrs: nofree norecurse nounwind
define void @flipsigni32r64(i32* nocapture readonly %signal, double* nocapture %variable) local_unnamed_addr #0 {
.entry:
  %0 = load i32, i32* %signal, align 4
  %1 = and i32 %0, 1
  %.not = icmp eq i32 %1, 0
  br i1 %.not, label %return, label %then

then:                                             ; preds = %.entry
  %2 = load double, double* %variable, align 8
  %3 = fsub double 0.000000e+00, %2
  store double %3, double* %variable, align 8
  br label %return

return:                                           ; preds = %.entry, %then
  ret void
}

; Function Attrs: norecurse nounwind readonly
define float @fmar32(float* nocapture readonly %a, float* nocapture readonly %b, float* nocapture readonly %c) local_unnamed_addr #1 {
.entry:
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  ret float %4
}

; Function Attrs: norecurse nounwind readonly
define double @fmar64(double* nocapture readonly %a, double* nocapture readonly %b, double* nocapture readonly %c) local_unnamed_addr #1 {
.entry:
  %0 = load double, double* %a, align 8
  %1 = load double, double* %b, align 8
  %2 = load double, double* %c, align 8
  %3 = fmul double %1, %2
  %4 = fadd double %0, %3
  ret double %4
}

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) local_unnamed_addr {
.entry:
  tail call void @_lfortran_cpu_time(double* %t)
  ret void
}

declare void @_lfortran_cpu_time(double*) local_unnamed_addr

; Function Attrs: norecurse nounwind readonly
define double @__module_lfortran_intrinsic_math_dabs(double* nocapture readonly %x) local_unnamed_addr #1 {
.entry:
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  %2 = fsub double 0.000000e+00, %0
  %r.0 = select i1 %1, double %0, double %2
  ret double %r.0
}

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) local_unnamed_addr {
.entry:
  tail call void @_lfortran_dp_rand_num(double* %harvest)
  ret void
}

declare void @_lfortran_dp_rand_num(double*) local_unnamed_addr

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) local_unnamed_addr {
.entry:
  tail call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*) local_unnamed_addr

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) local_unnamed_addr {
.entry:
  tail call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*) local_unnamed_addr

; Function Attrs: norecurse nounwind readonly
define float @__module_lfortran_intrinsic_math_sabs(float* nocapture readonly %x) local_unnamed_addr #1 {
.entry:
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = fsub float 0.000000e+00, %0
  %r.0 = select i1 %1, float %0, float %2
  ret float %r.0
}

; Function Attrs: norecurse nounwind readonly
define float @__module_lfortran_intrinsic_math_signr32(float* nocapture readonly %x, float* nocapture readonly %y) local_unnamed_addr #1 {
.entry:
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = load float, float* %y, align 4
  %3 = fcmp uge float %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = fcmp ule float %0, 0.000000e+00
  %6 = fcmp ule float %2, 0.000000e+00
  %7 = and i1 %5, %6
  %8 = or i1 %4, %7
  %9 = fsub float 0.000000e+00, %0
  %r.0 = select i1 %8, float %0, float %9
  ret float %r.0
}

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) local_unnamed_addr {
.entry:
  tail call void @_lfortran_sp_rand_num(float* %harvest)
  ret void
}

declare void @_lfortran_sp_rand_num(float*) local_unnamed_addr

define i32 @main() local_unnamed_addr {
ifcont10:
  ret i32 0
}

attributes #0 = { nofree norecurse nounwind }
attributes #1 = { norecurse nounwind readonly }
