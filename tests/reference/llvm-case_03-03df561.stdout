; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [6 x i8] c"Pass!\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@2 = private unnamed_addr constant [8 x i8] c"Failed!\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@4 = private unnamed_addr constant [14 x i8] c"Invalid marks\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@6 = private unnamed_addr constant [16 x i8] c"Your marks are \00", align 1
@7 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@8 = private unnamed_addr constant [6 x i8] c"Pass!\00", align 1
@9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@10 = private unnamed_addr constant [8 x i8] c"Failed!\00", align 1
@11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@12 = private unnamed_addr constant [14 x i8] c"Invalid marks\00", align 1
@13 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@14 = private unnamed_addr constant [16 x i8] c"Your marks are \00", align 1
@15 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1

define i64 @main() {
.entry:
  %a = alloca i64, align 8
  store i64 1, i64* %a, align 4
  %b = alloca i64, align 8
  store i64 2, i64* %b, align 4
  %marks = alloca i64, align 8
  store i64 94, i64* %marks, align 4
  %0 = load i64, i64* %b, align 4
  %1 = add i64 40, %0
  %2 = load i64, i64* %marks, align 4
  %3 = icmp sle i64 %1, %2
  br i1 %3, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0))
  br label %ifcont3

else:                                             ; preds = %.entry
  %4 = load i64, i64* %marks, align 4
  %5 = load i64, i64* %a, align 4
  %6 = sub i64 39, %5
  %7 = icmp sle i64 %4, %6
  br i1 %7, label %then1, label %else2

then1:                                            ; preds = %else
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i32 0, i32 0))
  br label %ifcont

else2:                                            ; preds = %else
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @4, i32 0, i32 0))
  br label %ifcont

ifcont:                                           ; preds = %else2, %then1
  %iftmp = phi i64 [ 1, %then1 ], [ 2, %else2 ]
  br label %ifcont3

ifcont3:                                          ; preds = %ifcont, %then
  %iftmp4 = phi i64 [ 1, %then ], [ 2, %ifcont ]
  %8 = load i64, i64* %marks, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @6, i32 0, i32 0), i64 %8)
  store i64 -1, i64* %marks, align 4
  %9 = load i64, i64* %b, align 4
  %10 = add i64 40, %9
  %11 = load i64, i64* %marks, align 4
  %12 = icmp sle i64 %10, %11
  br i1 %12, label %then5, label %else6

then5:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @8, i32 0, i32 0))
  br label %ifcont11

else6:                                            ; preds = %ifcont3
  %13 = load i64, i64* %marks, align 4
  %14 = icmp sle i64 0, %13
  %15 = load i64, i64* %marks, align 4
  %16 = load i64, i64* %a, align 4
  %17 = sub i64 39, %16
  %18 = icmp sle i64 %15, %17
  %19 = mul i1 %14, %18
  br i1 %19, label %then7, label %else8

then7:                                            ; preds = %else6
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @10, i32 0, i32 0))
  br label %ifcont9

else8:                                            ; preds = %else6
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @13, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @12, i32 0, i32 0))
  br label %ifcont9

ifcont9:                                          ; preds = %else8, %then7
  %iftmp10 = phi i64 [ 1, %then7 ], [ 2, %else8 ]
  br label %ifcont11

ifcont11:                                         ; preds = %ifcont9, %then5
  %iftmp12 = phi i64 [ 1, %then5 ], [ 2, %ifcont9 ]
  %20 = load i64, i64* %marks, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @14, i32 0, i32 0), i64 %20)
  ret i64 0
}

declare void @_lfortran_printf(i8*, ...)

