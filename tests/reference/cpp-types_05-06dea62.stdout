#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

namespace {

void main2() {
        int i;
        float r;
        r = 1.000000*(float)(2);
        r = (float)(2)*1.000000;
        r = (float)(2)*((float)(3) + 1.000000);
        r = (float)(2)*(3.000000 - (float)(1));
        r = (float)(1/2);
        r = 1.000000/(float)(2);
        r = (float)(1)/2.000000;
        i = (int)(1.000000*(float)(2));
        i = (int)((float)(2)*1.000000);
        i = (int)((float)(2)*((float)(3) + 1.000000));
        i = (int)((float)(2)*(3.000000 - (float)(1)));
        i = 1/2;
        i = (int)(1.000000/(float)(2));
        i = (int)((float)(1)/2.000000);
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
