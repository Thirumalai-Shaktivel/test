#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

// Forward declarations
namespace {
}

// Implementations
namespace {

void main2() {
    Kokkos::View<float[6]> a("a");
    Kokkos::View<float[6]> b("b");
    Kokkos::View<int[4]> c("c");
    Kokkos::View<bool[3]> d("d");
    Kokkos::View<float[3][4]> e("e");
    Kokkos::View<int[4][5]> f("f");
    Kokkos::View<bool[6][3]> g("g");
    Kokkos::View<float[3][4][5]> h("h");
    Kokkos::View<int[4][5][4]> i("i");
    Kokkos::View<bool[6][3][3]> j("j");
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
