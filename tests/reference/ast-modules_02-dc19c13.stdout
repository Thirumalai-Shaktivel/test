(TranslationUnit [(Module random (TriviaNode [(EmptyLines)] []) [(Use [] types [(UseSymbol dp ())] .true. (TriviaNode [] [])) (Use [] utils [(UseSymbol stop_error ())] .true. (TriviaNode [] []))] [(ImplicitNone [] (TriviaNode [] []))] [(Declaration () [(SimpleAttribute AttrPrivate)] [] (TriviaNode [] [])) (Declaration () [(SimpleAttribute AttrPublic)] [(randn [] [] () None ()) (rand_gamma [] [] () None ())] (TriviaNode [] [(EmptyLines)])) (Interface (InterfaceHeaderName randn) (TriviaNode [] [(EmptyLines)]) [(InterfaceModuleProcedure [randn_scalar] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [randn_vector] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [randn_matrix] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [randn_vector_n] [(SimpleAttribute AttrModule)] (TriviaNode [] []))]) (Interface (InterfaceHeaderName rand_gamma) (TriviaNode [] [(EmptyLines)]) [(InterfaceModuleProcedure [rand_gamma_scalar] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [rand_gamma_vector] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [rand_gamma_matrix] [(SimpleAttribute AttrModule)] (TriviaNode [] [])) (InterfaceModuleProcedure [rand_gamma_vector_n] [(SimpleAttribute AttrModule)] (TriviaNode [] []))])] [(Subroutine randn_scalar [(x)] [] () (TriviaNode [(Comment "! Returns a psuedorandom scalar drawn from the standard normal distribution.") (Comment "!") (Comment "! [1] Marsaglia, G., & Bray, T. A. (1964). A Convenient Method for Generating") (Comment "!       Normal Variables. SIAM Review, 6(3), 260-264.")] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeLogical [] () None) [(SimpleAttribute AttrSave)] [(first [] [] (Logical .true.) Equal ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(SimpleAttribute AttrSave)] [(u [(1 2 DimensionExpr)] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [] [(r2 [] [] () None ())] (TriviaNode [] []))] [(If 0 () first [(DoLoop 0 () 0 () () () () [(SubroutineCall 0 random_number [] [(() u ())] [] ()) (= 0 u (- (* 2 u) 1) ()) (= 0 r2 (FuncCallOrArray sum [] [(() (** u 2) ())] [] []) ()) (If 0 () (BoolOp (< r2 1) And (> r2 0)) [(Exit 0 () ())] [] ())] ()) (= 0 u (* u (FuncCallOrArray sqrt [] [(() (/ (* (u- 2) (FuncCallOrArray log [] [(() r2 ())] [] [])) r2) ())] [] [])) ()) (= 0 x (FuncCallOrArray u [] [(() 1 ())] [] []) ())] [(= 0 x (FuncCallOrArray u [] [(() 2 ())] [] []) ())] ()) (= 0 first (not first) ())] []) (Subroutine randn_vector_n [(n) (x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeInteger [] () None) [(AttrIntent In)] [(n [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(1 n DimensionExpr)] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeInteger [] () None) [] [(i [] [] () None ())] (TriviaNode [] []))] [(DoLoop 0 () 0 i 1 (FuncCallOrArray size [] [(() x ())] [] []) () [(SubroutineCall 0 randn [] [(() (FuncCallOrArray x [] [(() i ())] [] []) ())] [] ())] ())] []) (Subroutine randn_vector [(x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(() () DimensionExpr)] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 randn_vector_n [] [(() (FuncCallOrArray size [] [(() x ())] [] []) ()) (() x ())] [] ())] []) (Subroutine randn_matrix [(x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(() () DimensionExpr) (() () DimensionExpr)] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 randn_vector_n [] [(() (FuncCallOrArray size [] [(() x ())] [] []) ()) (() x ())] [] ())] []) (Subroutine rand_gamma0 [(a) (first) (fn_val)] [] () (TriviaNode [(Comment "! Returns a psuedorandom scalar drawn from the gamma distribution.") (Comment "!") (Comment "! The shape parameter a >= 1.") (Comment "!") (Comment "! [1] Marsaglia, G., & Tsang, W. W. (2000). A Simple Method for Generating") (Comment "! Gamma Variables. ACM Transactions on Mathematical Software (TOMS), 26(3),") (Comment "! 363-372.")] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent In)] [(a [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeLogical [] () None) [(AttrIntent In)] [(first [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(fn_val [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(SimpleAttribute AttrSave)] [(c [] [] () None ()) (d [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [] [(U [] [] () None ()) (v [] [] () None ()) (x [] [] () None ())] (TriviaNode [] []))] [(If 0 () (< a 1) [(SubroutineCall 0 stop_error [] [(() (String "Shape parameter must be >= 1") ())] [] ())] [] ()) (If 0 () first [(= 0 d (- a (/ (Real "1._dp") 3)) ()) (= 0 c (/ 1 (FuncCallOrArray sqrt [] [(() (* 9 d) ())] [] [])) ())] [] ()) (DoLoop 0 () 0 () () () () [(DoLoop 0 () 0 () () () () [(SubroutineCall 0 randn [] [(() x ())] [] ()) (= 0 v (** (+ 1 (* c x)) 3) ()) (If 0 () (> v 0) [(Exit 0 () ())] [] ())] ()) (SubroutineCall 0 random_number [] [(() U ())] [] (TriviaNode [] [(Comment "! Note: the number 0.0331 below is exact, see [1].")])) (If 0 () (< U (- 1 (* (Real "0.0331_dp") (** x 4)))) [(= 0 fn_val (* d v) ()) (Exit 0 () ())] [(If 0 () (< (FuncCallOrArray log [] [(() U ())] [] []) (+ (/ (** x 2) 2) (* d (+ (- 1 v) (FuncCallOrArray log [] [(() v ())] [] []))))) [(= 0 fn_val (* d v) ()) (Exit 0 () ())] [] ())] ())] ())] []) (Subroutine rand_gamma_scalar [(a) (x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent In)] [(a [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 rand_gamma0 [] [(() a ()) (() (Logical .true.) ()) (() x ())] [] ())] []) (Subroutine rand_gamma_vector_n [(a) (n) (x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent In)] [(a [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeInteger [] () None) [(AttrIntent In)] [(n [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(1 n DimensionExpr)] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeInteger [] () None) [] [(i [] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 rand_gamma0 [] [(() a ()) (() (Logical .true.) ()) (() (FuncCallOrArray x [] [(() 1 ())] [] []) ())] [] ()) (DoLoop 0 () 0 i 2 (FuncCallOrArray size [] [(() x ())] [] []) () [(SubroutineCall 0 rand_gamma0 [] [(() a ()) (() (Logical .false.) ()) (() (FuncCallOrArray x [] [(() i ())] [] []) ())] [] ())] ())] []) (Subroutine rand_gamma_vector [(a) (x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent In)] [(a [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(() () DimensionExpr)] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 rand_gamma_vector_n [] [(() a ()) (() (FuncCallOrArray size [] [(() x ())] [] []) ()) (() x ())] [] ())] []) (Subroutine rand_gamma_matrix [(a) (x)] [] () (TriviaNode [] [(EmptyLines)]) [] [] [] [(Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent In)] [(a [] [] () None ())] (TriviaNode [] [])) (Declaration (AttrType TypeReal [(() dp Value)] () None) [(AttrIntent Out)] [(x [(() () DimensionExpr) (() () DimensionExpr)] [] () None ())] (TriviaNode [] []))] [(SubroutineCall 0 rand_gamma_vector_n [] [(() a ()) (() (FuncCallOrArray size [] [(() x ())] [] []) ()) (() x ())] [] ())] [])])])
