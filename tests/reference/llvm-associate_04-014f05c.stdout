; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [10 x i8] c"%f %f %f\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define float @__module_lfortran_intrinsic_math_scos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define i32 @main() {
.entry:
  %a = alloca float, align 4
  %myreal = alloca float, align 4
  %theta = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  store float 0x3FDAE147A0000000, float* %x, align 4
  store float 0x3FD6666660000000, float* %y, align 4
  store float 0x4022333340000000, float* %myreal, align 4
  store float 1.500000e+00, float* %theta, align 4
  store float 0x3FD99999A0000000, float* %a, align 4
  %0 = load float, float* %a, align 4
  %1 = load float, float* %x, align 4
  %2 = fmul float %1, 2.000000e+00
  %3 = load float, float* %y, align 4
  %4 = fmul float %3, 2.000000e+00
  %5 = fadd float %2, %4
  %6 = fsub float 0.000000e+00, %5
  %7 = call float @__module_lfortran_intrinsic_math_scos(float* %theta)
  %8 = fmul float %6, %7
  %9 = fadd float %0, %8
  %10 = fpext float %9 to double
  %11 = load float, float* %a, align 4
  %12 = load float, float* %x, align 4
  %13 = fmul float %12, 2.000000e+00
  %14 = load float, float* %y, align 4
  %15 = fmul float %14, 2.000000e+00
  %16 = fadd float %13, %15
  %17 = fsub float 0.000000e+00, %16
  %18 = call float @__module_lfortran_intrinsic_math_scos(float* %theta)
  %19 = fmul float %17, %18
  %20 = fsub float %11, %19
  %21 = fpext float %20 to double
  %22 = load float, float* %myreal, align 4
  %23 = fpext float %22 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1, i32 0, i32 0), double %10, double %21, double %23)
  %24 = load float, float* %myreal, align 4
  %25 = fmul float %24, 0x4012666660000000
  store float %25, float* %myreal, align 4
  %26 = load float, float* %myreal, align 4
  %27 = fpext float %26 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), double %27)
  %28 = load float, float* %myreal, align 4
  %29 = fsub float %28, 0x4044EE1480000000
  %30 = fcmp ugt float %29, 0x3EE4F8B580000000
  %31 = load float, float* %myreal, align 4
  %32 = fsub float %31, 0x4044EE1480000000
  %33 = fcmp ult float %32, 0xBEE4F8B580000000
  %34 = or i1 %30, %33
  br i1 %34, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
