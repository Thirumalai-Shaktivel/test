; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { [3 x double], i32, [1 x %dimension_descriptor] }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array.0 = type { [4 x double], i32, [1 x %dimension_descriptor] }
%array.1 = type { [4 x double], i32, [2 x %dimension_descriptor] }

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@11 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@12 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@13 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@14 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@15 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main() {
.entry:
  %a = alloca %array, align 8
  %0 = getelementptr %array, %array* %a, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %a, i32 0, i32 2
  %2 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %1, i32 0, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %5 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2
  %6 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 3, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub i32 %7, %8
  %10 = add i32 %9, 1
  store i32 %10, i32* %6, align 4
  %b = alloca %array.0, align 8
  %11 = getelementptr %array.0, %array.0* %b, i32 0, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %13 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %12, i32 0, i32 0
  %14 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 1
  %16 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 2
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 3
  store i32 1, i32* %14, align 4
  store i32 1, i32* %15, align 4
  store i32 4, i32* %16, align 4
  %18 = load i32, i32* %16, align 4
  %19 = load i32, i32* %15, align 4
  %20 = sub i32 %18, %19
  %21 = add i32 %20, 1
  store i32 %21, i32* %17, align 4
  %c = alloca %array.1, align 8
  %22 = getelementptr %array.1, %array.1* %c, i32 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %24 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %23, i32 0, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 0
  %26 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 2
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 3
  store i32 1, i32* %25, align 4
  store i32 1, i32* %26, align 4
  store i32 2, i32* %27, align 4
  %29 = load i32, i32* %27, align 4
  %30 = load i32, i32* %26, align 4
  %31 = sub i32 %29, %30
  %32 = add i32 %31, 1
  store i32 %32, i32* %28, align 4
  %33 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %23, i32 0, i32 1
  %34 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 0
  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 1
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 2
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 3
  store i32 1, i32* %34, align 4
  store i32 1, i32* %35, align 4
  store i32 2, i32* %36, align 4
  %38 = load i32, i32* %36, align 4
  %39 = load i32, i32* %35, align 4
  %40 = sub i32 %38, %39
  %41 = add i32 %40, 1
  store i32 %41, i32* %37, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %42 = load i32, i32* %i, align 4
  %43 = add i32 %42, 1
  %44 = icmp sle i32 %43, 3
  br i1 %44, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %45 = load i32, i32* %i, align 4
  %46 = add i32 %45, 1
  store i32 %46, i32* %i, align 4
  %47 = load i32, i32* %i, align 4
  %48 = getelementptr %array, %array* %a, i32 0, i32 2
  %49 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %48, i32 0, i32 0
  %50 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %47, %51
  %53 = mul i32 1, %52
  %54 = add i32 0, %53
  %55 = getelementptr %dimension_descriptor, %dimension_descriptor* %49, i32 0, i32 3
  %56 = load i32, i32* %55, align 4
  %57 = mul i32 1, %56
  %58 = getelementptr %array, %array* %a, i32 0, i32 0
  %59 = getelementptr [3 x double], [3 x double]* %58, i32 0, i32 %54
  %60 = load i32, i32* %i, align 4
  %61 = add i32 %60, 10
  %62 = sitofp i32 %61 to double
  store double %62, double* %59, align 8
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %63 = getelementptr %array, %array* %a, i32 0, i32 2
  %64 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %63, i32 0, i32 0
  %65 = getelementptr %dimension_descriptor, %dimension_descriptor* %64, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = sub i32 1, %66
  %68 = mul i32 1, %67
  %69 = add i32 0, %68
  %70 = getelementptr %dimension_descriptor, %dimension_descriptor* %64, i32 0, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = mul i32 1, %71
  %73 = getelementptr %array, %array* %a, i32 0, i32 0
  %74 = getelementptr [3 x double], [3 x double]* %73, i32 0, i32 %69
  %75 = load double, double* %74, align 8
  %76 = fcmp une double %75, 1.100000e+01
  br i1 %76, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %77 = getelementptr %array, %array* %a, i32 0, i32 2
  %78 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %77, i32 0, i32 0
  %79 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = sub i32 2, %80
  %82 = mul i32 1, %81
  %83 = add i32 0, %82
  %84 = getelementptr %dimension_descriptor, %dimension_descriptor* %78, i32 0, i32 3
  %85 = load i32, i32* %84, align 4
  %86 = mul i32 1, %85
  %87 = getelementptr %array, %array* %a, i32 0, i32 0
  %88 = getelementptr [3 x double], [3 x double]* %87, i32 0, i32 %83
  %89 = load double, double* %88, align 8
  %90 = fcmp une double %89, 1.200000e+01
  br i1 %90, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %iftmp4 = phi i32 [ 1, %then1 ], [ 2, %else2 ]
  %91 = getelementptr %array, %array* %a, i32 0, i32 2
  %92 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %91, i32 0, i32 0
  %93 = getelementptr %dimension_descriptor, %dimension_descriptor* %92, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = sub i32 3, %94
  %96 = mul i32 1, %95
  %97 = add i32 0, %96
  %98 = getelementptr %dimension_descriptor, %dimension_descriptor* %92, i32 0, i32 3
  %99 = load i32, i32* %98, align 4
  %100 = mul i32 1, %99
  %101 = getelementptr %array, %array* %a, i32 0, i32 0
  %102 = getelementptr [3 x double], [3 x double]* %101, i32 0, i32 %97
  %103 = load double, double* %102, align 8
  %104 = fcmp une double %103, 1.300000e+01
  br i1 %104, label %then5, label %else6

then5:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont3
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %iftmp8 = phi i32 [ 1, %then5 ], [ 2, %else6 ]
  store i32 10, i32* %i, align 4
  br label %loop.head9

loop.head9:                                       ; preds = %loop.body10, %ifcont7
  %105 = load i32, i32* %i, align 4
  %106 = add i32 %105, 1
  %107 = icmp sle i32 %106, 14
  br i1 %107, label %loop.body10, label %loop.end11

loop.body10:                                      ; preds = %loop.head9
  %108 = load i32, i32* %i, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %i, align 4
  %110 = load i32, i32* %i, align 4
  %111 = sub i32 %110, 10
  %112 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %113 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %112, i32 0, i32 0
  %114 = getelementptr %dimension_descriptor, %dimension_descriptor* %113, i32 0, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = sub i32 %111, %115
  %117 = mul i32 1, %116
  %118 = add i32 0, %117
  %119 = getelementptr %dimension_descriptor, %dimension_descriptor* %113, i32 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = mul i32 1, %120
  %122 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %123 = getelementptr [4 x double], [4 x double]* %122, i32 0, i32 %118
  %124 = load i32, i32* %i, align 4
  %125 = sitofp i32 %124 to double
  store double %125, double* %123, align 8
  br label %loop.head9

loop.end11:                                       ; preds = %loop.head9
  %126 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %127 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %126, i32 0, i32 0
  %128 = getelementptr %dimension_descriptor, %dimension_descriptor* %127, i32 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = sub i32 1, %129
  %131 = mul i32 1, %130
  %132 = add i32 0, %131
  %133 = getelementptr %dimension_descriptor, %dimension_descriptor* %127, i32 0, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = mul i32 1, %134
  %136 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %137 = getelementptr [4 x double], [4 x double]* %136, i32 0, i32 %132
  %138 = load double, double* %137, align 8
  %139 = fcmp une double %138, 1.100000e+01
  br i1 %139, label %then12, label %else13

then12:                                           ; preds = %loop.end11
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %loop.end11
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  %iftmp15 = phi i32 [ 1, %then12 ], [ 2, %else13 ]
  %140 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %141 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %140, i32 0, i32 0
  %142 = getelementptr %dimension_descriptor, %dimension_descriptor* %141, i32 0, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = sub i32 2, %143
  %145 = mul i32 1, %144
  %146 = add i32 0, %145
  %147 = getelementptr %dimension_descriptor, %dimension_descriptor* %141, i32 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = mul i32 1, %148
  %150 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %151 = getelementptr [4 x double], [4 x double]* %150, i32 0, i32 %146
  %152 = load double, double* %151, align 8
  %153 = fcmp une double %152, 1.200000e+01
  br i1 %153, label %then16, label %else17

then16:                                           ; preds = %ifcont14
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont14
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %iftmp19 = phi i32 [ 1, %then16 ], [ 2, %else17 ]
  %154 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %155 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %154, i32 0, i32 0
  %156 = getelementptr %dimension_descriptor, %dimension_descriptor* %155, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = sub i32 3, %157
  %159 = mul i32 1, %158
  %160 = add i32 0, %159
  %161 = getelementptr %dimension_descriptor, %dimension_descriptor* %155, i32 0, i32 3
  %162 = load i32, i32* %161, align 4
  %163 = mul i32 1, %162
  %164 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %165 = getelementptr [4 x double], [4 x double]* %164, i32 0, i32 %160
  %166 = load double, double* %165, align 8
  %167 = fcmp une double %166, 1.300000e+01
  br i1 %167, label %then20, label %else21

then20:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont22

else21:                                           ; preds = %ifcont18
  br label %ifcont22

ifcont22:                                         ; preds = %else21, %then20
  %iftmp23 = phi i32 [ 1, %then20 ], [ 2, %else21 ]
  %168 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %169 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %168, i32 0, i32 0
  %170 = getelementptr %dimension_descriptor, %dimension_descriptor* %169, i32 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = sub i32 4, %171
  %173 = mul i32 1, %172
  %174 = add i32 0, %173
  %175 = getelementptr %dimension_descriptor, %dimension_descriptor* %169, i32 0, i32 3
  %176 = load i32, i32* %175, align 4
  %177 = mul i32 1, %176
  %178 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %179 = getelementptr [4 x double], [4 x double]* %178, i32 0, i32 %174
  %180 = load double, double* %179, align 8
  %181 = fcmp une double %180, 1.400000e+01
  br i1 %181, label %then24, label %else25

then24:                                           ; preds = %ifcont22
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont26

else25:                                           ; preds = %ifcont22
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %iftmp27 = phi i32 [ 1, %then24 ], [ 2, %else25 ]
  store i32 0, i32* %i, align 4
  br label %loop.head28

loop.head28:                                      ; preds = %loop.body29, %ifcont26
  %182 = load i32, i32* %i, align 4
  %183 = add i32 %182, 1
  %184 = icmp sle i32 %183, 3
  br i1 %184, label %loop.body29, label %loop.end30

loop.body29:                                      ; preds = %loop.head28
  %185 = load i32, i32* %i, align 4
  %186 = add i32 %185, 1
  store i32 %186, i32* %i, align 4
  %187 = load i32, i32* %i, align 4
  %188 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %189 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %188, i32 0, i32 0
  %190 = getelementptr %dimension_descriptor, %dimension_descriptor* %189, i32 0, i32 1
  %191 = load i32, i32* %190, align 4
  %192 = sub i32 %187, %191
  %193 = mul i32 1, %192
  %194 = add i32 0, %193
  %195 = getelementptr %dimension_descriptor, %dimension_descriptor* %189, i32 0, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = mul i32 1, %196
  %198 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %199 = getelementptr [4 x double], [4 x double]* %198, i32 0, i32 %194
  %200 = load i32, i32* %i, align 4
  %201 = getelementptr %array, %array* %a, i32 0, i32 2
  %202 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %201, i32 0, i32 0
  %203 = getelementptr %dimension_descriptor, %dimension_descriptor* %202, i32 0, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = sub i32 %200, %204
  %206 = mul i32 1, %205
  %207 = add i32 0, %206
  %208 = getelementptr %dimension_descriptor, %dimension_descriptor* %202, i32 0, i32 3
  %209 = load i32, i32* %208, align 4
  %210 = mul i32 1, %209
  %211 = getelementptr %array, %array* %a, i32 0, i32 0
  %212 = getelementptr [3 x double], [3 x double]* %211, i32 0, i32 %207
  %213 = load double, double* %212, align 8
  %214 = fsub double %213, 1.000000e+01
  store double %214, double* %199, align 8
  br label %loop.head28

loop.end30:                                       ; preds = %loop.head28
  %215 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %216 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %215, i32 0, i32 0
  %217 = getelementptr %dimension_descriptor, %dimension_descriptor* %216, i32 0, i32 1
  %218 = load i32, i32* %217, align 4
  %219 = sub i32 1, %218
  %220 = mul i32 1, %219
  %221 = add i32 0, %220
  %222 = getelementptr %dimension_descriptor, %dimension_descriptor* %216, i32 0, i32 3
  %223 = load i32, i32* %222, align 4
  %224 = mul i32 1, %223
  %225 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %226 = getelementptr [4 x double], [4 x double]* %225, i32 0, i32 %221
  %227 = load double, double* %226, align 8
  %228 = fcmp une double %227, 1.000000e+00
  br i1 %228, label %then31, label %else32

then31:                                           ; preds = %loop.end30
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %loop.end30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %iftmp34 = phi i32 [ 1, %then31 ], [ 2, %else32 ]
  %229 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %230 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %229, i32 0, i32 0
  %231 = getelementptr %dimension_descriptor, %dimension_descriptor* %230, i32 0, i32 1
  %232 = load i32, i32* %231, align 4
  %233 = sub i32 2, %232
  %234 = mul i32 1, %233
  %235 = add i32 0, %234
  %236 = getelementptr %dimension_descriptor, %dimension_descriptor* %230, i32 0, i32 3
  %237 = load i32, i32* %236, align 4
  %238 = mul i32 1, %237
  %239 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %240 = getelementptr [4 x double], [4 x double]* %239, i32 0, i32 %235
  %241 = load double, double* %240, align 8
  %242 = fcmp une double %241, 2.000000e+00
  br i1 %242, label %then35, label %else36

then35:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont37

else36:                                           ; preds = %ifcont33
  br label %ifcont37

ifcont37:                                         ; preds = %else36, %then35
  %iftmp38 = phi i32 [ 1, %then35 ], [ 2, %else36 ]
  %243 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %244 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %243, i32 0, i32 0
  %245 = getelementptr %dimension_descriptor, %dimension_descriptor* %244, i32 0, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = sub i32 3, %246
  %248 = mul i32 1, %247
  %249 = add i32 0, %248
  %250 = getelementptr %dimension_descriptor, %dimension_descriptor* %244, i32 0, i32 3
  %251 = load i32, i32* %250, align 4
  %252 = mul i32 1, %251
  %253 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %254 = getelementptr [4 x double], [4 x double]* %253, i32 0, i32 %249
  %255 = load double, double* %254, align 8
  %256 = fcmp une double %255, 3.000000e+00
  br i1 %256, label %then39, label %else40

then39:                                           ; preds = %ifcont37
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont41

else40:                                           ; preds = %ifcont37
  br label %ifcont41

ifcont41:                                         ; preds = %else40, %then39
  %iftmp42 = phi i32 [ 1, %then39 ], [ 2, %else40 ]
  %257 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %258 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %257, i32 0, i32 0
  %259 = getelementptr %dimension_descriptor, %dimension_descriptor* %258, i32 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = sub i32 4, %260
  %262 = mul i32 1, %261
  %263 = add i32 0, %262
  %264 = getelementptr %dimension_descriptor, %dimension_descriptor* %258, i32 0, i32 3
  %265 = load i32, i32* %264, align 4
  %266 = mul i32 1, %265
  %267 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %268 = getelementptr [4 x double], [4 x double]* %267, i32 0, i32 %263
  %269 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %270 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %269, i32 0, i32 0
  %271 = getelementptr %dimension_descriptor, %dimension_descriptor* %270, i32 0, i32 1
  %272 = load i32, i32* %271, align 4
  %273 = sub i32 1, %272
  %274 = mul i32 1, %273
  %275 = add i32 0, %274
  %276 = getelementptr %dimension_descriptor, %dimension_descriptor* %270, i32 0, i32 3
  %277 = load i32, i32* %276, align 4
  %278 = mul i32 1, %277
  %279 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %280 = getelementptr [4 x double], [4 x double]* %279, i32 0, i32 %275
  %281 = load double, double* %280, align 8
  %282 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %283 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %282, i32 0, i32 0
  %284 = getelementptr %dimension_descriptor, %dimension_descriptor* %283, i32 0, i32 1
  %285 = load i32, i32* %284, align 4
  %286 = sub i32 2, %285
  %287 = mul i32 1, %286
  %288 = add i32 0, %287
  %289 = getelementptr %dimension_descriptor, %dimension_descriptor* %283, i32 0, i32 3
  %290 = load i32, i32* %289, align 4
  %291 = mul i32 1, %290
  %292 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %293 = getelementptr [4 x double], [4 x double]* %292, i32 0, i32 %288
  %294 = load double, double* %293, align 8
  %295 = fadd double %281, %294
  %296 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %297 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %296, i32 0, i32 0
  %298 = getelementptr %dimension_descriptor, %dimension_descriptor* %297, i32 0, i32 1
  %299 = load i32, i32* %298, align 4
  %300 = sub i32 3, %299
  %301 = mul i32 1, %300
  %302 = add i32 0, %301
  %303 = getelementptr %dimension_descriptor, %dimension_descriptor* %297, i32 0, i32 3
  %304 = load i32, i32* %303, align 4
  %305 = mul i32 1, %304
  %306 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %307 = getelementptr [4 x double], [4 x double]* %306, i32 0, i32 %302
  %308 = load double, double* %307, align 8
  %309 = fadd double %295, %308
  %310 = getelementptr %array, %array* %a, i32 0, i32 2
  %311 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %310, i32 0, i32 0
  %312 = getelementptr %dimension_descriptor, %dimension_descriptor* %311, i32 0, i32 1
  %313 = load i32, i32* %312, align 4
  %314 = sub i32 1, %313
  %315 = mul i32 1, %314
  %316 = add i32 0, %315
  %317 = getelementptr %dimension_descriptor, %dimension_descriptor* %311, i32 0, i32 3
  %318 = load i32, i32* %317, align 4
  %319 = mul i32 1, %318
  %320 = getelementptr %array, %array* %a, i32 0, i32 0
  %321 = getelementptr [3 x double], [3 x double]* %320, i32 0, i32 %316
  %322 = load double, double* %321, align 8
  %323 = fadd double %309, %322
  store double %323, double* %268, align 8
  %324 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %325 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %324, i32 0, i32 0
  %326 = getelementptr %dimension_descriptor, %dimension_descriptor* %325, i32 0, i32 1
  %327 = load i32, i32* %326, align 4
  %328 = sub i32 4, %327
  %329 = mul i32 1, %328
  %330 = add i32 0, %329
  %331 = getelementptr %dimension_descriptor, %dimension_descriptor* %325, i32 0, i32 3
  %332 = load i32, i32* %331, align 4
  %333 = mul i32 1, %332
  %334 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %335 = getelementptr [4 x double], [4 x double]* %334, i32 0, i32 %330
  %336 = load double, double* %335, align 8
  %337 = fcmp une double %336, 1.700000e+01
  br i1 %337, label %then43, label %else44

then43:                                           ; preds = %ifcont41
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont45

else44:                                           ; preds = %ifcont41
  br label %ifcont45

ifcont45:                                         ; preds = %else44, %then43
  %iftmp46 = phi i32 [ 1, %then43 ], [ 2, %else44 ]
  %338 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %339 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %338, i32 0, i32 0
  %340 = getelementptr %dimension_descriptor, %dimension_descriptor* %339, i32 0, i32 1
  %341 = load i32, i32* %340, align 4
  %342 = sub i32 4, %341
  %343 = mul i32 1, %342
  %344 = add i32 0, %343
  %345 = getelementptr %dimension_descriptor, %dimension_descriptor* %339, i32 0, i32 3
  %346 = load i32, i32* %345, align 4
  %347 = mul i32 1, %346
  %348 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %349 = getelementptr [4 x double], [4 x double]* %348, i32 0, i32 %344
  %350 = getelementptr %array, %array* %a, i32 0, i32 2
  %351 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %350, i32 0, i32 0
  %352 = getelementptr %dimension_descriptor, %dimension_descriptor* %351, i32 0, i32 1
  %353 = load i32, i32* %352, align 4
  %354 = sub i32 1, %353
  %355 = mul i32 1, %354
  %356 = add i32 0, %355
  %357 = getelementptr %dimension_descriptor, %dimension_descriptor* %351, i32 0, i32 3
  %358 = load i32, i32* %357, align 4
  %359 = mul i32 1, %358
  %360 = getelementptr %array, %array* %a, i32 0, i32 0
  %361 = getelementptr [3 x double], [3 x double]* %360, i32 0, i32 %356
  %362 = load double, double* %361, align 8
  store double %362, double* %349, align 8
  %363 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %364 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %363, i32 0, i32 0
  %365 = getelementptr %dimension_descriptor, %dimension_descriptor* %364, i32 0, i32 1
  %366 = load i32, i32* %365, align 4
  %367 = sub i32 4, %366
  %368 = mul i32 1, %367
  %369 = add i32 0, %368
  %370 = getelementptr %dimension_descriptor, %dimension_descriptor* %364, i32 0, i32 3
  %371 = load i32, i32* %370, align 4
  %372 = mul i32 1, %371
  %373 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %374 = getelementptr [4 x double], [4 x double]* %373, i32 0, i32 %369
  %375 = load double, double* %374, align 8
  %376 = fcmp une double %375, 1.100000e+01
  br i1 %376, label %then47, label %else48

then47:                                           ; preds = %ifcont45
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont49

else48:                                           ; preds = %ifcont45
  br label %ifcont49

ifcont49:                                         ; preds = %else48, %then47
  %iftmp50 = phi i32 [ 1, %then47 ], [ 2, %else48 ]
  store i32 0, i32* %i, align 4
  br label %loop.head51

loop.head51:                                      ; preds = %loop.end55, %ifcont49
  %377 = load i32, i32* %i, align 4
  %378 = add i32 %377, 1
  %379 = icmp sle i32 %378, 2
  br i1 %379, label %loop.body52, label %loop.end56

loop.body52:                                      ; preds = %loop.head51
  %380 = load i32, i32* %i, align 4
  %381 = add i32 %380, 1
  store i32 %381, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %loop.head53

loop.head53:                                      ; preds = %loop.body54, %loop.body52
  %382 = load i32, i32* %j, align 4
  %383 = add i32 %382, 1
  %384 = icmp sle i32 %383, 2
  br i1 %384, label %loop.body54, label %loop.end55

loop.body54:                                      ; preds = %loop.head53
  %385 = load i32, i32* %j, align 4
  %386 = add i32 %385, 1
  store i32 %386, i32* %j, align 4
  %387 = load i32, i32* %i, align 4
  %388 = load i32, i32* %j, align 4
  %389 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %390 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %389, i32 0, i32 0
  %391 = getelementptr %dimension_descriptor, %dimension_descriptor* %390, i32 0, i32 1
  %392 = load i32, i32* %391, align 4
  %393 = sub i32 %387, %392
  %394 = mul i32 1, %393
  %395 = add i32 0, %394
  %396 = getelementptr %dimension_descriptor, %dimension_descriptor* %390, i32 0, i32 3
  %397 = load i32, i32* %396, align 4
  %398 = mul i32 1, %397
  %399 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %389, i32 0, i32 1
  %400 = getelementptr %dimension_descriptor, %dimension_descriptor* %399, i32 0, i32 1
  %401 = load i32, i32* %400, align 4
  %402 = sub i32 %388, %401
  %403 = mul i32 %398, %402
  %404 = add i32 %395, %403
  %405 = getelementptr %dimension_descriptor, %dimension_descriptor* %399, i32 0, i32 3
  %406 = load i32, i32* %405, align 4
  %407 = mul i32 %398, %406
  %408 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %409 = getelementptr [4 x double], [4 x double]* %408, i32 0, i32 %404
  %410 = load i32, i32* %i, align 4
  %411 = load i32, i32* %j, align 4
  %412 = add i32 %410, %411
  %413 = add i32 %412, 10
  %414 = sitofp i32 %413 to double
  store double %414, double* %409, align 8
  br label %loop.head53

loop.end55:                                       ; preds = %loop.head53
  br label %loop.head51

loop.end56:                                       ; preds = %loop.head51
  %415 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %416 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %415, i32 0, i32 0
  %417 = getelementptr %dimension_descriptor, %dimension_descriptor* %416, i32 0, i32 1
  %418 = load i32, i32* %417, align 4
  %419 = sub i32 1, %418
  %420 = mul i32 1, %419
  %421 = add i32 0, %420
  %422 = getelementptr %dimension_descriptor, %dimension_descriptor* %416, i32 0, i32 3
  %423 = load i32, i32* %422, align 4
  %424 = mul i32 1, %423
  %425 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %415, i32 0, i32 1
  %426 = getelementptr %dimension_descriptor, %dimension_descriptor* %425, i32 0, i32 1
  %427 = load i32, i32* %426, align 4
  %428 = sub i32 1, %427
  %429 = mul i32 %424, %428
  %430 = add i32 %421, %429
  %431 = getelementptr %dimension_descriptor, %dimension_descriptor* %425, i32 0, i32 3
  %432 = load i32, i32* %431, align 4
  %433 = mul i32 %424, %432
  %434 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %435 = getelementptr [4 x double], [4 x double]* %434, i32 0, i32 %430
  %436 = load double, double* %435, align 8
  %437 = fcmp une double %436, 1.200000e+01
  br i1 %437, label %then57, label %else58

then57:                                           ; preds = %loop.end56
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont59

else58:                                           ; preds = %loop.end56
  br label %ifcont59

ifcont59:                                         ; preds = %else58, %then57
  %iftmp60 = phi i32 [ 1, %then57 ], [ 2, %else58 ]
  %438 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %439 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %438, i32 0, i32 0
  %440 = getelementptr %dimension_descriptor, %dimension_descriptor* %439, i32 0, i32 1
  %441 = load i32, i32* %440, align 4
  %442 = sub i32 1, %441
  %443 = mul i32 1, %442
  %444 = add i32 0, %443
  %445 = getelementptr %dimension_descriptor, %dimension_descriptor* %439, i32 0, i32 3
  %446 = load i32, i32* %445, align 4
  %447 = mul i32 1, %446
  %448 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %438, i32 0, i32 1
  %449 = getelementptr %dimension_descriptor, %dimension_descriptor* %448, i32 0, i32 1
  %450 = load i32, i32* %449, align 4
  %451 = sub i32 2, %450
  %452 = mul i32 %447, %451
  %453 = add i32 %444, %452
  %454 = getelementptr %dimension_descriptor, %dimension_descriptor* %448, i32 0, i32 3
  %455 = load i32, i32* %454, align 4
  %456 = mul i32 %447, %455
  %457 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %458 = getelementptr [4 x double], [4 x double]* %457, i32 0, i32 %453
  %459 = load double, double* %458, align 8
  %460 = fcmp une double %459, 1.300000e+01
  br i1 %460, label %then61, label %else62

then61:                                           ; preds = %ifcont59
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont63

else62:                                           ; preds = %ifcont59
  br label %ifcont63

ifcont63:                                         ; preds = %else62, %then61
  %iftmp64 = phi i32 [ 1, %then61 ], [ 2, %else62 ]
  %461 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %462 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %461, i32 0, i32 0
  %463 = getelementptr %dimension_descriptor, %dimension_descriptor* %462, i32 0, i32 1
  %464 = load i32, i32* %463, align 4
  %465 = sub i32 2, %464
  %466 = mul i32 1, %465
  %467 = add i32 0, %466
  %468 = getelementptr %dimension_descriptor, %dimension_descriptor* %462, i32 0, i32 3
  %469 = load i32, i32* %468, align 4
  %470 = mul i32 1, %469
  %471 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %461, i32 0, i32 1
  %472 = getelementptr %dimension_descriptor, %dimension_descriptor* %471, i32 0, i32 1
  %473 = load i32, i32* %472, align 4
  %474 = sub i32 1, %473
  %475 = mul i32 %470, %474
  %476 = add i32 %467, %475
  %477 = getelementptr %dimension_descriptor, %dimension_descriptor* %471, i32 0, i32 3
  %478 = load i32, i32* %477, align 4
  %479 = mul i32 %470, %478
  %480 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %481 = getelementptr [4 x double], [4 x double]* %480, i32 0, i32 %476
  %482 = load double, double* %481, align 8
  %483 = fcmp une double %482, 1.300000e+01
  br i1 %483, label %then65, label %else66

then65:                                           ; preds = %ifcont63
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @14, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont67

else66:                                           ; preds = %ifcont63
  br label %ifcont67

ifcont67:                                         ; preds = %else66, %then65
  %iftmp68 = phi i32 [ 1, %then65 ], [ 2, %else66 ]
  %484 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %485 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %484, i32 0, i32 0
  %486 = getelementptr %dimension_descriptor, %dimension_descriptor* %485, i32 0, i32 1
  %487 = load i32, i32* %486, align 4
  %488 = sub i32 2, %487
  %489 = mul i32 1, %488
  %490 = add i32 0, %489
  %491 = getelementptr %dimension_descriptor, %dimension_descriptor* %485, i32 0, i32 3
  %492 = load i32, i32* %491, align 4
  %493 = mul i32 1, %492
  %494 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %484, i32 0, i32 1
  %495 = getelementptr %dimension_descriptor, %dimension_descriptor* %494, i32 0, i32 1
  %496 = load i32, i32* %495, align 4
  %497 = sub i32 2, %496
  %498 = mul i32 %493, %497
  %499 = add i32 %490, %498
  %500 = getelementptr %dimension_descriptor, %dimension_descriptor* %494, i32 0, i32 3
  %501 = load i32, i32* %500, align 4
  %502 = mul i32 %493, %501
  %503 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %504 = getelementptr [4 x double], [4 x double]* %503, i32 0, i32 %499
  %505 = load double, double* %504, align 8
  %506 = fcmp une double %505, 1.400000e+01
  br i1 %506, label %then69, label %else70

then69:                                           ; preds = %ifcont67
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @15, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont71

else70:                                           ; preds = %ifcont67
  br label %ifcont71

ifcont71:                                         ; preds = %else70, %then69
  %iftmp72 = phi i32 [ 1, %then69 ], [ 2, %else70 ]
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

