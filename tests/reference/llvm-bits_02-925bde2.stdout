; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1

define void @__module_lfortran_intrinsic_bit_mvbits32(i32* %from, i32* %frompos, i32* %len, i32* %to, i32* %topos) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_lfortran_intrinsic_bit_mvbits64(i64* %from, i32* %frompos, i32* %len, i64* %to, i32* %topos) {
.entry:
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i64 @__module_lfortran_intrinsic_bit_not64(i64* %x) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = call i64 @_lfortran_not64(i64 %0)
  store i64 %1, i64* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load i64, i64* %r, align 4
  ret i64 %2
}

declare i64 @_lfortran_not64(i64)

declare i32 @__module_lfortran_intrinsic_builtin_bit_size(i32*)

define i32 @main() {
.entry:
  %all_ones = alloca i64, align 8
  store i64 -1, i64* %all_ones, align 4
  %all_zeros = alloca i64, align 8
  store i64 0, i64* %all_zeros, align 4
  %block_size = alloca i32, align 4
  store i32 64, i32* %block_size, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 64)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0), i64 0)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i64 -1)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
