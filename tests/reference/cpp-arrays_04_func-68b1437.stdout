#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

namespace {
float abs(float a)
{
    float r;
    std::cout << "abs" << std::endl;
    if (a > (float)(0)) {
        r = a;
    } else {
        r = -a;
    }
    return r;
}

float sum(const Kokkos::View<const float*> &a)
{
    int i;
    float r;
    std::cout << "sum" << std::endl;
    r = (float)(0);
    for (i=1; i<=a.extent(0); i++) {
        r = r + a[i-1];
    }
    return r;
}


void main2() {
        Kokkos::View<float[3]> a("a");
        float b;
        a[1-1] = (float)(3);
        a[2-1] = (float)(2);
        a[3-1] = (float)(1);
        b = sum(a);
        if (abs(b - (float)(6)) > 0.000010) {
            std::cerr << "ERROR STOP" << std::endl;
            exit(1);
        }
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
