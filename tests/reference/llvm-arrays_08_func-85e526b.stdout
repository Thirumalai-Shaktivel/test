; ModuleID = 'LFortran'
source_filename = "LFortran"

%size_arg = type { %dimension_descriptor*, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

define i32 @__module_lfortran_intrinsic_builtin_size(%size_arg* %x, i32* %dim, i32* %kind) {
.entry:
  %size = alloca i32, align 4
  %0 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 0
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  store i32 1, i32* %size, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, %3
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %size, align 4
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 %7
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %8, %11
  store i32 %12, i32* %size, align 4
  %13 = add i32 %7, 1
  store i32 %13, i32* %4, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %14 = load i32, i32* %size, align 4
  ret i32 %14
}

define void @copy_from_to(%array* %a, %array* %b) {
.entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = alloca %size_arg, align 8
  %3 = getelementptr %array, %array* %a, i32 0, i32 2
  %4 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %5 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 0
  store %dimension_descriptor* %4, %dimension_descriptor** %5, align 8
  %6 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 1
  %7 = getelementptr %array, %array* %a, i32 0, i32 4
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %6, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = call i32 @__module_lfortran_intrinsic_builtin_size(%size_arg* %2, i32* %9, i32* %10)
  %12 = icmp sle i32 %1, %11
  br i1 %12, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %13 = load i32, i32* %i, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %i, align 4
  %15 = load i32, i32* %i, align 4
  %16 = getelementptr %array, %array* %b, i32 0, i32 2
  %17 = load %dimension_descriptor*, %dimension_descriptor** %16, align 8
  %18 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %17, i32 0
  %19 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = sub i32 %15, %20
  %22 = mul i32 1, %21
  %23 = add i32 0, %22
  %24 = getelementptr %dimension_descriptor, %dimension_descriptor* %18, i32 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = mul i32 1, %25
  %27 = getelementptr %array, %array* %b, i32 0, i32 0
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds i32, i32* %28, i32 %23
  %30 = load i32, i32* %i, align 4
  %31 = getelementptr %array, %array* %a, i32 0, i32 2
  %32 = load %dimension_descriptor*, %dimension_descriptor** %31, align 8
  %33 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %32, i32 0
  %34 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 %30, %35
  %37 = mul i32 1, %36
  %38 = add i32 0, %37
  %39 = getelementptr %dimension_descriptor, %dimension_descriptor* %33, i32 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = mul i32 1, %40
  %42 = getelementptr %array, %array* %a, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds i32, i32* %43, i32 %38
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %29, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

define i1 @verify(%array* %a, %array* %b) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  store i1 true, i1* %r, align 1
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = alloca %size_arg, align 8
  %3 = getelementptr %array, %array* %a, i32 0, i32 2
  %4 = load %dimension_descriptor*, %dimension_descriptor** %3, align 8
  %5 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 0
  store %dimension_descriptor* %4, %dimension_descriptor** %5, align 8
  %6 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 1
  %7 = getelementptr %array, %array* %a, i32 0, i32 4
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %6, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = call i32 @__module_lfortran_intrinsic_builtin_size(%size_arg* %2, i32* %9, i32* %10)
  %12 = icmp sle i32 %1, %11
  br i1 %12, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %13 = load i32, i32* %i, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %i, align 4
  %15 = load i1, i1* %r, align 1
  %16 = load i32, i32* %i, align 4
  %17 = getelementptr %array, %array* %a, i32 0, i32 2
  %18 = load %dimension_descriptor*, %dimension_descriptor** %17, align 8
  %19 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %18, i32 0
  %20 = getelementptr %dimension_descriptor, %dimension_descriptor* %19, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 %16, %21
  %23 = mul i32 1, %22
  %24 = add i32 0, %23
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %19, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = mul i32 1, %26
  %28 = getelementptr %array, %array* %a, i32 0, i32 0
  %29 = load i32*, i32** %28, align 8
  %30 = getelementptr inbounds i32, i32* %29, i32 %24
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %i, align 4
  %33 = getelementptr %array, %array* %b, i32 0, i32 2
  %34 = load %dimension_descriptor*, %dimension_descriptor** %33, align 8
  %35 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %34, i32 0
  %36 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub i32 %32, %37
  %39 = mul i32 1, %38
  %40 = add i32 0, %39
  %41 = getelementptr %dimension_descriptor, %dimension_descriptor* %35, i32 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = mul i32 1, %42
  %44 = getelementptr %array, %array* %b, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = getelementptr inbounds i32, i32* %45, i32 %40
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %31, %47
  %49 = and i1 %15, %48
  store i1 %49, i1* %r, align 1
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %50 = load i1, i1* %r, align 1
  ret i1 %50
}

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %r = alloca i1, align 1
  %x = alloca %array, align 8
  %0 = getelementptr %array, %array* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %x, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %x, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 10, i32* %10, align 4
  %12 = load i32, i32* %10, align 4
  %13 = load i32, i32* %9, align 4
  %14 = sub i32 %12, %13
  %15 = add i32 %14, 1
  store i32 %15, i32* %11, align 4
  %16 = alloca i32, align 4
  store i32 10, i32* %16, align 4
  %17 = getelementptr %array, %array* %x, i32 0, i32 0
  %18 = load i32, i32* %16, align 4
  %19 = alloca i32, i32 %18, align 4
  store i32* %19, i32** %17, align 8
  %y = alloca %array, align 8
  %20 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %20, align 4
  %21 = getelementptr %array, %array* %y, i32 0, i32 2
  %22 = alloca i32, align 4
  store i32 1, i32* %22, align 4
  %23 = load i32, i32* %22, align 4
  %24 = alloca %dimension_descriptor, i32 %23, align 8
  %25 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %25, align 4
  store %dimension_descriptor* %24, %dimension_descriptor** %21, align 8
  %26 = load %dimension_descriptor*, %dimension_descriptor** %21, align 8
  %27 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %26, i32 0
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 0
  %29 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 1
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 2
  %31 = getelementptr %dimension_descriptor, %dimension_descriptor* %27, i32 0, i32 3
  store i32 1, i32* %28, align 4
  store i32 1, i32* %29, align 4
  store i32 10, i32* %30, align 4
  %32 = load i32, i32* %30, align 4
  %33 = load i32, i32* %29, align 4
  %34 = sub i32 %32, %33
  %35 = add i32 %34, 1
  store i32 %35, i32* %31, align 4
  %36 = alloca i32, align 4
  store i32 10, i32* %36, align 4
  %37 = getelementptr %array, %array* %y, i32 0, i32 0
  %38 = load i32, i32* %36, align 4
  %39 = alloca i32, i32 %38, align 4
  store i32* %39, i32** %37, align 8
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %40 = load i32, i32* %i, align 4
  %41 = add i32 %40, 1
  %42 = alloca %size_arg, align 8
  %43 = getelementptr %array, %array* %x, i32 0, i32 2
  %44 = load %dimension_descriptor*, %dimension_descriptor** %43, align 8
  %45 = getelementptr %size_arg, %size_arg* %42, i32 0, i32 0
  store %dimension_descriptor* %44, %dimension_descriptor** %45, align 8
  %46 = getelementptr %size_arg, %size_arg* %42, i32 0, i32 1
  %47 = getelementptr %array, %array* %x, i32 0, i32 4
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %46, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = call i32 @__module_lfortran_intrinsic_builtin_size(%size_arg* %42, i32* %49, i32* %50)
  %52 = icmp sle i32 %41, %51
  br i1 %52, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %53 = load i32, i32* %i, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %i, align 4
  %55 = load i32, i32* %i, align 4
  %56 = getelementptr %array, %array* %x, i32 0, i32 2
  %57 = load %dimension_descriptor*, %dimension_descriptor** %56, align 8
  %58 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %57, i32 0
  %59 = getelementptr %dimension_descriptor, %dimension_descriptor* %58, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = sub i32 %55, %60
  %62 = mul i32 1, %61
  %63 = add i32 0, %62
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %58, i32 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = mul i32 1, %65
  %67 = getelementptr %array, %array* %x, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr inbounds i32, i32* %68, i32 %63
  %70 = load i32, i32* %i, align 4
  store i32 %70, i32* %69, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %71 = alloca %array, align 8
  %72 = alloca %array, align 8
  call void @copy_from_to(%array* %x, %array* %y)
  %73 = alloca %array, align 8
  %74 = alloca %array, align 8
  %75 = call i1 @verify(%array* %x, %array* %y)
  store i1 %75, i1* %r, align 1
  %76 = load i1, i1* %r, align 1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i1 %76)
  %77 = load i1, i1* %r, align 1
  %78 = xor i1 %77, true
  br i1 %78, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
