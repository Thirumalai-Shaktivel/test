; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [3 x i8] c"BC\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"@a\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@4 = private unnamed_addr constant [3 x i8] c"a@\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @main() {
.entry:
  %c = alloca i8*, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8** %c, align 8
  %is_alpha = alloca i1, align 1
  store i1 true, i1* %is_alpha, align 1
  %0 = load i1, i1* %is_alpha, align 1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i1 %0)
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i8** %c, align 8
  store i1 true, i1* %is_alpha, align 1
  %1 = load i1, i1* %is_alpha, align 1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i1 %1)
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i8** %c, align 8
  store i1 true, i1* %is_alpha, align 1
  %2 = load i1, i1* %is_alpha, align 1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i1 %2)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
