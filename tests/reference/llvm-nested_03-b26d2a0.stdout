; ModuleID = 'LFortran'
source_filename = "LFortran"

%b = type { float }

@b_rtd = global %b zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define void @__module_nested_03_a_c() {
.entry:
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 5)
  %0 = load float, float* getelementptr inbounds (%b, %b* @b_rtd, i32 0, i32 0), align 4
  %1 = fpext float %0 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), double %1)
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define void @__module_nested_03_a_b() {
.entry:
  %x = alloca float, align 4
  store float 6.000000e+00, float* %x, align 4
  %0 = load float, float* %x, align 4
  store float %0, float* getelementptr inbounds (%b, %b* @b_rtd, i32 0, i32 0), align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0))
  call void @__module_nested_03_a_c()
  ret void
}

define i32 @main() {
.entry:
  call void @__module_nested_03_a_b()
  ret i32 0
}

