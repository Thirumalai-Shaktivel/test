(TranslationUnit (SymbolTable 1 {main: (Program (SymbolTable 7 {r: (Variable 7 r Local () Default (Integer 4 []) Source Public Required), solver: (ExternalSymbol 7 solver 2 solver recursion_02 solver Public), sub1: (ExternalSymbol 7 sub1 2 sub1 recursion_02 sub1 Public)}) main [recursion_02] [(= (Var 7 r) (FunctionCall 7 sub1 () [(ConstantInteger 3 (Integer 4 [])) (ConstantInteger 3 (Integer 4 []))] [] (Integer 4 []))) (Print () [(ConstantString "r =" (Character 8 [])) (Var 7 r)])]), recursion_02: (Module (SymbolTable 2 {solver: (Function (SymbolTable 3 {f: (Function (SymbolTable 4 {f: (Variable 4 f ReturnVar () Default (Integer 4 []) Source Public Required)}) f [] [] (Var 4 f) Source Public Interface), iter: (Variable 3 iter In () Default (Integer 4 []) Source Public Required), solver: (Variable 3 solver ReturnVar () Default (Integer 4 []) Source Public Required)}) solver [(Var 3 f) (Var 3 iter)] [(Print () [(ConstantString "before:" (Character 8 [])) (FunctionCall 3 f () [] [] (Integer 4 []))]) (= (Var 3 solver) (FunctionCall 2 sub1 () [(ConstantInteger 2 (Integer 4 [])) (BinOp (Var 3 iter) Sub (ConstantInteger 1 (Integer 4 [])) (Integer 4 []))] [] (Integer 4 []))) (Print () [(ConstantString "after:" (Character 8 [])) (FunctionCall 3 f () [] [] (Integer 4 []))])] (Var 3 solver) Source Public Implementation), sub1: (Function (SymbolTable 5 {getx: (Function (SymbolTable 6 {getx: (Variable 6 getx ReturnVar () Default (Integer 4 []) Source Public Required)}) getx [] [(Print () [(ConstantString "x in getx" (Character 8 [])) (Var 5 x)]) (= (Var 6 getx) (Var 5 x))] (Var 6 getx) Source Public Implementation), iter: (Variable 5 iter In () Default (Integer 4 []) Source Public Required), sub1: (Variable 5 sub1 ReturnVar () Default (Integer 4 []) Source Public Required), tmp: (Variable 5 tmp Local () Default (Integer 4 []) Source Public Required), x: (Variable 5 x Local () Default (Integer 4 []) Source Public Required), y: (Variable 5 y In () Default (Integer 4 []) Source Public Required)}) sub1 [(Var 5 y) (Var 5 iter)] [(= (Var 5 x) (Var 5 y)) (Print () [(ConstantString "in sub1" (Character 8 []))]) (If (Compare (Var 5 iter) Eq (ConstantInteger 1 (Integer 4 [])) (Logical 4 [])) [(= (Var 5 sub1) (ConstantInteger 1 (Integer 4 []))) (Return)] []) (= (Var 5 tmp) (FunctionCall 5 getx () [] [] (Integer 4 []))) (= (Var 5 sub1) (FunctionCall 2 solver () [(Var 5 getx) (Var 5 iter)] [] (Integer 4 [])))] (Var 5 sub1) Source Public Implementation)}) recursion_02 [] .false.)}) [])
