; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"d()\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i64 @__module_a_d() {
.entry:
  %d = alloca i64, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0))
  store i64 1, i64* %d, align 4
  %0 = load i64, i64* %d, align 4
  ret i64 %0
}

declare void @_lfortran_printf(i8*, ...)

define i64 @__module_a_b() {
.entry:
  %b = alloca i64, align 8
  %e = alloca i64, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0))
  %0 = call i64 @__module_a_d()
  store i64 %0, i64* %e, align 4
  store i64 0, i64* %b, align 4
  %1 = load i64, i64* %b, align 4
  ret i64 %1
}

define i64 @main() {
.entry:
  %c = alloca i64, align 8
  %0 = call i64 @__module_a_b()
  store i64 %0, i64* %c, align 4
  ret i64 0
}

