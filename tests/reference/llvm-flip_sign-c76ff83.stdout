; ModuleID = 'LFortran'
source_filename = "LFortran"

%c_ptr = type { i32 }

@"~fmaresult@12" = global double 0.000000e+00
@"~fmaresult@14" = global float 0.000000e+00
@"~fmaresult@16" = global float 0.000000e+00
@"~fmaresult@19" = global float 0.000000e+00
@"~fmaresult@5" = global float 0.000000e+00
@"~fmaresult@7" = global double 0.000000e+00
@"~fmaresult@9" = global double 0.000000e+00
@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define void @flipsigni32r32(i32* %signal, float* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %variable, align 4
  %3 = fsub float 0.000000e+00, %2
  store float %3, float* %variable, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define void @fmar32(float* %a, float* %b, float* %c, float* %d) {
.entry:
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  store float %4, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @fmar64(double* %a, double* %b, double* %c, double* %d) {
.entry:
  %0 = load double, double* %a, align 8
  %1 = load double, double* %b, align 8
  %2 = load double, double* %c, align 8
  %3 = fmul double %1, %2
  %4 = fadd double %0, %3
  store double %4, double* %d, align 8
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32*)

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define float @__module_lfortran_intrinsic_math_sabs(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %x, i32* %y) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = sitofp i32 %1 to float
  %3 = load i32, i32* %y, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math2_sfloor(float* %call_arg_value)
  %7 = load i32, i32* %y, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %0, %8
  store i32 %9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %10 = load i32, i32* %r, align 4
  ret i32 %10
}

define i32 @__module_lfortran_intrinsic_math2_sfloor(float* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fptosi float %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %x, align 4
  %5 = fsub float %4, 1.000000e+00
  %6 = fptosi float %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define void @__module_lfortran_intrinsic_optimization_flipsigni32r64(i32* %signal, double* %variable) {
.entry:
  %call_arg_value = alloca i32, align 4
  store i32 2, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %signal, i32* %call_arg_value)
  %1 = icmp eq i32 %0, 1
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %variable, align 8
  %3 = fsub double 0.000000e+00, %2
  store double %3, double* %variable, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void
}

define i32 @main() {
.entry:
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %eps = alloca float, align 4
  store float 0x3EB0C6F7A0000000, float* %eps, align 4
  %number = alloca i32, align 4
  %x = alloca float, align 4
  store i32 123, i32* %number, align 4
  store float 5.500000e+00, float* %x, align 4
  %0 = load i32, i32* %number, align 4
  %1 = shl i32 %0, 31
  %2 = load float, float* %x, align 4
  %3 = bitcast float %2 to i32
  %4 = xor i32 %1, %3
  %5 = bitcast i32 %4 to float
  store float %5, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fsub float %6, -5.500000e+00
  store float %7, float* %call_arg_value, align 4
  %8 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value)
  %9 = load float, float* %eps, align 4
  %10 = fcmp ugt float %8, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store i32 124, i32* %number, align 4
  store float 5.500000e+00, float* %x, align 4
  %11 = load i32, i32* %number, align 4
  %12 = shl i32 %11, 31
  %13 = load float, float* %x, align 4
  %14 = bitcast float %13 to i32
  %15 = xor i32 %12, %14
  %16 = bitcast i32 %15 to float
  store float %16, float* %x, align 4
  %17 = load float, float* %x, align 4
  %18 = fsub float %17, 5.500000e+00
  store float %18, float* %call_arg_value1, align 4
  %19 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value1)
  %20 = load float, float* %eps, align 4
  %21 = fcmp ugt float %19, %20
  br i1 %21, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)
