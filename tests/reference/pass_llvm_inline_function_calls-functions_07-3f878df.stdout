; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%f%s\00", align 1

define float @__module_a_f_a(float* %u) {
.entry:
  %v = alloca float, align 4
  %0 = load float, float* %u, align 4
  %1 = fadd float %0, 1.000000e+00
  store float %1, float* %v, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %v, align 4
  ret float %2
}

define float @__module_b_f_b(float* %x) {
.entry:
  %u_f_a = alloca float, align 4
  %v_f_a = alloca float, align 4
  %y = alloca float, align 4
  %0 = load float, float* %x, align 4
  store float %0, float* %u_f_a, align 4
  %1 = load float, float* %u_f_a, align 4
  %2 = fadd float %1, 1.000000e+00
  store float %2, float* %v_f_a, align 4
  %3 = load float, float* %v_f_a, align 4
  %4 = fadd float %3, 1.000000e+00
  store float %4, float* %y, align 4
  br label %return

return:                                           ; preds = %.entry
  %5 = load float, float* %y, align 4
  ret float %5
}

define float @__module_c_f_c(float* %w) {
.entry:
  %u_f_a_f_b = alloca float, align 4
  %v_f_a_f_b = alloca float, align 4
  %x_f_b = alloca float, align 4
  %y_f_b = alloca float, align 4
  %z = alloca float, align 4
  %0 = load float, float* %w, align 4
  store float %0, float* %x_f_b, align 4
  %1 = load float, float* %x_f_b, align 4
  store float %1, float* %u_f_a_f_b, align 4
  %2 = load float, float* %u_f_a_f_b, align 4
  %3 = fadd float %2, 1.000000e+00
  store float %3, float* %v_f_a_f_b, align 4
  %4 = load float, float* %v_f_a_f_b, align 4
  %5 = fadd float %4, 1.000000e+00
  store float %5, float* %y_f_b, align 4
  %6 = load float, float* %y_f_b, align 4
  %7 = fadd float %6, 1.000000e+00
  store float %7, float* %z, align 4
  br label %return

return:                                           ; preds = %.entry
  %8 = load float, float* %z, align 4
  ret float %8
}

define i32 @main() {
.entry:
  %p = alloca float, align 4
  store float 5.000000e+00, float* %p, align 4
  %q = alloca float, align 4
  %u_f_a_f_b_f_c = alloca float, align 4
  %v_f_a_f_b_f_c = alloca float, align 4
  %w_f_c = alloca float, align 4
  %x_f_b_f_c = alloca float, align 4
  %y_f_b_f_c = alloca float, align 4
  %z_f_c = alloca float, align 4
  %0 = load float, float* %p, align 4
  store float %0, float* %w_f_c, align 4
  %1 = load float, float* %w_f_c, align 4
  store float %1, float* %x_f_b_f_c, align 4
  %2 = load float, float* %x_f_b_f_c, align 4
  store float %2, float* %u_f_a_f_b_f_c, align 4
  %3 = load float, float* %u_f_a_f_b_f_c, align 4
  %4 = fadd float %3, 1.000000e+00
  store float %4, float* %v_f_a_f_b_f_c, align 4
  %5 = load float, float* %v_f_a_f_b_f_c, align 4
  %6 = fadd float %5, 1.000000e+00
  store float %6, float* %y_f_b_f_c, align 4
  %7 = load float, float* %y_f_b_f_c, align 4
  %8 = fadd float %7, 1.000000e+00
  store float %8, float* %z_f_c, align 4
  %9 = load float, float* %z_f_c, align 4
  store float %9, float* %q, align 4
  %10 = load float, float* %q, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), double %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)
