#include <iostream>
#include <string>
#include <vector>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

std::string achar(int i, int kind)
{
    std::string achar;
    return achar;
}

bool allocated(const Kokkos::View<const int*> &x)
{
    bool allocated;
    return allocated;
}

int bit_size(int x)
{
    int bit_size;
    return bit_size;
}

int iachar(std::string c, int kind)
{
    int iachar;
    return iachar;
}

int lbound(const Kokkos::View<const int*> &x, int dim)
{
    int lbound;
    return lbound;
}

int max(int a, int b)
{
    int max;
    return max;
}

int maxval(const Kokkos::View<const int*> &x)
{
    int maxval;
    return maxval;
}

int min(int a, int b)
{
    int min;
    return min;
}

int minval(const Kokkos::View<const int*> &x)
{
    int minval;
    return minval;
}

float real(const Kokkos::View<const int*> &x, int kind)
{
    float real;
    return real;
}

int shape(const Kokkos::View<const int*> &x)
{
    int shape;
    return shape;
}

int sum(const Kokkos::View<const int*> &x)
{
    int sum;
    return sum;
}

float tiny(const Kokkos::View<const int*> &x)
{
    float tiny;
    return tiny;
}

int ubound(const Kokkos::View<const int*> &x, int dim)
{
    int ubound;
    return ubound;
}

void sum_reduce(const Kokkos::View<const float*> &a, float &s)
{
    int n;
    n = a.extent(0);
    s = 0;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, n+1), KOKKOS_LAMBDA(const long i) {
        s = s + a[i-1];
    });
}

