(TranslationUnit (SymbolTable 1 {doloop_02: (Program (SymbolTable 2 {a: (Variable 2 a Local () () Default (Integer 4 []) Source Public Required .false.), b: (Variable 2 b Local () () Default (Integer 4 []) Source Public Required .false.), i: (Variable 2 i Local () () Default (Integer 4 []) Source Public Required .false.), j: (Variable 2 j Local () () Default (Integer 4 []) Source Public Required .false.)}) doloop_02 [] [(= (Var 2 j) (ConstantInteger 0 (Integer 4 [])) () ()) (= (Var 2 a) (ConstantInteger 1 (Integer 4 [])) () ()) (= (Var 2 b) (ConstantInteger 10 (Integer 4 [])) () ()) (DoLoop ((Var 2 i) (Var 2 a) (Var 2 b) ()) [(= (Var 2 j) (BinOp (Var 2 j) Add (Var 2 i) (Integer 4 []) () ()) () ())]) (If (Compare (Var 2 j) NotEq (ConstantInteger 55 (Integer 4 [])) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 a) (ConstantInteger 0 (Integer 4 [])) () ()) (DoLoop ((Var 2 i) (ConstantInteger 1 (Integer 4 [])) (ConstantInteger 10 (Integer 4 [])) ()) [(DoLoop ((Var 2 j) (ConstantInteger 1 (Integer 4 [])) (ConstantInteger 10 (Integer 4 [])) ()) [(= (Var 2 a) (BinOp (BinOp (Var 2 a) Add (BinOp (BinOp (Var 2 i) Sub (ConstantInteger 1 (Integer 4 [])) (Integer 4 []) () ()) Mul (ConstantInteger 10 (Integer 4 [])) (Integer 4 []) () ()) (Integer 4 []) () ()) Add (Var 2 j) (Integer 4 []) () ()) () ())])]) (If (Compare (Var 2 a) NotEq (BinOp (BinOp (ConstantInteger 100 (Integer 4 [])) Mul (ConstantInteger 101 (Integer 4 [])) (Integer 4 []) (ConstantInteger 10100 (Integer 4 [])) ()) Div (ConstantInteger 2 (Integer 4 [])) (Integer 4 []) (ConstantInteger 5050 (Integer 4 [])) ()) (Logical 4 []) () ()) [(ErrorStop ())] []) (= (Var 2 a) (ConstantInteger 0 (Integer 4 [])) () ()) (DoLoop ((Var 2 i) (ConstantInteger 1 (Integer 4 [])) (ConstantInteger 10 (Integer 4 [])) ()) [(DoLoop ((Var 2 j) (ConstantInteger 1 (Integer 4 [])) (Var 2 i) ()) [(= (Var 2 a) (BinOp (Var 2 a) Add (Var 2 j) (Integer 4 []) () ()) () ())])]) (If (Compare (Var 2 a) NotEq (ConstantInteger 220 (Integer 4 [])) (Logical 4 []) () ()) [(ErrorStop ())] [])])}) [])
