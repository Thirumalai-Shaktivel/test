#include <iostream>
#include <string>
#include <vector>
#include <Kokkos_Core.hpp>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

std::string achar(int i, int kind)
{
    std::string achar;
    return achar;
}

bool allocated(const Kokkos::View<const int*> &x)
{
    bool allocated;
    return allocated;
}

int bit_size(int x)
{
    int bit_size;
    return bit_size;
}

int iachar(std::string c, int kind)
{
    int iachar;
    return iachar;
}

int lbound(const Kokkos::View<const int*> &x, int dim)
{
    int lbound;
    return lbound;
}

int max(int a, int b)
{
    int max;
    return max;
}

int maxval(const Kokkos::View<const int*> &x)
{
    int maxval;
    return maxval;
}

int min(int a, int b)
{
    int min;
    return min;
}

int minval(const Kokkos::View<const int*> &x)
{
    int minval;
    return minval;
}

int not(int x)
{
    int not;
    return not;
}

float real(const Kokkos::View<const int*> &x, int kind)
{
    float real;
    return real;
}

int sum(const Kokkos::View<const int*> &x)
{
    int sum;
    return sum;
}

float tiny(const Kokkos::View<const int*> &x)
{
    float tiny;
    return tiny;
}

int ubound(const Kokkos::View<const int*> &x, int dim)
{
    int ubound;
    return ubound;
}

namespace {
int mysum(const Kokkos::View<const int*> &a)
{
    int i;
    int r;
    r = 0;
    for (i=1; i<=a.extent(0); i++) {
        r = r + a[i-1];
    };
    return r;
}


void main2() {
        int i;
        int s;
        Kokkos::View<int[10]> x("x");
        for (i=1; i<=x.extent(0); i++) {
            x[i-1] = i;
        };
        s = mysum(x);
        std::cout << s << std::endl;
        if (s != 55) {
            std::cerr << "ERROR STOP" << std::endl;
            exit(1);
        };
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
