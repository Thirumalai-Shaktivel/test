; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

define void @__module_dflt_intent_foo(float* %c, float* %d) {
.entry:
  %e = alloca float, align 4
  %g = alloca float, align 4
  %0 = call float @__module_dflt_intent_f(float* %c)
  store float %0, float* %e, align 4
  %1 = call float @__module_dflt_intent_f(float* %d)
  store float %1, float* %g, align 4
  ret void
}

define float @__module_dflt_intent_f(float* %x) {
.entry:
  %f = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fmul float 2.000000e+00, %0
  store float %1, float* %f, align 4
  %2 = load float, float* %f, align 4
  %3 = fpext float %2 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), double %3)
  %4 = load float, float* %f, align 4
  ret float %4
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %0 = alloca float, align 4
  store float 0.000000e+00, float* %0, align 4
  %1 = alloca float, align 4
  store float 2.000000e+00, float* %1, align 4
  call void @__module_dflt_intent_foo(float* %0, float* %1)
  ret i32 0
}

