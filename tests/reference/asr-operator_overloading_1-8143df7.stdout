(TranslationUnit (SymbolTable 1 {main: (Program (SymbolTable 5 {bin_add: (ExternalSymbol 5 bin_add 2 bin_add overload_asterisk_m [] bin_add Public), f: (Variable 5 f Local (ConstantLogical .false. (Logical 4 [])) (ConstantLogical .false. (Logical 4 [])) Parameter (Logical 4 []) Source Public Required .false.), logical_and: (ExternalSymbol 5 logical_and 2 logical_and overload_asterisk_m [] logical_and Public), t: (Variable 5 t Local (ConstantLogical .true. (Logical 4 [])) (ConstantLogical .true. (Logical 4 [])) Parameter (Logical 4 []) Source Public Required .false.), ~add: (ExternalSymbol 5 ~add 2 ~add overload_asterisk_m [] ~add Public), ~mul: (ExternalSymbol 5 ~mul 2 ~mul overload_asterisk_m [] ~mul Public)}) main [overload_asterisk_m] [(Print () [(ConstantString "T*T:" (Character 1 4 () [])) (BinOp (Var 5 t) Mul (Var 5 t) (Logical 4 []) () (FunctionCall 5 logical_and () [(Var 5 t) (Var 5 t)] [] (Logical 4 []) () ()))]) (Print () [(ConstantString "T*F:" (Character 1 4 () [])) (BinOp (Var 5 t) Mul (Var 5 f) (Logical 4 []) () (FunctionCall 5 logical_and () [(Var 5 t) (Var 5 f)] [] (Logical 4 []) () ()))]) (Print () [(ConstantString "F*T:" (Character 1 4 () [])) (BinOp (Var 5 f) Mul (Var 5 t) (Logical 4 []) () (FunctionCall 5 logical_and () [(Var 5 f) (Var 5 t)] [] (Logical 4 []) () ()))]) (Print () [(ConstantString "F*F:" (Character 1 4 () [])) (BinOp (Var 5 f) Mul (Var 5 f) (Logical 4 []) () (FunctionCall 5 logical_and () [(Var 5 f) (Var 5 f)] [] (Logical 4 []) () ()))]) (Print () [(ConstantString "T+T:" (Character 1 4 () [])) (BinOp (Var 5 t) Add (Var 5 t) (Logical 4 []) () (FunctionCall 5 bin_add () [(Var 5 t) (Var 5 t)] [] (Integer 4 []) () ()))]) (Print () [(ConstantString "T+F:" (Character 1 4 () [])) (BinOp (Var 5 t) Add (Var 5 f) (Logical 4 []) () (FunctionCall 5 bin_add () [(Var 5 t) (Var 5 f)] [] (Integer 4 []) () ()))]) (Print () [(ConstantString "F+T:" (Character 1 4 () [])) (BinOp (Var 5 f) Add (Var 5 t) (Logical 4 []) () (FunctionCall 5 bin_add () [(Var 5 f) (Var 5 t)] [] (Integer 4 []) () ()))]) (Print () [(ConstantString "F+F:" (Character 1 4 () [])) (BinOp (Var 5 f) Add (Var 5 f) (Logical 4 []) () (FunctionCall 5 bin_add () [(Var 5 f) (Var 5 f)] [] (Integer 4 []) () ()))])]), overload_asterisk_m: (Module (SymbolTable 2 {bin_add: (Function (SymbolTable 4 {bin_add: (Variable 4 bin_add ReturnVar () () Default (Integer 4 []) Source Public Required .false.), log1: (Variable 4 log1 In () () Default (Logical 4 []) Source Public Required .false.), log2: (Variable 4 log2 In () () Default (Logical 4 []) Source Public Required .false.)}) bin_add [(Var 4 log1) (Var 4 log2)] [(If (BoolOp (Var 4 log1) And (Var 4 log2) (Logical 4 []) ()) [(= (Var 4 bin_add) (ConstantInteger 2 (Integer 4 [])))] [(If (BoolOp (UnaryOp Not (Var 4 log1) (Logical 4 []) ()) And (UnaryOp Not (Var 4 log2) (Logical 4 []) ()) (Logical 4 []) ()) [(= (Var 4 bin_add) (ConstantInteger 0 (Integer 4 [])))] [(= (Var 4 bin_add) (ConstantInteger 1 (Integer 4 [])))])])] (Var 4 bin_add) Source Public Implementation ()), logical_and: (Function (SymbolTable 3 {log1: (Variable 3 log1 In () () Default (Logical 4 []) Source Public Required .false.), log2: (Variable 3 log2 In () () Default (Logical 4 []) Source Public Required .false.), logical_and: (Variable 3 logical_and ReturnVar () () Default (Logical 4 []) Source Public Required .false.)}) logical_and [(Var 3 log1) (Var 3 log2)] [(= (Var 3 logical_and) (BoolOp (Var 3 log1) And (Var 3 log2) (Logical 4 []) ()))] (Var 3 logical_and) Source Public Implementation ()), ~add: (CustomOperator 2 ~add [2 bin_add] Public), ~mul: (CustomOperator 2 ~mul [2 logical_and] Public)}) overload_asterisk_m [] .false.)}) [])
