; ModuleID = 'LFortran'
source_filename = "LFortran"

define void @flipsigni32r32(i32* %signal, float* %variable) {
.entry:
  %q = alloca i32, align 4
  %0 = load i32, i32* %signal, align 4
  %1 = udiv i32 %0, 2
  store i32 %1, i32* %q, align 4
  %2 = load i32, i32* %signal, align 4
  %3 = load i32, i32* %q, align 4
  %4 = mul i32 2, %3
  %5 = sub i32 %2, %4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  %7 = load float, float* %variable, align 4
  %8 = fsub float 0.000000e+00, %7
  store float %8, float* %variable, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void

.entry1:                                          ; No predecessors!
  %q2 = alloca i32, align 4
  %9 = load i32, i32* %signal, align 4
  %10 = udiv i32 %9, 2
  store i32 %10, i32* %q2, align 4
  %11 = load i32, i32* %signal, align 4
  %12 = load i32, i32* %q2, align 4
  %13 = mul i32 2, %12
  %14 = sub i32 %11, %13
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %16 = load float, float* %variable, align 4
  %17 = fsub float 0.000000e+00, %16
  store float %17, float* %variable, align 4
  br label %ifcont5

else4:                                            ; preds = %.entry1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  ret void
}

define void @flipsigni32r64(i32* %signal, double* %variable) {
.entry:
  %q = alloca i64, align 8
  %0 = load i32, i32* %signal, align 4
  %1 = udiv i32 %0, 2
  %2 = sext i32 %1 to i64
  store i64 %2, i64* %q, align 4
  %3 = load i32, i32* %signal, align 4
  %4 = load i64, i64* %q, align 4
  %5 = trunc i64 %4 to i32
  %6 = mul i32 2, %5
  %7 = sub i32 %3, %6
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  %9 = load double, double* %variable, align 8
  %10 = fsub double 0.000000e+00, %9
  store double %10, double* %variable, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void

.entry1:                                          ; No predecessors!
  %q2 = alloca i64, align 8
  %11 = load i32, i32* %signal, align 4
  %12 = udiv i32 %11, 2
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %q2, align 4
  %14 = load i32, i32* %signal, align 4
  %15 = load i64, i64* %q2, align 4
  %16 = trunc i64 %15 to i32
  %17 = mul i32 2, %16
  %18 = sub i32 %14, %17
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %20 = load double, double* %variable, align 8
  %21 = fsub double 0.000000e+00, %20
  store double %21, double* %variable, align 8
  br label %ifcont5

else4:                                            ; preds = %.entry1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  ret void
}

define float @fmar32(float* %a, float* %b, float* %c) {
.entry:
  %d = alloca float, align 4
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  store float %4, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %5 = load float, float* %d, align 4
  ret float %5

.entry1:                                          ; No predecessors!
  %d2 = alloca float, align 4
  %6 = load float, float* %a, align 4
  %7 = load float, float* %b, align 4
  %8 = load float, float* %c, align 4
  %9 = fmul float %7, %8
  %10 = fadd float %6, %9
  store float %10, float* %d2, align 4
  br label %return3

return3:                                          ; preds = %.entry1
  %11 = load float, float* %d2, align 4
  ret float %11
}

define double @fmar64(double* %a, double* %b, double* %c) {
.entry:
  %d = alloca double, align 8
  %0 = load double, double* %a, align 8
  %1 = load double, double* %b, align 8
  %2 = load double, double* %c, align 8
  %3 = fmul double %1, %2
  %4 = fadd double %0, %3
  store double %4, double* %d, align 8
  br label %return

return:                                           ; preds = %.entry
  %5 = load double, double* %d, align 8
  ret double %5

.entry1:                                          ; No predecessors!
  %d2 = alloca double, align 8
  %6 = load double, double* %a, align 8
  %7 = load double, double* %b, align 8
  %8 = load double, double* %c, align 8
  %9 = fmul double %7, %8
  %10 = fadd double %6, %9
  store double %10, double* %d2, align 8
  br label %return3

return3:                                          ; preds = %.entry1
  %11 = load double, double* %d2, align 8
  ret double %11
}

define float @__lfortran_evaluate_1() {
.entry:
  %call_arg_value2 = alloca float, align 4
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %__lfortran_evaluate_11 = alloca float, align 4
  %__lfortran_evaluate_12 = alloca float, align 4
  %__lfortran_evaluate_13 = alloca float, align 4
  %__lfortran_evaluate_14 = alloca float, align 4
  %__lfortran_evaluate_15 = alloca float, align 4
  %__lfortran_evaluate_16 = alloca float, align 4
  store float 5.000000e+00, float* %__lfortran_evaluate_11, align 4
  store float 8.000000e+00, float* %__lfortran_evaluate_12, align 4
  store float 1.600000e+01, float* %__lfortran_evaluate_13, align 4
  store float 5.000000e+00, float* %call_arg_value, align 4
  store float 3.000000e+00, float* %call_arg_value1, align 4
  store float 2.000000e+00, float* %call_arg_value2, align 4
  %0 = call float @fmar32(float* %call_arg_value, float* %call_arg_value1, float* %call_arg_value2)
  store float %0, float* %__lfortran_evaluate_14, align 4
  store float 2.000000e+00, float* %__lfortran_evaluate_15, align 4
  store float 6.400000e+01, float* %__lfortran_evaluate_16, align 4
  br label %return

return:                                           ; preds = %.entry
  %1 = load float, float* %__lfortran_evaluate_16, align 4
  ret float %1
}
