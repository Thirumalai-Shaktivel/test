; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [6 x i8] c"tf=0:\00", align 1
@1 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"tf=1:\00", align 1
@3 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1

define void @__module_overload_assignment_m_logical_gets_integer(i1* %tf, i32* %i) {
.entry:
  %0 = load i32, i32* %i, align 4
  %1 = icmp eq i32 %0, 0
  store i1 %1, i1* %tf, align 1
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module_overload_assignment_m_logical_gets_integer_use(i1* %tf, i32* %i) {
.entry:
  call void @__module_overload_assignment_m_logical_gets_integer(i1* %tf, i32* %i)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main() {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %tf = alloca i1, align 1
  store i32 0, i32* %call_arg_value, align 4
  call void @__module_overload_assignment_m_logical_gets_integer(i1* %tf, i32* %call_arg_value)
  %0 = load i1, i1* %tf, align 1
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @0, i32 0, i32 0), i1 %0)
  store i32 1, i32* %call_arg_value1, align 4
  call void @__module_overload_assignment_m_logical_gets_integer(i1* %tf, i32* %call_arg_value1)
  %1 = load i1, i1* %tf, align 1
  call void (i8*, ...) @_lcompilers_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i1 %1)
  ret i32 0
}

declare void @_lcompilers_printf(i8*, ...)
