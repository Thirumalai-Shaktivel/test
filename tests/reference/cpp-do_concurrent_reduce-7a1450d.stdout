#include <iostream>
#include <vector>
#include <Kokkos_Core.hpp>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

float abs(const Kokkos::View<const float*> &x)
{
    float r;
    r = 0;
    return r;
}

bool allocated(const Kokkos::View<const float*> &x)
{
    bool r;
    r = true;
    return r;
}

int lbound(const Kokkos::View<const int*> &x, int dim)
{
    int r;
    return r;
}

int max(int a, int b)
{
    int r;
    r = 0;
    return r;
}

int maxval(const Kokkos::View<const float*> &x)
{
    int r;
    r = 0;
    return r;
}

int min(int a, int b)
{
    int r;
    r = 0;
    return r;
}

int minval(const Kokkos::View<const float*> &x)
{
    int r;
    r = 0;
    return r;
}

float real(int x, int knd)
{
    float r;
    r = 0;
    return r;
}

float sum(const Kokkos::View<const float*> &x)
{
    float r;
    r = 0;
    return r;
}

int ubound(const Kokkos::View<const int*> &x, int dim)
{
    int r;
    return r;
}

void sum_reduce(const Kokkos::View<const float*> &a, float &s)
{
    int N;
    N = a.extent(0);
    s = 0;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, N+1), KOKKOS_LAMBDA(const long i) {
        s = s + a[i-1];
    });
}

