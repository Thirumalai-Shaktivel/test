; ModuleID = 'LFortran'
source_filename = "LFortran"

%b_nstd_types = type { i32*, float* }

@b_nstd_strct = global %b_nstd_types zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @__module_nested_04_a_b(i32* %x) {
.entry:
  %b = alloca i32, align 4
  %y = alloca i32, align 4
  %yy = alloca float, align 4
  store float 0x401A666660000000, float* %yy, align 4
  store float* %yy, float** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 1), align 8
  %0 = load i32, i32* %x, align 4
  store i32 %0, i32* %y, align 4
  store i32* %y, i32** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 0), align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0))
  %1 = alloca i32, align 4
  store i32 6, i32* %1, align 4
  %2 = call i32 @__module_nested_04_a_c(i32* %1)
  store i32 %2, i32* %b, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load i32, i32* %b, align 4
  ret i32 %3
}

define i32 @__module_nested_04_a_c(i32* %z) {
.entry:
  %c = alloca i32, align 4
  %0 = load i32, i32* %z, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %0)
  %1 = load i32*, i32** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 0), align 8
  %2 = load i32, i32* %1, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %2)
  %3 = load float*, float** getelementptr inbounds (%b_nstd_types, %b_nstd_types* @b_nstd_strct, i32 0, i32 1), align 8
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), double %5)
  %6 = load i32, i32* %z, align 4
  store i32 %6, i32* %c, align 4
  br label %return

return:                                           ; preds = %.entry
  %7 = load i32, i32* %c, align 4
  ret i32 %7
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %test = alloca i32, align 4
  %0 = alloca i32, align 4
  store i32 5, i32* %0, align 4
  %1 = call i32 @__module_nested_04_a_b(i32* %0)
  store i32 %1, i32* %test, align 4
  ret i32 0
}
