; ModuleID = 'LFortran'
source_filename = "LFortran"

@y = global i32 0
@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [4 x i8] c"b()\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @__module_a_c(i32* %z) {
.entry:
  %c = alloca i32, align 4
  %0 = load i32, i32* %z, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @y, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %z, align 4
  store i32 %2, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  ret i32 %3
}

declare void @_lfortran_printf(i8*, ...)

define i32 @__module_a_b(i32* %x) {
.entry:
  %b = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  store i32 %0, i32* @y, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0))
  %1 = alloca i32, align 4
  store i32 6, i32* %1, align 4
  %2 = call i32 @__module_a_c(i32* %1)
  store i32 %2, i32* %b, align 4
  %3 = load i32, i32* %b, align 4
  ret i32 %3
}

define i32 @main() {
.entry:
  %test = alloca i32, align 4
  %0 = alloca i32, align 4
  store i32 5, i32* %0, align 4
  %1 = call i32 @__module_a_b(i32* %0)
  store i32 %1, i32* %test, align 4
  ret i32 0
}

