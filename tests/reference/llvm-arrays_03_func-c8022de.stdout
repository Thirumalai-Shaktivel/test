; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, [1 x %dimension_descriptor] }
%dimension_descriptor = type { i32, i32, i32, i32 }
%size_arg = type { %dimension_descriptor*, i32 }
%array_call = type { i32*, i32, [1 x %dimension_descriptor] }
%array.0 = type { [10 x i32], i32, [1 x %dimension_descriptor] }

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i32 @__module_lfortran_intrinsic_array_abs(%array*)

declare i1 @__module_lfortran_intrinsic_array_allocated(%array*)

define i32 @__module_lfortran_intrinsic_array_lbound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %lbound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %lbound, align 4
  %6 = load i32, i32* %lbound, align 4
  ret i32 %6
}

declare i32 @__module_lfortran_intrinsic_array_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_array_maxval(%array*)

declare i32 @__module_lfortran_intrinsic_array_min(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_array_minval(%array*)

declare i32 @__module_lfortran_intrinsic_array_real(%array*, i32*)

define i32 @__module_lfortran_intrinsic_array_size(%size_arg* %x) {
.entry:
  %size = alloca i32, align 4
  %0 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 0
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  store i32 1, i32* %size, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, %3
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %size, align 4
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 %7
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %8, %11
  store i32 %12, i32* %size, align 4
  %13 = add i32 %7, 1
  store i32 %13, i32* %4, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %14 = load i32, i32* %size, align 4
  ret i32 %14
}

declare i32 @__module_lfortran_intrinsic_array_sum(%array*)

define i32 @__module_lfortran_intrinsic_array_ubound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %ubound = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %ubound, align 4
  %6 = load i32, i32* %ubound, align 4
  ret i32 %6
}

define i32 @mysum(%array_call* %a) {
.entry:
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %r, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = alloca %size_arg, align 8
  %3 = getelementptr %array_call, %array_call* %a, i32 0, i32 2
  %4 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %3, i32 0, i32 0
  %5 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 0
  store %dimension_descriptor* %4, %dimension_descriptor** %5, align 8
  %6 = getelementptr %size_arg, %size_arg* %2, i32 0, i32 1
  store i32 1, i32* %6, align 4
  %7 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %2)
  %8 = icmp sle i32 %1, %7
  br i1 %8, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  %11 = load i32, i32* %r, align 4
  %12 = load i32, i32* %i, align 4
  %13 = getelementptr %array_call, %array_call* %a, i32 0, i32 2
  %14 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %13, i32 0, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %12, %16
  %18 = mul i32 1, %17
  %19 = add i32 0, %18
  %20 = getelementptr %dimension_descriptor, %dimension_descriptor* %14, i32 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = mul i32 1, %21
  %23 = getelementptr %array_call, %array_call* %a, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i32 %19
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %11, %26
  store i32 %27, i32* %r, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %28 = load i32, i32* %r, align 4
  ret i32 %28
}

define i32 @main() {
.entry:
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %x = alloca %array.0, align 8
  %0 = getelementptr %array.0, %array.0* %x, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array.0, %array.0* %x, i32 0, i32 2
  %2 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %1, i32 0, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %5 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2
  %6 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 10, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub i32 %7, %8
  %10 = add i32 %9, 1
  store i32 %10, i32* %6, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %11 = load i32, i32* %i, align 4
  %12 = add i32 %11, 1
  %13 = alloca %size_arg, align 8
  %14 = getelementptr %array.0, %array.0* %x, i32 0, i32 2
  %15 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %14, i32 0, i32 0
  %16 = getelementptr %size_arg, %size_arg* %13, i32 0, i32 0
  store %dimension_descriptor* %15, %dimension_descriptor** %16, align 8
  %17 = getelementptr %size_arg, %size_arg* %13, i32 0, i32 1
  store i32 1, i32* %17, align 4
  %18 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %13)
  %19 = icmp sle i32 %12, %18
  br i1 %19, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %20 = load i32, i32* %i, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %i, align 4
  %22 = load i32, i32* %i, align 4
  %23 = getelementptr %array.0, %array.0* %x, i32 0, i32 2
  %24 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %23, i32 0, i32 0
  %25 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %22, %26
  %28 = mul i32 1, %27
  %29 = add i32 0, %28
  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %24, i32 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = mul i32 1, %31
  %33 = getelementptr %array.0, %array.0* %x, i32 0, i32 0
  %34 = getelementptr [10 x i32], [10 x i32]* %33, i32 0, i32 %29
  %35 = load i32, i32* %i, align 4
  store i32 %35, i32* %34, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %36 = alloca %array_call, align 8
  %37 = getelementptr %array.0, %array.0* %x, i32 0, i32 0
  %38 = getelementptr [10 x i32], [10 x i32]* %37, i32 0, i32 0
  %39 = getelementptr %array_call, %array_call* %36, i32 0, i32 0
  store i32* %38, i32** %39, align 8
  %40 = getelementptr %array.0, %array.0* %x, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr %array_call, %array_call* %36, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = getelementptr %array.0, %array.0* %x, i32 0, i32 2
  %44 = load [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %43, align 4
  %45 = getelementptr %array_call, %array_call* %36, i32 0, i32 2
  store [1 x %dimension_descriptor] %44, [1 x %dimension_descriptor]* %45, align 4
  %46 = call i32 @mysum(%array_call* %36)
  store i32 %46, i32* %s, align 4
  %47 = load i32, i32* %s, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %47)
  %48 = load i32, i32* %s, align 4
  %49 = icmp ne i32 %48, 55
  br i1 %49, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

