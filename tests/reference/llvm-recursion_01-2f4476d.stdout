; ModuleID = 'LFortran'
source_filename = "LFortran"

%sub1 = type { i32* }

@n = global i32 0
@x = global i32 0
@sub1_nstd_strct = global %sub1 zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"x = \00", align 1
@2 = private unnamed_addr constant [7 x i8] c"%s %d\0A\00", align 1

define void @__module_recursion_01_sub1(i32* %x) {
.entry:
  store i32* %x, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* @n, align 4
  %2 = icmp slt i32 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %x, align 4
  store i32* %x, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %5 = load i32, i32* %x, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i32 %5)
  call void @__module_recursion_01_sub2()
  call void @__module_recursion_01_sub1(i32* %x)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  ret void
}

define void @__module_recursion_01_sub2() {
.entry:
  %0 = load i32*, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %1 = load i32*, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %2 = load i32, i32* %1, align 4
  %3 = add i32 %2, 1
  store i32 %3, i32* %0, align 4
  store i32* %0, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %4 = load i32*, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  %5 = load i32, i32* %4, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %5)
  %6 = load i32*, i32** getelementptr inbounds (%sub1, %sub1* @sub1_nstd_strct, i32 0, i32 0), align 8
  call void @__module_recursion_01_sub1(i32* %6)
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  store i32 10, i32* @n, align 4
  call void @__module_recursion_01_sub1(i32* @x)
  ret i32 0
}

