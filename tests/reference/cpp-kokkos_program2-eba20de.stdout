#include <iostream>
#include <Kokkos_Core.hpp>

void triad(const Kokkos::View<const float*> &a, const Kokkos::View<const float*> &b, float scalar, const Kokkos::View<float*> &c)
{
    int N;
    N = a.extent(0);
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, N+1), KOKKOS_LAMBDA(const long i) {
        c[i-1] = a[i-1] + scalar*b[i-1];
    });
}

int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    {
        Kokkos::View<float[10000]> a("a");
        Kokkos::View<float[10000]> b("b");
        Kokkos::View<float[10000]> c("c");
        int i;
        int nsize;
        float scalar;
        scalar = 10;
        nsize = a.extent(0);
        Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(1, nsize+1), KOKKOS_LAMBDA(const long i) {
            a[i-1] = 5;
            b[i-1] = 5;
        });
        triad(a, b, scalar, c);
        std::cout << "End Stream Triad" << std::endl;
    }
    Kokkos::finalize();
    return 0;
}
