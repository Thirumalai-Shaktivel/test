; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array.0 = type { i1*, i32, %dimension_descriptor*, i1, i32 }
%array.1 = type { float*, i32, %dimension_descriptor*, i1, i32 }
%c_ptr = type { i32 }
%complex_4 = type { float, float }
%complex_8 = type { double, double }
%array.2 = type { double*, i32, %dimension_descriptor*, i1, i32 }
%array.3 = type { %complex_4*, i32, %dimension_descriptor*, i1, i32 }
%array.4 = type { %complex_8*, i32, %dimension_descriptor*, i1, i32 }
%array.5 = type { i16*, i32, %dimension_descriptor*, i1, i32 }
%array.6 = type { i64*, i32, %dimension_descriptor*, i1, i32 }
%array.7 = type { i8*, i32, %dimension_descriptor*, i1, i32 }

@0 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @asigni32(i32* %x, i32* %y) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  %2 = load i32, i32* %y, align 4
  %3 = icmp sge i32 %2, 0
  %4 = and i1 %1, %3
  %5 = load i32, i32* %x, align 4
  %6 = icmp sle i32 %5, 0
  %7 = load i32, i32* %y, align 4
  %8 = icmp sle i32 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i32, i32* %x, align 4
  store i32 %11, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i32, i32* %x, align 4
  %13 = sub i32 0, %12
  store i32 %13, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i32, i32* %r, align 4
  ret i32 %14

.entry1:                                          ; No predecessors!
  %r2 = alloca i32, align 4
  %15 = load i32, i32* %x, align 4
  %16 = icmp sge i32 %15, 0
  %17 = load i32, i32* %y, align 4
  %18 = icmp sge i32 %17, 0
  %19 = and i1 %16, %18
  %20 = load i32, i32* %x, align 4
  %21 = icmp sle i32 %20, 0
  %22 = load i32, i32* %y, align 4
  %23 = icmp sle i32 %22, 0
  %24 = and i1 %21, %23
  %25 = or i1 %19, %24
  br i1 %25, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %26 = load i32, i32* %x, align 4
  store i32 %26, i32* %r2, align 4
  br label %ifcont5

else4:                                            ; preds = %.entry1
  %27 = load i32, i32* %x, align 4
  %28 = sub i32 0, %27
  store i32 %28, i32* %r2, align 4
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  %29 = load i32, i32* %r2, align 4
  ret i32 %29
}

define i64 @asigni64(i64* %x, i64* %y) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  %2 = load i64, i64* %y, align 4
  %3 = icmp sge i64 %2, 0
  %4 = and i1 %1, %3
  %5 = load i64, i64* %x, align 4
  %6 = icmp sle i64 %5, 0
  %7 = load i64, i64* %y, align 4
  %8 = icmp sle i64 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i64, i64* %x, align 4
  store i64 %11, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i64, i64* %x, align 4
  %13 = sub i64 0, %12
  store i64 %13, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i64, i64* %r, align 4
  ret i64 %14

.entry1:                                          ; No predecessors!
  %r2 = alloca i64, align 8
  %15 = load i64, i64* %x, align 4
  %16 = icmp sge i64 %15, 0
  %17 = load i64, i64* %y, align 4
  %18 = icmp sge i64 %17, 0
  %19 = and i1 %16, %18
  %20 = load i64, i64* %x, align 4
  %21 = icmp sle i64 %20, 0
  %22 = load i64, i64* %y, align 4
  %23 = icmp sle i64 %22, 0
  %24 = and i1 %21, %23
  %25 = or i1 %19, %24
  br i1 %25, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %26 = load i64, i64* %x, align 4
  store i64 %26, i64* %r2, align 4
  br label %ifcont5

else4:                                            ; preds = %.entry1
  %27 = load i64, i64* %x, align 4
  %28 = sub i64 0, %27
  store i64 %28, i64* %r2, align 4
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  %29 = load i64, i64* %r2, align 4
  ret i64 %29
}

define float @asignr32(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = load float, float* %y, align 4
  %3 = fcmp uge float %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load float, float* %x, align 4
  %6 = fcmp ule float %5, 0.000000e+00
  %7 = load float, float* %y, align 4
  %8 = fcmp ule float %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load float, float* %x, align 4
  store float %11, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load float, float* %x, align 4
  %13 = fsub float 0.000000e+00, %12
  store float %13, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load float, float* %r, align 4
  ret float %14

.entry1:                                          ; No predecessors!
  %r2 = alloca float, align 4
  %15 = load float, float* %x, align 4
  %16 = fcmp uge float %15, 0.000000e+00
  %17 = load float, float* %y, align 4
  %18 = fcmp uge float %17, 0.000000e+00
  %19 = and i1 %16, %18
  %20 = load float, float* %x, align 4
  %21 = fcmp ule float %20, 0.000000e+00
  %22 = load float, float* %y, align 4
  %23 = fcmp ule float %22, 0.000000e+00
  %24 = and i1 %21, %23
  %25 = or i1 %19, %24
  br i1 %25, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %26 = load float, float* %x, align 4
  store float %26, float* %r2, align 4
  br label %ifcont5

else4:                                            ; preds = %.entry1
  %27 = load float, float* %x, align 4
  %28 = fsub float 0.000000e+00, %27
  store float %28, float* %r2, align 4
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  %29 = load float, float* %r2, align 4
  ret float %29
}

define double @asignr64(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  %2 = load double, double* %y, align 8
  %3 = fcmp uge double %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load double, double* %x, align 8
  %6 = fcmp ule double %5, 0.000000e+00
  %7 = load double, double* %y, align 8
  %8 = fcmp ule double %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load double, double* %x, align 8
  store double %11, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load double, double* %x, align 8
  %13 = fsub double 0.000000e+00, %12
  store double %13, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load double, double* %r, align 8
  ret double %14

.entry1:                                          ; No predecessors!
  %r2 = alloca double, align 8
  %15 = load double, double* %x, align 8
  %16 = fcmp uge double %15, 0.000000e+00
  %17 = load double, double* %y, align 8
  %18 = fcmp uge double %17, 0.000000e+00
  %19 = and i1 %16, %18
  %20 = load double, double* %x, align 8
  %21 = fcmp ule double %20, 0.000000e+00
  %22 = load double, double* %y, align 8
  %23 = fcmp ule double %22, 0.000000e+00
  %24 = and i1 %21, %23
  %25 = or i1 %19, %24
  br i1 %25, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %26 = load double, double* %x, align 8
  store double %26, double* %r2, align 8
  br label %ifcont5

else4:                                            ; preds = %.entry1
  %27 = load double, double* %x, align 8
  %28 = fsub double 0.000000e+00, %27
  store double %28, double* %r2, align 8
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  %29 = load double, double* %r2, align 8
  ret double %29
}

define void @flipsigni32r32(i32* %signal, float* %variable) {
.entry:
  %q = alloca i32, align 4
  %0 = load i32, i32* %signal, align 4
  %1 = udiv i32 %0, 2
  store i32 %1, i32* %q, align 4
  %2 = load i32, i32* %signal, align 4
  %3 = load i32, i32* %q, align 4
  %4 = mul i32 2, %3
  %5 = sub i32 %2, %4
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %then, label %else

then:                                             ; preds = %.entry
  %7 = load float, float* %variable, align 4
  %8 = fsub float 0.000000e+00, %7
  store float %8, float* %variable, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void

.entry1:                                          ; No predecessors!
  %q2 = alloca i32, align 4
  %9 = load i32, i32* %signal, align 4
  %10 = udiv i32 %9, 2
  store i32 %10, i32* %q2, align 4
  %11 = load i32, i32* %signal, align 4
  %12 = load i32, i32* %q2, align 4
  %13 = mul i32 2, %12
  %14 = sub i32 %11, %13
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %16 = load float, float* %variable, align 4
  %17 = fsub float 0.000000e+00, %16
  store float %17, float* %variable, align 4
  br label %ifcont5

else4:                                            ; preds = %.entry1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  ret void
}

define void @flipsigni32r64(i32* %signal, double* %variable) {
.entry:
  %q = alloca i64, align 8
  %0 = load i32, i32* %signal, align 4
  %1 = udiv i32 %0, 2
  %2 = sext i32 %1 to i64
  store i64 %2, i64* %q, align 4
  %3 = load i32, i32* %signal, align 4
  %4 = load i64, i64* %q, align 4
  %5 = trunc i64 %4 to i32
  %6 = mul i32 2, %5
  %7 = sub i32 %3, %6
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  %9 = load double, double* %variable, align 8
  %10 = fsub double 0.000000e+00, %9
  store double %10, double* %variable, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  ret void

.entry1:                                          ; No predecessors!
  %q2 = alloca i64, align 8
  %11 = load i32, i32* %signal, align 4
  %12 = udiv i32 %11, 2
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %q2, align 4
  %14 = load i32, i32* %signal, align 4
  %15 = load i64, i64* %q2, align 4
  %16 = trunc i64 %15 to i32
  %17 = mul i32 2, %16
  %18 = sub i32 %14, %17
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %then3, label %else4

then3:                                            ; preds = %.entry1
  %20 = load double, double* %variable, align 8
  %21 = fsub double 0.000000e+00, %20
  store double %21, double* %variable, align 8
  br label %ifcont5

else4:                                            ; preds = %.entry1
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return6

return6:                                          ; preds = %ifcont5
  ret void
}

define float @fmar32(float* %a, float* %b, float* %c) {
.entry:
  %d = alloca float, align 4
  %0 = load float, float* %a, align 4
  %1 = load float, float* %b, align 4
  %2 = load float, float* %c, align 4
  %3 = fmul float %1, %2
  %4 = fadd float %0, %3
  store float %4, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %5 = load float, float* %d, align 4
  ret float %5

.entry1:                                          ; No predecessors!
  %d2 = alloca float, align 4
  %6 = load float, float* %a, align 4
  %7 = load float, float* %b, align 4
  %8 = load float, float* %c, align 4
  %9 = fmul float %7, %8
  %10 = fadd float %6, %9
  store float %10, float* %d2, align 4
  br label %return3

return3:                                          ; preds = %.entry1
  %11 = load float, float* %d2, align 4
  ret float %11
}

define double @fmar64(double* %a, double* %b, double* %c) {
.entry:
  %d = alloca double, align 8
  %0 = load double, double* %a, align 8
  %1 = load double, double* %b, align 8
  %2 = load double, double* %c, align 8
  %3 = fmul double %1, %2
  %4 = fadd double %0, %3
  store double %4, double* %d, align 8
  br label %return

return:                                           ; preds = %.entry
  %5 = load double, double* %d, align 8
  ret double %5

.entry1:                                          ; No predecessors!
  %d2 = alloca double, align 8
  %6 = load double, double* %a, align 8
  %7 = load double, double* %b, align 8
  %8 = load double, double* %c, align 8
  %9 = fmul double %7, %8
  %10 = fadd double %6, %9
  store double %10, double* %d2, align 8
  br label %return3

return3:                                          ; preds = %.entry1
  %11 = load double, double* %d2, align 8
  ret double %11
}

define i32 @signfromvaluei32i32(i32* %a, i32* %b) {
.entry:
  %call_arg_value3 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %d = alloca i32, align 4
  %0 = load i32, i32* %a, align 4
  store i32 1, i32* %call_arg_value, align 4
  %1 = call i32 @asigni32(i32* %call_arg_value, i32* %b)
  %2 = mul i32 %0, %1
  store i32 %2, i32* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load i32, i32* %d, align 4
  ret i32 %3

.entry1:                                          ; No predecessors!
  %d2 = alloca i32, align 4
  %4 = load i32, i32* %a, align 4
  store i32 1, i32* %call_arg_value3, align 4
  %5 = call i32 @asigni32(i32* %call_arg_value3, i32* %b)
  %6 = mul i32 %4, %5
  store i32 %6, i32* %d2, align 4
  br label %return4

return4:                                          ; preds = %.entry1
  %7 = load i32, i32* %d2, align 4
  ret i32 %7
}

define i64 @signfromvaluei64i64(i64* %a, i64* %b) {
.entry:
  %call_arg_value3 = alloca i64, align 8
  %call_arg_value = alloca i64, align 8
  %d = alloca i64, align 8
  %0 = load i64, i64* %a, align 4
  store i64 1, i64* %call_arg_value, align 4
  %1 = call i64 @asigni64(i64* %call_arg_value, i64* %b)
  %2 = mul i64 %0, %1
  store i64 %2, i64* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load i64, i64* %d, align 4
  ret i64 %3

.entry1:                                          ; No predecessors!
  %d2 = alloca i64, align 8
  %4 = load i64, i64* %a, align 4
  store i64 1, i64* %call_arg_value3, align 4
  %5 = call i64 @asigni64(i64* %call_arg_value3, i64* %b)
  %6 = mul i64 %4, %5
  store i64 %6, i64* %d2, align 4
  br label %return4

return4:                                          ; preds = %.entry1
  %7 = load i64, i64* %d2, align 4
  ret i64 %7
}

define float @signfromvaluer32r32(float* %a, float* %b) {
.entry:
  %call_arg_value3 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %d = alloca float, align 4
  %0 = load float, float* %a, align 4
  store float 1.000000e+00, float* %call_arg_value, align 4
  %1 = call float @asignr32(float* %call_arg_value, float* %b)
  %2 = fmul float %0, %1
  store float %2, float* %d, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %d, align 4
  ret float %3

.entry1:                                          ; No predecessors!
  %d2 = alloca float, align 4
  %4 = load float, float* %a, align 4
  store float 1.000000e+00, float* %call_arg_value3, align 4
  %5 = call float @asignr32(float* %call_arg_value3, float* %b)
  %6 = fmul float %4, %5
  store float %6, float* %d2, align 4
  br label %return4

return4:                                          ; preds = %.entry1
  %7 = load float, float* %d2, align 4
  ret float %7
}

define double @signfromvaluer64r64(double* %a, double* %b) {
.entry:
  %call_arg_value3 = alloca double, align 8
  %call_arg_value = alloca double, align 8
  %d = alloca double, align 8
  %0 = load double, double* %a, align 8
  store double 1.000000e+00, double* %call_arg_value, align 8
  %1 = call double @asignr64(double* %call_arg_value, double* %b)
  %2 = fmul double %0, %1
  store double %2, double* %d, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load double, double* %d, align 8
  ret double %3

.entry1:                                          ; No predecessors!
  %d2 = alloca double, align 8
  %4 = load double, double* %a, align 8
  store double 1.000000e+00, double* %call_arg_value3, align 8
  %5 = call double @asignr64(double* %call_arg_value3, double* %b)
  %6 = fmul double %4, %5
  store double %6, double* %d2, align 8
  br label %return4

return4:                                          ; preds = %.entry1
  %7 = load double, double* %d2, align 8
  ret double %7
}

declare i8* @__module_lfortran_intrinsic_builtin_achar(i32*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_allocated(%array*)

declare i1 @__module_lfortran_intrinsic_builtin_any(%array.0*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_bit_size(i32*)

declare i8* @__module_lfortran_intrinsic_builtin_char(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_iachar(i8**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_int(%array.1*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_is_iostat_eor(i32*)

declare i32 @__module_lfortran_intrinsic_builtin_lbound(%dimension_descriptor**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_len(i8**, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_maxval(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_min(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_minval(%array*)

declare void @__module_lfortran_intrinsic_builtin_move_alloc(i32*, i32*)

declare i1 @__module_lfortran_intrinsic_builtin_present(i32*)

declare float @__module_lfortran_intrinsic_builtin_real(%array*, i32*)

declare i32 @__module_lfortran_intrinsic_builtin_reshape(%array*, %array*)

declare i32 @__module_lfortran_intrinsic_builtin_shape(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_sum(%array*)

declare float @__module_lfortran_intrinsic_builtin_tiny(%array*)

declare i32 @__module_lfortran_intrinsic_builtin_ubound(%dimension_descriptor**, i32*)

declare i1 @__module_lfortran_intrinsic_iso_c_binding_c_associated(%c_ptr*)

declare void @__module_lfortran_intrinsic_iso_c_binding_c_f_pointer(%c_ptr*, i32**, %array*)

declare i32 @__module_lfortran_intrinsic_iso_c_binding_c_loc(i32*)

define float @__module_lfortran_intrinsic_math_cabs(%complex_4* %x) {
.entry:
  %call_arg_value = alloca float, align 4
  %r = alloca float, align 4
  %0 = load %complex_4, %complex_4* %x, align 4
  %1 = alloca %complex_4, align 8
  store %complex_4 %0, %complex_4* %1, align 4
  %2 = getelementptr %complex_4, %complex_4* %1, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = call float @llvm.pow.f32(float %3, float 2.000000e+00)
  %5 = call float @__module_lfortran_intrinsic_math_caimag(%complex_4* %x)
  %6 = call float @llvm.pow.f32(float %5, float 2.000000e+00)
  %7 = fadd float %4, %6
  store float %7, float* %call_arg_value, align 4
  %8 = call float @__module_lfortran_intrinsic_math_ssqrt(float* %call_arg_value)
  store float %8, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %9 = load float, float* %r, align 4
  ret float %9
}

define %complex_4 @__module_lfortran_intrinsic_math_cacos(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cacos(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cacos(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_cacosh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cacosh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cacosh(<2 x float>)

define float @__module_lfortran_intrinsic_math_caimag(%complex_4* %x) {
.entry:
  %r = alloca float, align 4
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call float @_lfortran_caimag(<2 x float> %1)
  store float %2, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %r, align 4
  ret float %3
}

declare float @_lfortran_caimag(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_casin(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_casin(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_casin(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_casinh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_casinh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_casinh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_catan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_catan(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_catan(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_catanh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_catanh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_catanh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ccos(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ccos(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ccos(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ccosh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ccosh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ccosh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_cexp(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_cexp(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_cexp(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_clog(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_clog(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_clog(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_conjgz32(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_conjgz64(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %0
}

define void @__module_lfortran_intrinsic_math_cpu_time(double* %t) {
.entry:
  call void @_lfortran_cpu_time(double* %t)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_cpu_time(double*)

define i32 @__module_lfortran_intrinsic_math_crange(%complex_4* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 37, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define %complex_4 @__module_lfortran_intrinsic_math_csin(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csin(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csin(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_csinh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csinh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csinh(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_csqrt(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_csqrt(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_csqrt(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ctan(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ctan(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ctan(<2 x float>)

define %complex_4 @__module_lfortran_intrinsic_math_ctanh(%complex_4* %x) {
.entry:
  %r = alloca %complex_4, align 8
  %0 = bitcast %complex_4* %x to <2 x float>*
  %1 = load <2 x float>, <2 x float>* %0, align 8
  %2 = call <2 x float> @_lfortran_ctanh(<2 x float> %1)
  %3 = alloca <2 x float>, align 8
  store <2 x float> %2, <2 x float>* %3, align 8
  %4 = bitcast <2 x float>* %3 to %complex_4*
  %5 = load %complex_4, %complex_4* %4, align 4
  store %complex_4 %5, %complex_4* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %6 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %6
}

declare <2 x float> @_lfortran_ctanh(<2 x float>)

define double @__module_lfortran_intrinsic_math_dabs(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_math_dacos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacos(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacos(double)

define double @__module_lfortran_intrinsic_math_dacosh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dacosh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dacosh(double)

define double @__module_lfortran_intrinsic_math_dasin(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasin(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasin(double)

define double @__module_lfortran_intrinsic_math_dasinh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dasinh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dasinh(double)

define double @__module_lfortran_intrinsic_math_datan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datan(double)

define double @__module_lfortran_intrinsic_math_datan2(double* %y, double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %y, align 8
  %1 = load double, double* %x, align 8
  %2 = call double @_lfortran_datan2(double %0, double %1)
  store double %2, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load double, double* %r, align 8
  ret double %3
}

declare double @_lfortran_datan2(double, double)

define double @__module_lfortran_intrinsic_math_datanh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_datanh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_datanh(double)

define double @__module_lfortran_intrinsic_math_dcos(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcos(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dcos(double)

define double @__module_lfortran_intrinsic_math_dcosh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dcosh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dcosh(double)

define double @__module_lfortran_intrinsic_math_depsilon(double* %x) {
.entry:
  %r = alloca double, align 8
  store double 0x3CB0000000000000, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define double @__module_lfortran_intrinsic_math_derf(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_derf(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_derf(double)

define double @__module_lfortran_intrinsic_math_derfc(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_derfc(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_derfc(double)

define double @__module_lfortran_intrinsic_math_dexp(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dexp(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dexp(double)

define double @__module_lfortran_intrinsic_math_dgamma(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dgamma(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dgamma(double)

define double @__module_lfortran_intrinsic_math_dlog(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog(double)

define double @__module_lfortran_intrinsic_math_dlog10(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog10(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog10(double)

define double @__module_lfortran_intrinsic_math_dlog_gamma(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dlog_gamma(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dlog_gamma(double)

define float @__module_lfortran_intrinsic_math_dotproductr32r32(%array.1* %x, %array.1* %y) {
.entry:
  %r = alloca float, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define double @__module_lfortran_intrinsic_math_dotproductr64r64(%array.2* %x, %array.2* %y) {
.entry:
  %r = alloca double, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define %complex_4 @__module_lfortran_intrinsic_math_dotproductz32z32(%array.3* %x, %array.3* %y) {
.entry:
  %r = alloca %complex_4, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_dotproductz64z64(%array.4* %x, %array.4* %y) {
.entry:
  %r = alloca %complex_8, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %0
}

define void @__module_lfortran_intrinsic_math_dp_rand_num(double* %harvest) {
.entry:
  call void @_lfortran_dp_rand_num(double* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_dp_rand_num(double*)

define i32 @__module_lfortran_intrinsic_math_drange(double* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 307, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define double @__module_lfortran_intrinsic_math_dsin(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsin(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dsin(double)

define double @__module_lfortran_intrinsic_math_dsinh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dsinh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dsinh(double)

define double @__module_lfortran_intrinsic_math_dsqrt(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = call double @llvm.pow.f64(double %2, double 5.000000e-01)
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load double, double* %r, align 8
  ret double %4
}

define double @__module_lfortran_intrinsic_math_dtan(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtan(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtan(double)

define double @__module_lfortran_intrinsic_math_dtanh(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = call double @_lfortran_dtanh(double %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_dtanh(double)

define i16 @__module_lfortran_intrinsic_math_i16abs(i16* %x) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = icmp sge i16 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i16, i16* %x, align 2
  store i16 %2, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i16, i16* %x, align 2
  %4 = sub i16 0, %3
  store i16 %4, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i16, i16* %r, align 2
  ret i16 %5
}

define i32 @__module_lfortran_intrinsic_math_i32range(i32* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define void @__module_lfortran_intrinsic_math_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max) {
.entry:
  call void @_lfortran_i32sys_clock(i32* %count, i32* %count_rate, i32* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i32sys_clock(i32*, i32*, i32*)

define i64 @__module_lfortran_intrinsic_math_i64abs(i64* %x) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i64, i64* %x, align 4
  store i64 %2, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i64, i64* %x, align 4
  %4 = sub i64 0, %3
  store i64 %4, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i64, i64* %r, align 4
  ret i64 %5
}

define i32 @__module_lfortran_intrinsic_math_i64range(i64* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 18, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define void @__module_lfortran_intrinsic_math_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max) {
.entry:
  call void @_lfortran_i64sys_clock(i64* %count, i64* %count_rate, i64* %count_max)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_i64sys_clock(i64*, i64*, i64*)

define i8 @__module_lfortran_intrinsic_math_i8abs(i8* %x) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = icmp sge i8 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i8, i8* %x, align 1
  store i8 %2, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i8, i8* %x, align 1
  %4 = sub i8 0, %3
  store i8 %4, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i8, i8* %r, align 1
  ret i8 %5
}

define i32 @__module_lfortran_intrinsic_math_iabs(i32* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

define i32 @__module_lfortran_intrinsic_math_int16range(i16* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 4, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i32 @__module_lfortran_intrinsic_math_int8range(i8* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 2, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define float @__module_lfortran_intrinsic_math_sabs(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @__module_lfortran_intrinsic_math_sacos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacos(float)

define float @__module_lfortran_intrinsic_math_sacosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sacosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sacosh(float)

define float @__module_lfortran_intrinsic_math_sasin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasin(float)

define float @__module_lfortran_intrinsic_math_sasinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sasinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sasinh(float)

define float @__module_lfortran_intrinsic_math_satan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satan(float)

define float @__module_lfortran_intrinsic_math_satan2(float* %y, float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %y, align 4
  %1 = load float, float* %x, align 4
  %2 = call float @_lfortran_satan2(float %0, float %1)
  store float %2, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %3 = load float, float* %r, align 4
  ret float %3
}

declare float @_lfortran_satan2(float, float)

define float @__module_lfortran_intrinsic_math_satanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_satanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_satanh(float)

define float @__module_lfortran_intrinsic_math_scos(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scos(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scos(float)

define float @__module_lfortran_intrinsic_math_scosh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_scosh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_scosh(float)

define float @__module_lfortran_intrinsic_math_sepsilon(float* %x) {
.entry:
  %r = alloca float, align 4
  store float 0x3E80000000000000, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define float @__module_lfortran_intrinsic_math_serf(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_serf(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_serf(float)

define float @__module_lfortran_intrinsic_math_serfc(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_serfc(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_serfc(float)

define float @__module_lfortran_intrinsic_math_sexp(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sexp(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sexp(float)

define float @__module_lfortran_intrinsic_math_sgamma(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_sgamma(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_sgamma(float)

define i16 @__module_lfortran_intrinsic_math_signi16(i16* %x, i16* %y) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = icmp sge i16 %0, %0
  %2 = load i16, i16* %y, align 2
  %3 = icmp sge i16 %2, %2
  %4 = and i1 %1, %3
  %5 = load i16, i16* %x, align 2
  %6 = icmp sle i16 %5, %5
  %7 = load i16, i16* %y, align 2
  %8 = icmp sle i16 %7, %7
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i16, i16* %x, align 2
  store i16 %11, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i16, i16* %x, align 2
  %13 = sub i16 0, %12
  store i16 %13, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i16, i16* %r, align 2
  ret i16 %14
}

define i32 @__module_lfortran_intrinsic_math_signi32(i32* %x, i32* %y) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  %2 = load i32, i32* %y, align 4
  %3 = icmp sge i32 %2, 0
  %4 = and i1 %1, %3
  %5 = load i32, i32* %x, align 4
  %6 = icmp sle i32 %5, 0
  %7 = load i32, i32* %y, align 4
  %8 = icmp sle i32 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i32, i32* %x, align 4
  store i32 %11, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i32, i32* %x, align 4
  %13 = sub i32 0, %12
  store i32 %13, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i32, i32* %r, align 4
  ret i32 %14
}

define i64 @__module_lfortran_intrinsic_math_signi64(i64* %x, i64* %y) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  %2 = load i64, i64* %y, align 4
  %3 = icmp sge i64 %2, 0
  %4 = and i1 %1, %3
  %5 = load i64, i64* %x, align 4
  %6 = icmp sle i64 %5, 0
  %7 = load i64, i64* %y, align 4
  %8 = icmp sle i64 %7, 0
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i64, i64* %x, align 4
  store i64 %11, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i64, i64* %x, align 4
  %13 = sub i64 0, %12
  store i64 %13, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i64, i64* %r, align 4
  ret i64 %14
}

define i8 @__module_lfortran_intrinsic_math_signi8(i8* %x, i8* %y) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = icmp sge i8 %0, %0
  %2 = load i8, i8* %y, align 1
  %3 = icmp sge i8 %2, %2
  %4 = and i1 %1, %3
  %5 = load i8, i8* %x, align 1
  %6 = icmp sle i8 %5, %5
  %7 = load i8, i8* %y, align 1
  %8 = icmp sle i8 %7, %7
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load i8, i8* %x, align 1
  store i8 %11, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load i8, i8* %x, align 1
  %13 = sub i8 0, %12
  store i8 %13, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load i8, i8* %r, align 1
  ret i8 %14
}

define float @__module_lfortran_intrinsic_math_signr32(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  %2 = load float, float* %y, align 4
  %3 = fcmp uge float %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load float, float* %x, align 4
  %6 = fcmp ule float %5, 0.000000e+00
  %7 = load float, float* %y, align 4
  %8 = fcmp ule float %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load float, float* %x, align 4
  store float %11, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load float, float* %x, align 4
  %13 = fsub float 0.000000e+00, %12
  store float %13, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load float, float* %r, align 4
  ret float %14
}

define double @__module_lfortran_intrinsic_math_signr64(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  %2 = load double, double* %y, align 8
  %3 = fcmp uge double %2, 0.000000e+00
  %4 = and i1 %1, %3
  %5 = load double, double* %x, align 8
  %6 = fcmp ule double %5, 0.000000e+00
  %7 = load double, double* %y, align 8
  %8 = fcmp ule double %7, 0.000000e+00
  %9 = and i1 %6, %8
  %10 = or i1 %4, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  %11 = load double, double* %x, align 8
  store double %11, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %12 = load double, double* %x, align 8
  %13 = fsub double 0.000000e+00, %12
  store double %13, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %14 = load double, double* %r, align 8
  ret double %14
}

define float @__module_lfortran_intrinsic_math_slog(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog(float)

define float @__module_lfortran_intrinsic_math_slog10(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog10(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog10(float)

define float @__module_lfortran_intrinsic_math_slog_gamma(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_slog_gamma(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_slog_gamma(float)

define void @__module_lfortran_intrinsic_math_sp_rand_num(float* %harvest) {
.entry:
  call void @_lfortran_sp_rand_num(float* %harvest)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_sp_rand_num(float*)

define i32 @__module_lfortran_intrinsic_math_srange(float* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 37, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define float @__module_lfortran_intrinsic_math_ssin(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_ssin(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_ssin(float)

define float @__module_lfortran_intrinsic_math_ssinh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_ssinh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_ssinh(float)

define float @__module_lfortran_intrinsic_math_ssqrt(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = call float @llvm.pow.f32(float %2, float 5.000000e-01)
  store float %3, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load float, float* %r, align 4
  ret float %4
}

define float @__module_lfortran_intrinsic_math_stan(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_stan(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_stan(float)

define float @__module_lfortran_intrinsic_math_stanh(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = call float @_lfortran_stanh(float %0)
  store float %1, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %2 = load float, float* %r, align 4
  ret float %2
}

declare float @_lfortran_stanh(float)

define double @__module_lfortran_intrinsic_math_zabs(%complex_8* %x) {
.entry:
  %call_arg_value = alloca double, align 8
  %r = alloca double, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = alloca %complex_8, align 8
  store %complex_8 %0, %complex_8* %1, align 8
  %2 = getelementptr %complex_8, %complex_8* %1, i32 0, i32 0
  %3 = load double, double* %2, align 8
  %4 = call double @llvm.pow.f64(double %3, double 2.000000e+00)
  %5 = call double @__module_lfortran_intrinsic_math_zaimag(%complex_8* %x)
  %6 = call double @llvm.pow.f64(double %5, double 2.000000e+00)
  %7 = fadd double %4, %6
  store double %7, double* %call_arg_value, align 8
  %8 = call double @__module_lfortran_intrinsic_math_dsqrt(double* %call_arg_value)
  store double %8, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %9 = load double, double* %r, align 8
  ret double %9
}

define %complex_8 @__module_lfortran_intrinsic_math_zacos(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacos(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacos(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zacosh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zacosh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zacosh(%complex_8)

define double @__module_lfortran_intrinsic_math_zaimag(%complex_8* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call double @_lfortran_zaimag(%complex_8 %0)
  store double %1, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load double, double* %r, align 8
  ret double %2
}

declare double @_lfortran_zaimag(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasin(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasin(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasin(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zasinh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zasinh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zasinh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatan(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zatanh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zatanh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zatanh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zcos(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zcos(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zcos(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zcosh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zcosh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zcosh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zexp(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zexp(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zexp(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zlog(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zlog(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zlog(%complex_8)

define i32 @__module_lfortran_intrinsic_math_zrange(%complex_8* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 307, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define %complex_8 @__module_lfortran_intrinsic_math_zsin(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsin(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsin(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zsinh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsinh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsinh(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_zsqrt(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_zsqrt(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_zsqrt(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_ztan(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztan(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztan(%complex_8)

define %complex_8 @__module_lfortran_intrinsic_math_ztanh(%complex_8* %x) {
.entry:
  %r = alloca %complex_8, align 8
  %0 = load %complex_8, %complex_8* %x, align 8
  %1 = call %complex_8 @_lfortran_ztanh(%complex_8 %0)
  store %complex_8 %1, %complex_8* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %2 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %2
}

declare %complex_8 @_lfortran_ztanh(%complex_8)

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.pow.f32(float, float) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @__module_lfortran_intrinsic_math3_dfloor_i32(double* %x, i32* %kind) {
.entry:
  %r = alloca i32, align 4
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = fptosi double %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %x, align 8
  %5 = fsub double %4, 1.000000e+00
  %6 = fptosi double %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define i64 @__module_lfortran_intrinsic_math3_dfloor_i64(double* %x, i64* %kind) {
.entry:
  %r = alloca i64, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = fptosi double %2 to i64
  store i64 %3, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %x, align 8
  %5 = fsub double %4, 1.000000e+00
  %6 = fptosi double %5 to i64
  store i64 %6, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i64, i64* %r, align 4
  ret i64 %7
}

define i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %x, i32* %kind) {
.entry:
  %r = alloca i32, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fptosi float %2 to i32
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %x, align 4
  %5 = fsub float %4, 1.000000e+00
  %6 = fptosi float %5 to i32
  store i32 %6, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i32, i32* %r, align 4
  ret i32 %7
}

define i64 @__module_lfortran_intrinsic_math3_sfloor_i64(float* %x, i64* %kind) {
.entry:
  %r = alloca i64, align 8
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fptosi float %2 to i64
  store i64 %3, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %x, align 4
  %5 = fsub float %4, 1.000000e+00
  %6 = fptosi float %5 to i64
  store i64 %6, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %7 = load i64, i64* %r, align 4
  ret i64 %7
}

define float @__module_lfortran_intrinsic_math2_cabs(%complex_4* %x) {
.entry:
  %r = alloca float, align 4
  store float 1.000000e+00, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define double @__module_lfortran_intrinsic_math2_dabs(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fsub double 0.000000e+00, %3
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_math2_daimag(%complex_8* %x) {
.entry:
  %r = alloca double, align 8
  store double 3.000000e+00, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define i32 @__module_lfortran_intrinsic_math2_dceiling(double* %x) {
.entry:
  %call_arg_value = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math3_dfloor_i32(double* %x, i32* %call_arg_value)
  store i32 %0, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = sitofp i32 %1 to double
  %3 = load double, double* %x, align 8
  %4 = fsub double %2, %3
  %5 = fcmp une double %4, 0.000000e+00
  br i1 %5, label %then, label %else

then:                                             ; preds = %.entry
  %6 = load i32, i32* %r, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %8 = load i32, i32* %r, align 4
  ret i32 %8
}

define double @__module_lfortran_intrinsic_math2_dmax(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %y, align 8
  %2 = fcmp ugt double %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %y, align 8
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_math2_dmin(double* %x, double* %y) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %y, align 8
  %2 = fcmp ult double %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load double, double* %y, align 8
  store double %4, double* %r, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %r, align 8
  ret double %5
}

define double @__module_lfortran_intrinsic_math2_dmod(double* %x, double* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca double, align 8
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %x, align 8
  %2 = load double, double* %y, align 8
  %3 = fdiv double %1, %2
  store double %3, double* %call_arg_value, align 8
  store i32 0, i32* %call_arg_value1, align 4
  %4 = call i32 @__module_lfortran_intrinsic_math3_dfloor_i32(double* %call_arg_value, i32* %call_arg_value1)
  %5 = sitofp i32 %4 to double
  %6 = load double, double* %y, align 8
  %7 = fmul double %5, %6
  %8 = fsub double %0, %7
  store double %8, double* %r, align 8
  %9 = load double, double* %x, align 8
  %10 = fcmp ult double %9, 0.000000e+00
  %11 = load double, double* %y, align 8
  %12 = fcmp ult double %11, 0.000000e+00
  %13 = and i1 %10, %12
  br i1 %13, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %14 = load double, double* %x, align 8
  %15 = fcmp ult double %14, 0.000000e+00
  br i1 %15, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %16 = load double, double* %r, align 8
  %17 = load double, double* %y, align 8
  %18 = fsub double %16, %17
  store double %18, double* %r, align 8
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %19 = load double, double* %y, align 8
  %20 = fcmp ult double %19, 0.000000e+00
  br i1 %20, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %21 = load double, double* %r, align 8
  %22 = load double, double* %y, align 8
  %23 = fsub double %21, %22
  store double %23, double* %r, align 8
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %24 = load double, double* %r, align 8
  ret double %24
}

define double @__module_lfortran_intrinsic_math2_dmodulo(double* %x, double* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca double, align 8
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = load double, double* %x, align 8
  %2 = load double, double* %y, align 8
  %3 = fdiv double %1, %2
  store double %3, double* %call_arg_value, align 8
  store i32 0, i32* %call_arg_value1, align 4
  %4 = call i32 @__module_lfortran_intrinsic_math3_dfloor_i32(double* %call_arg_value, i32* %call_arg_value1)
  %5 = sitofp i32 %4 to double
  %6 = load double, double* %y, align 8
  %7 = fmul double %5, %6
  %8 = fsub double %0, %7
  store double %8, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %9 = load double, double* %r, align 8
  ret double %9
}

define i32 @__module_lfortran_intrinsic_math2_dnint(double* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = fadd double %2, 5.000000e-01
  %4 = fptosi double %3 to i32
  store i32 %4, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %5 = load double, double* %x, align 8
  %6 = fsub double %5, 1.000000e+00
  %7 = fadd double %6, 5.000000e-01
  %8 = fptosi double %7 to i32
  store i32 %8, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i32, i32* %r, align 4
  ret i32 %9
}

define double @__module_lfortran_intrinsic_math2_dphuge(double* %x) {
.entry:
  %r = alloca double, align 8
  store double 0x3FFCC359E067A348, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define double @__module_lfortran_intrinsic_math2_dsqrt(double* %x) {
.entry:
  %r = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp uge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  %3 = call double @llvm.pow.f64(double %2, double 5.000000e-01)
  store double %3, double* %r, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load double, double* %r, align 8
  ret double %4
}

define i16 @__module_lfortran_intrinsic_math2_i16abs(i16* %x) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = icmp sge i16 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i16, i16* %x, align 2
  store i16 %2, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i16, i16* %x, align 2
  %4 = sub i16 0, %3
  store i16 %4, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i16, i16* %r, align 2
  ret i16 %5
}

define i16 @__module_lfortran_intrinsic_math2_i16mod(i16* %x, i16* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = load i16, i16* %x, align 2
  %2 = sitofp i16 %1 to float
  %3 = load i16, i16* %y, align 2
  %4 = sitofp i16 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %7 = load i16, i16* %y, align 2
  %8 = sext i16 %7 to i32
  %9 = mul i32 %6, %8
  %10 = trunc i32 %9 to i16
  %11 = sub i16 %0, %10
  store i16 %11, i16* %r, align 2
  %12 = load i16, i16* %x, align 2
  %13 = icmp slt i16 %12, %12
  %14 = load i16, i16* %y, align 2
  %15 = icmp slt i16 %14, %14
  %16 = and i1 %13, %15
  br i1 %16, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %17 = load i16, i16* %x, align 2
  %18 = icmp slt i16 %17, %17
  br i1 %18, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %19 = load i16, i16* %r, align 2
  %20 = load i16, i16* %y, align 2
  %21 = sub i16 %19, %20
  store i16 %21, i16* %r, align 2
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %22 = load i16, i16* %y, align 2
  %23 = icmp slt i16 %22, %22
  br i1 %23, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %24 = load i16, i16* %r, align 2
  %25 = load i16, i16* %y, align 2
  %26 = sub i16 %24, %25
  store i16 %26, i16* %r, align 2
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %27 = load i16, i16* %r, align 2
  ret i16 %27
}

define i32 @__module_lfortran_intrinsic_math2_i32huge(i32* %x) {
.entry:
  %r = alloca i32, align 4
  store i32 2147483647, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i64 @__module_lfortran_intrinsic_math2_i64abs(i64* %x) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = icmp sge i64 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i64, i64* %x, align 4
  store i64 %2, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i64, i64* %x, align 4
  %4 = sub i64 0, %3
  store i64 %4, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i64, i64* %r, align 4
  ret i64 %5
}

define i32 @__module_lfortran_intrinsic_math2_i64mod(i64* %x, i64* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i64, i64* %x, align 4
  %1 = load i64, i64* %x, align 4
  %2 = sitofp i64 %1 to float
  %3 = load i64, i64* %y, align 4
  %4 = sitofp i64 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %7 = load i64, i64* %y, align 4
  %8 = trunc i64 %7 to i32
  %9 = mul i32 %6, %8
  %10 = sext i32 %9 to i64
  %11 = sub i64 %0, %10
  %12 = trunc i64 %11 to i32
  store i32 %12, i32* %r, align 4
  %13 = load i64, i64* %x, align 4
  %14 = icmp slt i64 %13, 0
  %15 = load i64, i64* %y, align 4
  %16 = icmp slt i64 %15, 0
  %17 = and i1 %14, %16
  br i1 %17, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %18 = load i64, i64* %x, align 4
  %19 = icmp slt i64 %18, 0
  br i1 %19, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %20 = load i32, i32* %r, align 4
  %21 = load i64, i64* %y, align 4
  %22 = trunc i64 %21 to i32
  %23 = sub i32 %20, %22
  store i32 %23, i32* %r, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %24 = load i64, i64* %y, align 4
  %25 = icmp slt i64 %24, 0
  br i1 %25, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %26 = load i32, i32* %r, align 4
  %27 = load i64, i64* %y, align 4
  %28 = trunc i64 %27 to i32
  %29 = sub i32 %26, %28
  store i32 %29, i32* %r, align 4
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %30 = load i32, i32* %r, align 4
  ret i32 %30
}

define i8 @__module_lfortran_intrinsic_math2_i8abs(i8* %x) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = icmp sge i8 %0, %0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i8, i8* %x, align 1
  store i8 %2, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i8, i8* %x, align 1
  %4 = sub i8 0, %3
  store i8 %4, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i8, i8* %r, align 1
  ret i8 %5
}

define i8 @__module_lfortran_intrinsic_math2_i8mod(i8* %x, i8* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = load i8, i8* %x, align 1
  %2 = sitofp i8 %1 to float
  %3 = load i8, i8* %y, align 1
  %4 = sitofp i8 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %7 = load i8, i8* %y, align 1
  %8 = sext i8 %7 to i32
  %9 = mul i32 %6, %8
  %10 = trunc i32 %9 to i8
  %11 = sub i8 %0, %10
  store i8 %11, i8* %r, align 1
  %12 = load i8, i8* %x, align 1
  %13 = icmp slt i8 %12, %12
  %14 = load i8, i8* %y, align 1
  %15 = icmp slt i8 %14, %14
  %16 = and i1 %13, %15
  br i1 %16, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %17 = load i8, i8* %x, align 1
  %18 = icmp slt i8 %17, %17
  br i1 %18, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %19 = load i8, i8* %r, align 1
  %20 = load i8, i8* %y, align 1
  %21 = sub i8 %19, %20
  store i8 %21, i8* %r, align 1
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %22 = load i8, i8* %y, align 1
  %23 = icmp slt i8 %22, %22
  br i1 %23, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %24 = load i8, i8* %r, align 1
  %25 = load i8, i8* %y, align 1
  %26 = sub i8 %24, %25
  store i8 %26, i8* %r, align 1
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %27 = load i8, i8* %r, align 1
  ret i8 %27
}

define i32 @__module_lfortran_intrinsic_math2_iabs(i32* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = icmp sge i32 %0, 0
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  %4 = sub i32 0, %3
  store i32 %4, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

define i32 @__module_lfortran_intrinsic_math2_imax(i32* %x, i32* %y) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %y, align 4
  %2 = icmp sgt i32 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i32, i32* %y, align 4
  store i32 %4, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

define i16 @__module_lfortran_intrinsic_math2_imax16(i16* %x, i16* %y) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = load i16, i16* %y, align 2
  %2 = icmp sgt i16 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i16, i16* %x, align 2
  store i16 %3, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i16, i16* %y, align 2
  store i16 %4, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i16, i16* %r, align 2
  ret i16 %5
}

define i64 @__module_lfortran_intrinsic_math2_imax64(i64* %x, i64* %y) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = load i64, i64* %y, align 4
  %2 = icmp sgt i64 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i64, i64* %x, align 4
  store i64 %3, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i64, i64* %y, align 4
  store i64 %4, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i64, i64* %r, align 4
  ret i64 %5
}

define i8 @__module_lfortran_intrinsic_math2_imax8(i8* %x, i8* %y) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = load i8, i8* %y, align 1
  %2 = icmp sgt i8 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i8, i8* %x, align 1
  store i8 %3, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i8, i8* %y, align 1
  store i8 %4, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i8, i8* %r, align 1
  ret i8 %5
}

define i32 @__module_lfortran_intrinsic_math2_imax_6args(i32* %a, i32* %b, i32* %c, i32* %d, i32* %e, i32* %f) {
.entry:
  %args = alloca %array, align 8
  %0 = getelementptr %array, %array* %args, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %args, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %args, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 6, i32* %10, align 4
  %12 = load i32, i32* %10, align 4
  %13 = load i32, i32* %9, align 4
  %14 = sub i32 %12, %13
  %15 = add i32 %14, 1
  store i32 %15, i32* %11, align 4
  %16 = alloca i32, align 4
  store i32 6, i32* %16, align 4
  %17 = getelementptr %array, %array* %args, i32 0, i32 0
  %18 = load i32, i32* %16, align 4
  %19 = alloca i32, i32 %18, align 4
  store i32* %19, i32** %17, align 8
  %curr_value = alloca i32, align 4
  %itr = alloca i32, align 4
  %r = alloca i32, align 4
  %20 = getelementptr %array, %array* %args, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 1, %24
  %26 = mul i32 1, %25
  %27 = add i32 0, %26
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 1, %29
  %31 = getelementptr %array, %array* %args, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds i32, i32* %32, i32 %27
  %34 = load i32, i32* %a, align 4
  store i32 %34, i32* %33, align 4
  %35 = getelementptr %array, %array* %args, i32 0, i32 2
  %36 = load %dimension_descriptor*, %dimension_descriptor** %35, align 8
  %37 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %36, i32 0
  %38 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sub i32 2, %39
  %41 = mul i32 1, %40
  %42 = add i32 0, %41
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 1, %44
  %46 = getelementptr %array, %array* %args, i32 0, i32 0
  %47 = load i32*, i32** %46, align 8
  %48 = getelementptr inbounds i32, i32* %47, i32 %42
  %49 = load i32, i32* %b, align 4
  store i32 %49, i32* %48, align 4
  %50 = getelementptr %array, %array* %args, i32 0, i32 2
  %51 = load %dimension_descriptor*, %dimension_descriptor** %50, align 8
  %52 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %51, i32 0
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 3, %54
  %56 = mul i32 1, %55
  %57 = add i32 0, %56
  %58 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = mul i32 1, %59
  %61 = getelementptr %array, %array* %args, i32 0, i32 0
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr inbounds i32, i32* %62, i32 %57
  %64 = load i32, i32* %c, align 4
  store i32 %64, i32* %63, align 4
  %65 = getelementptr %array, %array* %args, i32 0, i32 2
  %66 = load %dimension_descriptor*, %dimension_descriptor** %65, align 8
  %67 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %66, i32 0
  %68 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = sub i32 4, %69
  %71 = mul i32 1, %70
  %72 = add i32 0, %71
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = mul i32 1, %74
  %76 = getelementptr %array, %array* %args, i32 0, i32 0
  %77 = load i32*, i32** %76, align 8
  %78 = getelementptr inbounds i32, i32* %77, i32 %72
  %79 = load i32, i32* %d, align 4
  store i32 %79, i32* %78, align 4
  %80 = getelementptr %array, %array* %args, i32 0, i32 2
  %81 = load %dimension_descriptor*, %dimension_descriptor** %80, align 8
  %82 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %81, i32 0
  %83 = getelementptr %dimension_descriptor, %dimension_descriptor* %82, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = sub i32 5, %84
  %86 = mul i32 1, %85
  %87 = add i32 0, %86
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %82, i32 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = mul i32 1, %89
  %91 = getelementptr %array, %array* %args, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i32, i32* %92, i32 %87
  %94 = load i32, i32* %e, align 4
  store i32 %94, i32* %93, align 4
  %95 = getelementptr %array, %array* %args, i32 0, i32 2
  %96 = load %dimension_descriptor*, %dimension_descriptor** %95, align 8
  %97 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %96, i32 0
  %98 = getelementptr %dimension_descriptor, %dimension_descriptor* %97, i32 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = sub i32 6, %99
  %101 = mul i32 1, %100
  %102 = add i32 0, %101
  %103 = getelementptr %dimension_descriptor, %dimension_descriptor* %97, i32 0, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = mul i32 1, %104
  %106 = getelementptr %array, %array* %args, i32 0, i32 0
  %107 = load i32*, i32** %106, align 8
  %108 = getelementptr inbounds i32, i32* %107, i32 %102
  %109 = load i32, i32* %f, align 4
  store i32 %109, i32* %108, align 4
  %110 = load i32, i32* %a, align 4
  store i32 %110, i32* %r, align 4
  store i32 0, i32* %itr, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %111 = load i32, i32* %itr, align 4
  %112 = add i32 %111, 1
  %113 = icmp sle i32 %112, 6
  br i1 %113, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %114 = load i32, i32* %itr, align 4
  %115 = add i32 %114, 1
  store i32 %115, i32* %itr, align 4
  %116 = load i32, i32* %itr, align 4
  %117 = getelementptr %array, %array* %args, i32 0, i32 2
  %118 = load %dimension_descriptor*, %dimension_descriptor** %117, align 8
  %119 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %118, i32 0
  %120 = getelementptr %dimension_descriptor, %dimension_descriptor* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = sub i32 %116, %121
  %123 = mul i32 1, %122
  %124 = add i32 0, %123
  %125 = getelementptr %dimension_descriptor, %dimension_descriptor* %119, i32 0, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = mul i32 1, %126
  %128 = getelementptr %array, %array* %args, i32 0, i32 0
  %129 = load i32*, i32** %128, align 8
  %130 = getelementptr inbounds i32, i32* %129, i32 %124
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %curr_value, align 4
  %132 = call i32 @__module_lfortran_intrinsic_math2_imax(i32* %curr_value, i32* %r)
  store i32 %132, i32* %r, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %133 = load i32, i32* %r, align 4
  ret i32 %133
}

define i32 @__module_lfortran_intrinsic_math2_imin(i32* %x, i32* %y) {
.entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %y, align 4
  %2 = icmp slt i32 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i32, i32* %x, align 4
  store i32 %3, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i32, i32* %y, align 4
  store i32 %4, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i32, i32* %r, align 4
  ret i32 %5
}

define i16 @__module_lfortran_intrinsic_math2_imin16(i16* %x, i16* %y) {
.entry:
  %r = alloca i16, align 2
  %0 = load i16, i16* %x, align 2
  %1 = load i16, i16* %y, align 2
  %2 = icmp slt i16 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i16, i16* %x, align 2
  store i16 %3, i16* %r, align 2
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i16, i16* %y, align 2
  store i16 %4, i16* %r, align 2
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i16, i16* %r, align 2
  ret i16 %5
}

define i64 @__module_lfortran_intrinsic_math2_imin64(i64* %x, i64* %y) {
.entry:
  %r = alloca i64, align 8
  %0 = load i64, i64* %x, align 4
  %1 = load i64, i64* %y, align 4
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i64, i64* %x, align 4
  store i64 %3, i64* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i64, i64* %y, align 4
  store i64 %4, i64* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i64, i64* %r, align 4
  ret i64 %5
}

define i8 @__module_lfortran_intrinsic_math2_imin8(i8* %x, i8* %y) {
.entry:
  %r = alloca i8, align 1
  %0 = load i8, i8* %x, align 1
  %1 = load i8, i8* %y, align 1
  %2 = icmp slt i8 %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i8, i8* %x, align 1
  store i8 %3, i8* %r, align 1
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load i8, i8* %y, align 1
  store i8 %4, i8* %r, align 1
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load i8, i8* %r, align 1
  ret i8 %5
}

define i32 @__module_lfortran_intrinsic_math2_imin_6args(i32* %a, i32* %b, i32* %c, i32* %d, i32* %e, i32* %f) {
.entry:
  %args = alloca %array, align 8
  %0 = getelementptr %array, %array* %args, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %args, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %args, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 6, i32* %10, align 4
  %12 = load i32, i32* %10, align 4
  %13 = load i32, i32* %9, align 4
  %14 = sub i32 %12, %13
  %15 = add i32 %14, 1
  store i32 %15, i32* %11, align 4
  %16 = alloca i32, align 4
  store i32 6, i32* %16, align 4
  %17 = getelementptr %array, %array* %args, i32 0, i32 0
  %18 = load i32, i32* %16, align 4
  %19 = alloca i32, i32 %18, align 4
  store i32* %19, i32** %17, align 8
  %curr_value = alloca i32, align 4
  %itr = alloca i32, align 4
  %r = alloca i32, align 4
  %20 = getelementptr %array, %array* %args, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 1, %24
  %26 = mul i32 1, %25
  %27 = add i32 0, %26
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 1, %29
  %31 = getelementptr %array, %array* %args, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds i32, i32* %32, i32 %27
  %34 = load i32, i32* %a, align 4
  store i32 %34, i32* %33, align 4
  %35 = getelementptr %array, %array* %args, i32 0, i32 2
  %36 = load %dimension_descriptor*, %dimension_descriptor** %35, align 8
  %37 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %36, i32 0
  %38 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = sub i32 2, %39
  %41 = mul i32 1, %40
  %42 = add i32 0, %41
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %37, i32 0, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = mul i32 1, %44
  %46 = getelementptr %array, %array* %args, i32 0, i32 0
  %47 = load i32*, i32** %46, align 8
  %48 = getelementptr inbounds i32, i32* %47, i32 %42
  %49 = load i32, i32* %b, align 4
  store i32 %49, i32* %48, align 4
  %50 = getelementptr %array, %array* %args, i32 0, i32 2
  %51 = load %dimension_descriptor*, %dimension_descriptor** %50, align 8
  %52 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %51, i32 0
  %53 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 3, %54
  %56 = mul i32 1, %55
  %57 = add i32 0, %56
  %58 = getelementptr %dimension_descriptor, %dimension_descriptor* %52, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = mul i32 1, %59
  %61 = getelementptr %array, %array* %args, i32 0, i32 0
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr inbounds i32, i32* %62, i32 %57
  %64 = load i32, i32* %c, align 4
  store i32 %64, i32* %63, align 4
  %65 = getelementptr %array, %array* %args, i32 0, i32 2
  %66 = load %dimension_descriptor*, %dimension_descriptor** %65, align 8
  %67 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %66, i32 0
  %68 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = sub i32 4, %69
  %71 = mul i32 1, %70
  %72 = add i32 0, %71
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = mul i32 1, %74
  %76 = getelementptr %array, %array* %args, i32 0, i32 0
  %77 = load i32*, i32** %76, align 8
  %78 = getelementptr inbounds i32, i32* %77, i32 %72
  %79 = load i32, i32* %d, align 4
  store i32 %79, i32* %78, align 4
  %80 = getelementptr %array, %array* %args, i32 0, i32 2
  %81 = load %dimension_descriptor*, %dimension_descriptor** %80, align 8
  %82 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %81, i32 0
  %83 = getelementptr %dimension_descriptor, %dimension_descriptor* %82, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = sub i32 5, %84
  %86 = mul i32 1, %85
  %87 = add i32 0, %86
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %82, i32 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = mul i32 1, %89
  %91 = getelementptr %array, %array* %args, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i32, i32* %92, i32 %87
  %94 = load i32, i32* %e, align 4
  store i32 %94, i32* %93, align 4
  %95 = getelementptr %array, %array* %args, i32 0, i32 2
  %96 = load %dimension_descriptor*, %dimension_descriptor** %95, align 8
  %97 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %96, i32 0
  %98 = getelementptr %dimension_descriptor, %dimension_descriptor* %97, i32 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = sub i32 6, %99
  %101 = mul i32 1, %100
  %102 = add i32 0, %101
  %103 = getelementptr %dimension_descriptor, %dimension_descriptor* %97, i32 0, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = mul i32 1, %104
  %106 = getelementptr %array, %array* %args, i32 0, i32 0
  %107 = load i32*, i32** %106, align 8
  %108 = getelementptr inbounds i32, i32* %107, i32 %102
  %109 = load i32, i32* %f, align 4
  store i32 %109, i32* %108, align 4
  %110 = load i32, i32* %a, align 4
  store i32 %110, i32* %r, align 4
  store i32 0, i32* %itr, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %111 = load i32, i32* %itr, align 4
  %112 = add i32 %111, 1
  %113 = icmp sle i32 %112, 6
  br i1 %113, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %114 = load i32, i32* %itr, align 4
  %115 = add i32 %114, 1
  store i32 %115, i32* %itr, align 4
  %116 = load i32, i32* %itr, align 4
  %117 = getelementptr %array, %array* %args, i32 0, i32 2
  %118 = load %dimension_descriptor*, %dimension_descriptor** %117, align 8
  %119 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %118, i32 0
  %120 = getelementptr %dimension_descriptor, %dimension_descriptor* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = sub i32 %116, %121
  %123 = mul i32 1, %122
  %124 = add i32 0, %123
  %125 = getelementptr %dimension_descriptor, %dimension_descriptor* %119, i32 0, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = mul i32 1, %126
  %128 = getelementptr %array, %array* %args, i32 0, i32 0
  %129 = load i32*, i32** %128, align 8
  %130 = getelementptr inbounds i32, i32* %129, i32 %124
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %curr_value, align 4
  %132 = call i32 @__module_lfortran_intrinsic_math2_imin(i32* %curr_value, i32* %r)
  store i32 %132, i32* %r, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  %133 = load i32, i32* %r, align 4
  ret i32 %133
}

define i32 @__module_lfortran_intrinsic_math2_imod(i32* %x, i32* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = sitofp i32 %1 to float
  %3 = load i32, i32* %y, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %7 = load i32, i32* %y, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %0, %8
  store i32 %9, i32* %r, align 4
  %10 = load i32, i32* %x, align 4
  %11 = icmp slt i32 %10, 0
  %12 = load i32, i32* %y, align 4
  %13 = icmp slt i32 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %15 = load i32, i32* %x, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %y, align 4
  %19 = sub i32 %17, %18
  store i32 %19, i32* %r, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %20 = load i32, i32* %y, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %22 = load i32, i32* %r, align 4
  %23 = load i32, i32* %y, align 4
  %24 = sub i32 %22, %23
  store i32 %24, i32* %r, align 4
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %25 = load i32, i32* %r, align 4
  ret i32 %25
}

define i32 @__module_lfortran_intrinsic_math2_imodulo(i32* %x, i32* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca i32, align 4
  %0 = load i32, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %2 = sitofp i32 %1 to float
  %3 = load i32, i32* %y, align 4
  %4 = sitofp i32 %3 to float
  %5 = fdiv float %2, %4
  store float %5, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %6 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %7 = load i32, i32* %y, align 4
  %8 = mul i32 %6, %7
  %9 = sub i32 %0, %8
  store i32 %9, i32* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %10 = load i32, i32* %r, align 4
  ret i32 %10
}

define i8* @__module_lfortran_intrinsic_math2_mergechar(i8** %tsource, i8** %fsource, %array.0* %mask) {
.entry:
  %r = alloca i8*, align 8
  %0 = call i32 @_lfortran_str_len(i8** %tsource)
  %1 = add i32 %0, 1
  %2 = call i8* (i32, ...) @_lfortran_malloc(i32 %1)
  call void (i32, i8*, ...) @_lfortran_string_init(i32 %1, i8* %2)
  store i8* %2, i8** %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %3 = load i8*, i8** %r, align 8
  ret i8* %3
}

define i16 @__module_lfortran_intrinsic_math2_mergei16(%array.5* %tsource, %array.5* %fsource, %array.0* %mask) {
.entry:
  %r = alloca i16, align 2
  br label %return

return:                                           ; preds = %.entry
  %0 = load i16, i16* %r, align 2
  ret i16 %0
}

define i32 @__module_lfortran_intrinsic_math2_mergei32(%array* %tsource, %array* %fsource, %array.0* %mask) {
.entry:
  %r = alloca i32, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load i32, i32* %r, align 4
  ret i32 %0
}

define i64 @__module_lfortran_intrinsic_math2_mergei64(%array.6* %tsource, %array.6* %fsource, %array.0* %mask) {
.entry:
  %r = alloca i64, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load i64, i64* %r, align 4
  ret i64 %0
}

define i8 @__module_lfortran_intrinsic_math2_mergei8(%array.7* %tsource, %array.7* %fsource, %array.0* %mask) {
.entry:
  %r = alloca i8, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i8, i8* %r, align 1
  ret i8 %0
}

define i1 @__module_lfortran_intrinsic_math2_mergelogical(%array.0* %tsource, %array.0* %fsource, %array.0* %mask) {
.entry:
  %r = alloca i1, align 1
  br label %return

return:                                           ; preds = %.entry
  %0 = load i1, i1* %r, align 1
  ret i1 %0
}

define float @__module_lfortran_intrinsic_math2_merger32(%array.1* %tsource, %array.1* %fsource, %array.0* %mask) {
.entry:
  %r = alloca float, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define double @__module_lfortran_intrinsic_math2_merger64(%array.2* %tsource, %array.2* %fsource, %array.0* %mask) {
.entry:
  %r = alloca double, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

define %complex_4 @__module_lfortran_intrinsic_math2_mergez32(%array.3* %tsource, %array.3* %fsource, %array.0* %mask) {
.entry:
  %r = alloca %complex_4, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_4, %complex_4* %r, align 4
  ret %complex_4 %0
}

define %complex_8 @__module_lfortran_intrinsic_math2_mergez64(%array.4* %tsource, %array.4* %fsource, %array.0* %mask) {
.entry:
  %r = alloca %complex_8, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load %complex_8, %complex_8* %r, align 8
  ret %complex_8 %0
}

define float @__module_lfortran_intrinsic_math2_sabs(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  store float %2, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  %4 = fsub float 0.000000e+00, %3
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @__module_lfortran_intrinsic_math2_saimag(%complex_4* %x) {
.entry:
  %r = alloca float, align 4
  store float 3.000000e+00, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define i32 @__module_lfortran_intrinsic_math2_sceiling(float* %x) {
.entry:
  %call_arg_value = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 0, i32* %call_arg_value, align 4
  %0 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %x, i32* %call_arg_value)
  store i32 %0, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = sitofp i32 %1 to float
  %3 = load float, float* %x, align 4
  %4 = fsub float %2, %3
  %5 = fcmp une float %4, 0.000000e+00
  br i1 %5, label %then, label %else

then:                                             ; preds = %.entry
  %6 = load i32, i32* %r, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %8 = load i32, i32* %r, align 4
  ret i32 %8
}

define float @__module_lfortran_intrinsic_math2_smax(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = load float, float* %y, align 4
  %2 = fcmp ugt float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  store float %3, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %y, align 4
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @__module_lfortran_intrinsic_math2_smin(float* %x, float* %y) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = load float, float* %y, align 4
  %2 = fcmp ult float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load float, float* %x, align 4
  store float %3, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %4 = load float, float* %y, align 4
  store float %4, float* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load float, float* %r, align 4
  ret float %5
}

define float @__module_lfortran_intrinsic_math2_smod(float* %x, float* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = load float, float* %x, align 4
  %2 = load float, float* %y, align 4
  %3 = fdiv float %1, %2
  store float %3, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %4 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %5 = sitofp i32 %4 to float
  %6 = load float, float* %y, align 4
  %7 = fmul float %5, %6
  %8 = fsub float %0, %7
  store float %8, float* %r, align 4
  %9 = load float, float* %x, align 4
  %10 = fcmp ult float %9, 0.000000e+00
  %11 = load float, float* %y, align 4
  %12 = fcmp ult float %11, 0.000000e+00
  %13 = and i1 %10, %12
  br i1 %13, label %then, label %else

then:                                             ; preds = %.entry
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %14 = load float, float* %x, align 4
  %15 = fcmp ult float %14, 0.000000e+00
  br i1 %15, label %then2, label %else3

then2:                                            ; preds = %ifcont
  %16 = load float, float* %r, align 4
  %17 = load float, float* %y, align 4
  %18 = fsub float %16, %17
  store float %18, float* %r, align 4
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  %19 = load float, float* %y, align 4
  %20 = fcmp ult float %19, 0.000000e+00
  br i1 %20, label %then5, label %else6

then5:                                            ; preds = %ifcont4
  %21 = load float, float* %r, align 4
  %22 = load float, float* %y, align 4
  %23 = fsub float %21, %22
  store float %23, float* %r, align 4
  br label %ifcont7

else6:                                            ; preds = %ifcont4
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  br label %return

return:                                           ; preds = %ifcont7, %then
  %24 = load float, float* %r, align 4
  ret float %24
}

define float @__module_lfortran_intrinsic_math2_smodulo(float* %x, float* %y) {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca float, align 4
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = load float, float* %x, align 4
  %2 = load float, float* %y, align 4
  %3 = fdiv float %1, %2
  store float %3, float* %call_arg_value, align 4
  store i32 0, i32* %call_arg_value1, align 4
  %4 = call i32 @__module_lfortran_intrinsic_math3_sfloor_i32(float* %call_arg_value, i32* %call_arg_value1)
  %5 = sitofp i32 %4 to float
  %6 = load float, float* %y, align 4
  %7 = fmul float %5, %6
  %8 = fsub float %0, %7
  store float %8, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %9 = load float, float* %r, align 4
  ret float %9
}

define i32 @__module_lfortran_intrinsic_math2_snint(float* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = fadd float %2, 5.000000e-01
  %4 = fptosi float %3 to i32
  store i32 %4, i32* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  %5 = load float, float* %x, align 4
  %6 = fsub float %5, 1.000000e+00
  %7 = fadd float %6, 5.000000e-01
  %8 = fptosi float %7 to i32
  store i32 %8, i32* %r, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %9 = load i32, i32* %r, align 4
  ret i32 %9
}

define float @__module_lfortran_intrinsic_math2_sphuge(float* %x) {
.entry:
  %r = alloca float, align 4
  store float 0x47EFFFFFE0000000, float* %r, align 4
  br label %return

return:                                           ; preds = %.entry
  %0 = load float, float* %r, align 4
  ret float %0
}

define float @__module_lfortran_intrinsic_math2_ssqrt(float* %x) {
.entry:
  %r = alloca float, align 4
  %0 = load float, float* %x, align 4
  %1 = fcmp uge float %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load float, float* %x, align 4
  %3 = call float @llvm.pow.f32(float %2, float 5.000000e-01)
  store float %3, float* %r, align 4
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %4 = load float, float* %r, align 4
  ret float %4
}

define double @__module_lfortran_intrinsic_math2_zabs(%complex_8* %x) {
.entry:
  %r = alloca double, align 8
  store double 1.000000e+00, double* %r, align 8
  br label %return

return:                                           ; preds = %.entry
  %0 = load double, double* %r, align 8
  ret double %0
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_malloc(i32, ...)

declare void @_lfortran_string_init(i32, i8*, ...)

define i32 @main() {
.entry:
  %call_arg_value1 = alloca float, align 4
  %call_arg_value = alloca float, align 4
  %eps = alloca float, align 4
  store float 0x3EB0C6F7A0000000, float* %eps, align 4
  %number = alloca i32, align 4
  %x = alloca float, align 4
  store i32 123, i32* %number, align 4
  store float 5.500000e+00, float* %x, align 4
  %0 = load i32, i32* %number, align 4
  %1 = shl i32 %0, 31
  %2 = load float, float* %x, align 4
  %3 = bitcast float %2 to i32
  %4 = xor i32 %1, %3
  %5 = bitcast i32 %4 to float
  store float %5, float* %x, align 4
  %6 = load float, float* %x, align 4
  %7 = fsub float %6, -5.500000e+00
  store float %7, float* %call_arg_value, align 4
  %8 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value)
  %9 = load float, float* %eps, align 4
  %10 = fcmp ugt float %8, %9
  br i1 %10, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store i32 124, i32* %number, align 4
  store float 5.500000e+00, float* %x, align 4
  %11 = load i32, i32* %number, align 4
  %12 = shl i32 %11, 31
  %13 = load float, float* %x, align 4
  %14 = bitcast float %13 to i32
  %15 = xor i32 %12, %14
  %16 = bitcast i32 %15 to float
  store float %16, float* %x, align 4
  %17 = load float, float* %x, align 4
  %18 = fsub float %17, 5.500000e+00
  store float %18, float* %call_arg_value1, align 4
  %19 = call float @__module_lfortran_intrinsic_math_sabs(float* %call_arg_value1)
  %20 = load float, float* %eps, align 4
  %21 = fcmp ugt float %19, %20
  br i1 %21, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  ret i32 0
}

attributes #0 = { nounwind readnone speculatable willreturn }
