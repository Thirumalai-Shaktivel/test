; ModuleID = 'LFortran'
source_filename = "LFortran"

%complex = type { float, float }

@0 = private unnamed_addr constant [9 x i8] c"(%f,%f)\0A\00", align 1
@1 = private unnamed_addr constant [9 x i8] c"(%f,%f)\0A\00", align 1
@2 = private unnamed_addr constant [9 x i8] c"(%f,%f)\0A\00", align 1

define i64 @main() {
.entry:
  %x = alloca %complex
  %0 = alloca %complex
  %1 = getelementptr %complex, %complex* %0, i32 0, i32 0
  %2 = getelementptr %complex, %complex* %0, i32 0, i32 1
  store float 3.000000e+00, float* %1
  store float 4.000000e+00, float* %2
  %3 = load %complex, %complex* %0
  store %complex %3, %complex* %x
  %4 = load %complex, %complex* %x
  %5 = alloca %complex
  %6 = getelementptr %complex, %complex* %5, i32 0, i32 0
  %7 = getelementptr %complex, %complex* %5, i32 0, i32 1
  store float 4.000000e+00, float* %6
  store float 0.000000e+00, float* %7
  %8 = load %complex, %complex* %5
  %9 = alloca %complex
  store %complex %4, %complex* %9
  %10 = alloca %complex
  store %complex %8, %complex* %10
  %11 = alloca %complex
  call void (%complex*, %complex*, %complex*, ...) @_lfortran_complex_div(%complex* %9, %complex* %10, %complex* %11)
  %12 = load %complex, %complex* %11
  store %complex %12, %complex* %x
  %13 = load %complex, %complex* %x
  %14 = alloca %complex
  store %complex %13, %complex* %14
  %15 = getelementptr %complex, %complex* %14, i32 0, i32 0
  %16 = load float, float* %15
  %17 = fpext float %16 to double
  %18 = alloca %complex
  store %complex %13, %complex* %18
  %19 = getelementptr %complex, %complex* %18, i32 0, i32 1
  %20 = load float, float* %19
  %21 = fpext float %20 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i32 0, i32 0), double %17, double %21)
  %22 = alloca %complex
  %23 = getelementptr %complex, %complex* %22, i32 0, i32 0
  %24 = getelementptr %complex, %complex* %22, i32 0, i32 1
  store float 2.000000e+00, float* %23
  store float 0.000000e+00, float* %24
  %25 = load %complex, %complex* %22
  %26 = load %complex, %complex* %x
  %27 = alloca %complex
  store %complex %25, %complex* %27
  %28 = alloca %complex
  store %complex %26, %complex* %28
  %29 = alloca %complex
  call void (%complex*, %complex*, %complex*, ...) @_lfortran_complex_div(%complex* %27, %complex* %28, %complex* %29)
  %30 = load %complex, %complex* %29
  store %complex %30, %complex* %x
  %31 = load %complex, %complex* %x
  %32 = alloca %complex
  store %complex %31, %complex* %32
  %33 = getelementptr %complex, %complex* %32, i32 0, i32 0
  %34 = load float, float* %33
  %35 = fpext float %34 to double
  %36 = alloca %complex
  store %complex %31, %complex* %36
  %37 = getelementptr %complex, %complex* %36, i32 0, i32 1
  %38 = load float, float* %37
  %39 = fpext float %38 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1, i32 0, i32 0), double %35, double %39)
  %40 = alloca %complex
  %41 = getelementptr %complex, %complex* %40, i32 0, i32 0
  %42 = getelementptr %complex, %complex* %40, i32 0, i32 1
  store float 1.000000e+00, float* %41
  store float 0.000000e+00, float* %42
  %43 = load %complex, %complex* %40
  %44 = load %complex, %complex* %x
  %45 = alloca %complex
  %46 = getelementptr %complex, %complex* %45, i32 0, i32 0
  %47 = getelementptr %complex, %complex* %45, i32 0, i32 1
  store float 0.000000e+00, float* %46
  store float 3.000000e+00, float* %47
  %48 = load %complex, %complex* %45
  %49 = alloca %complex
  store %complex %44, %complex* %49
  %50 = alloca %complex
  store %complex %48, %complex* %50
  %51 = alloca %complex
  call void (%complex*, %complex*, %complex*, ...) @_lfortran_complex_add(%complex* %49, %complex* %50, %complex* %51)
  %52 = load %complex, %complex* %51
  %53 = alloca %complex
  store %complex %43, %complex* %53
  %54 = alloca %complex
  store %complex %52, %complex* %54
  %55 = alloca %complex
  call void (%complex*, %complex*, %complex*, ...) @_lfortran_complex_div(%complex* %53, %complex* %54, %complex* %55)
  %56 = load %complex, %complex* %55
  store %complex %56, %complex* %x
  %57 = load %complex, %complex* %x
  %58 = alloca %complex
  store %complex %57, %complex* %58
  %59 = getelementptr %complex, %complex* %58, i32 0, i32 0
  %60 = load float, float* %59
  %61 = fpext float %60 to double
  %62 = alloca %complex
  store %complex %57, %complex* %62
  %63 = getelementptr %complex, %complex* %62, i32 0, i32 1
  %64 = load float, float* %63
  %65 = fpext float %64 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @2, i32 0, i32 0), double %61, double %65)
  ret i64 0
}

declare void @_lfortran_complex_div(%complex*, %complex*, %complex*, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lfortran_complex_add(%complex*, %complex*, %complex*, ...)

