; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [13 x i8] c"early return\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@2 = private unnamed_addr constant [14 x i8] c"normal return\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@4 = private unnamed_addr constant [13 x i8] c"main1 called\00", align 1
@5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

define i32 @main1() {
.entry:
  %i = alloca i32, align 4
  store i32 10, i32* %i, align 4
  %main1 = alloca i32, align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %.entry
  store i32 10, i32* %main1, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i32 0, i32 0))
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i32 0, i32 0))
  store i32 10, i32* %main1, align 4
  br label %return

return:                                           ; preds = %ifcont, %then
  %0 = load i32, i32* %main1, align 4
  ret i32 %0
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  %main_out = alloca i32, align 4
  %0 = call i32 @main1()
  store i32 %0, i32* %main_out, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @4, i32 0, i32 0))
  ret i32 0
}
