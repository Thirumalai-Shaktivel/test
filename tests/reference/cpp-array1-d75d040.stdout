#include <iostream>
#include <string>
#include <vector>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

namespace {

void main2() {
        bool a;
        Kokkos::View<bool[2]> b("b");
        Kokkos::View<bool[3][2]> b2("b2");
        Kokkos::View<bool[2][1][2]> b3("b3");
        float d;
        Kokkos::View<float[5]> e("e");
        Kokkos::View<float[2][3]> e2("e2");
        Kokkos::View<float[1][2][3]> e3("e3");
        int f;
        Kokkos::View<int[3]> g("g");
        Kokkos::View<int[6][3]> g2("g2");
        Kokkos::View<int[4][3][2]> g3("g3");
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
