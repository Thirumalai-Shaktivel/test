stages:
  - tarball
  - build

before_script:
  - ci/version.sh
  - lfortran_version=$(<version)

prepare tarball:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:prepare-1.4.0
  script:
    - export CLASSPATH="$HOME/antlr-4.7-complete.jar:$CLASSPATH"
    - sudo ln /usr/bin/pip3 /usr/bin/pip
    - sudo pip install scikit-build
    - ./build0.sh
    - python setup.py sdist
    - ci/upload_tarball.sh
  artifacts:
    paths:
      - dist/*
    when: always
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://gitlab.com/lfortran/packages/testing/tree/$CI_COMMIT_REF_NAME

# GitHub mirror
mirror:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:mirror-1.4.0
  script:
    - ci/github_mirror.sh
  allow_failure: true
  only:
    - master

# PyPI upload
pypi:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:prepare-1.4.0
  script:
    - sudo ln /usr/bin/pip3 /usr/bin/pip
    - sudo pip install twine
    - ci/upload_pypi.sh
  #only:
  #  - master
  #  - tags

# Azure
azure:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:mirror-1.4.0
  script:
    - ci/azure_mirror.sh
  only:
    variables:
      - $SSH_PRIVATE_KEY_AZURE


# Test full dependencies when a C compiler is available and used for linking
full:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full-1.4.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - pip install .
    - cd ..
    - rm -r lfortran lfortran-${lfortran_version}
    - rm lfort
    - py.test --pyargs lfortran
    - python show_ast.py
    - lfort examples/expr2.f90 -o a.out
    - ./a.out
    - ./test_lfort_cmdline gfortran
    - ./test_lfort_cmdline lfort
    - ./test_lfort gfortran
    - ./test_lfort lfort
    - cd tests/interop
    - ./run.sh

# Build and upload documentation
documentation:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:jupyter-1.4.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - pip install nbconvert mkdocs
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - pip install .
    - cd ..
    - rm -r lfortran lfortran-${lfortran_version}
    - cd doc
    - python convert_nb.py
    - mkdocs build -s
    - ../ci/upload_docs.sh
  artifacts:
    paths:
      - doc/site
    when: always

# Update the downloads page
downloads_update:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:prepare-1.4.0
  script:
    - sudo apk add --no-cache curl
    - curl -X POST -F token=${DOWNLOAD_UPDATE_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/11905898/trigger/pipeline
  only:
    - master

# Test minimal dependencies needed to get things to run. No gcc or clang
# compilers, just the linker `ld` and the musl C library.
minimal:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:minimal-1.4.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - pip install .
    - cd ..
    - rm -r lfortran lfortran-${lfortran_version}
    - rm lfort
    - sudo apt-get remove -yq gcc libc6-dev
    - sudo apt-get autoremove -yq
    - py.test --pyargs lfortran
    - lfort --ld-musl examples/expr2.f90 -o a.out
    - ./a.out

# Test Jupyter notebooks
jupyter:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:jupyter-1.4.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - pip install .
    - cd ..
    - rm -r lfortran lfortran-${lfortran_version}
    - (git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/lfortran/fortran_kernel && cd fortran_kernel && git checkout v0.1.4 && pip install . && cd .. && rm -r fortran_kernel)
    - python -m fortran_kernel.install --sys-prefix
    - jupyter kernelspec list --json
    - cd share/lfortran/nb
    - py.test --pyargs lfortran
    - jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=60 --output Demo_out.ipynb Demo.ipynb
    - ls -l output1.png
  artifacts:
    paths:
      - share/lfortran/nb/Demo_out.ipynb
      - share/lfortran/nb/output1.png
    when: always
