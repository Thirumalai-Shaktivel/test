stages:
  - tarball
  - build

before_script:
  - ci/version.sh
  - lfortran_version=$(<version)

prepare tarball:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:prepare-1.7.0
  script:
    - ./build0.sh
    - sudo apk add --no-cache cmake
    - ci/create_source_tarball.sh $lfortran_version
    - ci/upload_tarball.sh
  artifacts:
    paths:
      - dist/*
    when: always
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://gitlab.com/lfortran/packages/testing/tree/$CI_COMMIT_REF_NAME

# GitHub mirror
mirror:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:mirror-1.7.0
  script:
    - ci/github_mirror.sh
  allow_failure: true
  only:
    - master

# Azure
azure:
  stage: tarball
  image: registry.gitlab.com/lfortran/ci-images:mirror-1.7.0
  script:
    - ci/azure_mirror.sh
  only:
    variables:
      - $SSH_PRIVATE_KEY_AZURE

# Test the C++ version
cxx:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full-1.7.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install -c conda-forge rapidjson
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_PREFIX_PATH=$HOME/conda_root
         -DCMAKE_INSTALL_PREFIX=`pwd`
         -DCMAKE_BUILD_TYPE=Debug
         -DWITH_JSON=yes
         .
    - cmake --build . --target install
    - ctest --output-on-failure
    - ./src/bin/parse

# Create a binary tarball with the C++ based LFortran
cxx_binary:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:cxxbinary-1.8.0
  script:
    - sudo apk add binutils-dev
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_BUILD_TYPE=Release
         -DCMAKE_CXX_FLAGS_RELEASE="-Wall -Wextra -Wno-unused-parameter -fno-common -O3 -march=nehalem -funroll-loops -DNDEBUG"
         -DWITH_LLVM=yes
         -DLFORTRAN_STATIC_BIN=yes
         -DWITH_LFORTRAN_ASSERT=yes
         -DWITH_STACKTRACE=yes
         .
    - make
    - ctest --output-on-failure
    - cpack
  artifacts:
    paths:
      - lfortran-*/lfortran-*-Linux.tar.bz2
    when: always

# Test LLVM
cxx_binary_tests:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full2-1.7.0
  script:
    - export CONDA_PREFIX="$HOME/conda_root"
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install -c conda-forge toml lld=9.0.1 llvmdev=9.0.1
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends libtinfo-dev zlib1g-dev
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_BUILD_TYPE=Debug
         -DWITH_LLVM=yes
         .
    - make
    - ctest --output-on-failure
    - cp src/bin/lfortran ../src/bin/
    - cp src/bin/cpptranslate ../src/bin/
    - export LFORTRAN_RUNTIME_LIBRARY_DIR="`pwd`/src/runtime"
    - cd ..
    - ./run_tests.py
    - PATH="`pwd`/src/bin:$PATH" ./test_lfort_cmdline lfortran
    - cd integration_tests
    - mkdir build-gfortran
    - cd build-gfortran
    - FC=gfortran cmake ..
    - make
    - ctest
    - cd ..
    - mkdir build-lfortran-llvm
    - cd build-lfortran-llvm
    - FC=../../src/bin/lfortran cmake -DLFORTRAN_BACKEND=llvm ..
    - make
    - ctest
    - cd ..
    - mkdir build-lfortran-cpp
    - cd build-lfortran-cpp
    - wget https://github.com/kokkos/kokkos/archive/3.1.01.tar.gz
    - tar xaf 3.1.01.tar.gz
    - cd kokkos-3.1.01
    - mkdir build
    - cd build
    - export LFORTRAN_KOKKOS_DIR=$HOME/ext/kokkos
    - cmake -DCMAKE_INSTALL_PREFIX=$LFORTRAN_KOKKOS_DIR -DKokkos_ENABLE_OPENMP=On -DKokkos_ARCH_HSW=On ..
    - make
    - make install
    - cd ..
    - cd ..
    - FC=../../src/bin/lfortran cmake -DLFORTRAN_BACKEND=cpp ..
    - make
    - ctest

# Test Jupyter Kernel
jupyter_kernel:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full3-1.9.0
  script:
    - export CONDA_PREFIX="$HOME/conda_root"
    - export PATH="$HOME/conda_root/bin:$PATH"
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_BUILD_TYPE=Debug
         -DWITH_LLVM=yes
         -DWITH_XEUS=yes
         .
    - make
    - cp src/bin/lfortran $CONDA_PREFIX/bin
    - cd ..
    - python ci/install_fortran_kernel.py
    - jupyter kernelspec list --json
    - python ci/test_fortran_kernel.py -v

# Test LFortran without the LLVM backend
cxx_binary_min:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:cxxbinary-1.8.0
  script:
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_BUILD_TYPE=Debug
         .
    - make
    - ctest --output-on-failure

# Test LFortran without the LLVM backend and run tests
cxx_binary_min_tests:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full2-1.7.0
  script:
    - export CONDA_PREFIX="$HOME/conda_root"
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install -c conda-forge toml
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - cmake
         -DCMAKE_BUILD_TYPE=Debug
         .
    - make
    - ctest --output-on-failure
    - cp src/bin/lfortran ../src/bin/
    - cp src/bin/cpptranslate ../src/bin/
    - cd ..
    - ./run_tests.py --no-llvm

# Test the multiplatform build script
build.xsh:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full2-1.7.0
  script:
    - export CONDA_PREFIX="$HOME/conda_root"
    - export PATH="$HOME/conda_root/bin:$PATH"
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends zlib1g-dev
    - conda install -c conda-forge llvmdev=9.0.1 toml
    - export LFORTRAN_CMAKE_GENERATOR="Unix Makefiles"
    - export WIN=0
    - export MACOS=0
    - rm -rf dist
    - xonsh ci/build.xsh

# Build and upload documentation
#documentation:
#  stage: build
#  image: registry.gitlab.com/lfortran/ci-images:jupyter-1.7.0
#  script:
#    - sudo apt-get update
#    - sudo apt-get install -yq --no-install-recommends openssh-client
#    - export PATH="$HOME/conda_root/bin:$PATH"
#    - pip install nbconvert mkdocs
#    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
#    - cd lfortran-${lfortran_version}
#    - pip install --no-index -v .
#    - cd ..
#    - rm -r lfortran lfortran-${lfortran_version}
#    - cd doc
#    - python convert_nb.py
#    - mkdocs build -s
#    - ../ci/upload_docs.sh
#  artifacts:
#    paths:
#      - doc/site
#    when: always

# Update the downloads page
downloads_update:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:prepare-1.8.0
  script:
    - curl -X POST -F token=${DOWNLOAD_UPDATE_TOKEN} -F ref=master https://gitlab.com/api/v4/projects/11905898/trigger/pipeline
  only:
    - master

# Test minimal dependencies needed to get things to run. No gcc or clang
# compilers, just the linker `ld` and the musl C library.
minimal:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:minimal-1.7.0
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - export CFLAGS="-I/usr/include/x86_64-linux-musl/"
    #- pip install --no-index -v .
    #- cd ..
    #- rm -r lfortran lfortran-${lfortran_version}
    #- rm lfort
    - sudo apt-get remove -yq gcc g++ libc6-dev
    - sudo apt-get autoremove -yq
    #- py.test --pyargs lfortran
    #- lfort --ld-musl examples/expr2.f90 -o a.out
    #- ./a.out

# Test Bison grammar
grammar:
  stage: build
  image: registry.gitlab.com/lfortran/ci-images:full2-1.7.0
  script:
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends patch bison
    - ci/grammar_conflicts.sh
