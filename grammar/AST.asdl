-- This is an Abstract Syntax Description Lanuguage (ASDL) that describes the
-- Fortran's Abstract Syntax Tree (AST). See [1] for a short background
-- information and motivation and see the paper [2] for a detailed motivation,
-- explanation and specification of the language. See [3] for further examples
-- of ASDL usage in a real compiler.
--
-- [1] https://eli.thegreenplace.net/2014/06/04/using-asdl-to-describe-asts-in-compilers/
-- [2] Wang, D. C., Appel, A. W., Korn, J. L., & Serra, C. S. (1997). The Zephyr Abstract Syntax Description Language. USENIX Conference on Domain-Specific Languages, (October), 213â€“228.
-- [3] https://arxiv.org/abs/cs/9810013
--
-- ASDL's builtin types are:
--   * identifier
--   * int (signed integers of infinite precision)
--   * string
-- We extend these by:
--   * object (any Python object)
--   * constant
--
-- Specific tools may choose to produce language interfaces that represent
-- these types and the ASDL tree in a language specific way (e.g. use finite
-- precision integers and signal an error otherwise).

module Fortran {

unit
    = TranslationUnit(object* items)

mod
    = Module(identifier name, unit_decl1* use, unit_decl2* decl,
        program_unit* contains)
    | Program(identifier name, unit_decl1* use, unit_decl2* decl,
        stmt* body, program_unit* contains)

program_unit
    = Subroutine(identifier name, arg* args, unit_decl1* use, unit_decl2* decl,
        stmt* body, program_unit* contains)
    | Function(identifier name, arg* args, string? return_type,
            expr? return_var, tbind? bind, unit_decl1* use, unit_decl2* decl,
            stmt* body, program_unit* contains)
        attributes (int lineno, int col_offset)

unit_decl1
    = Use(use_symbol module, use_symbol* symbols)
        attributes (int lineno, int col_offset)

unit_decl2
    = Declaration(decl* vars)
    | Private(identifier* vars)
    | Public(identifier* vars)
    | Interface(identifier name, identifier* procs)
    | Interface2(identifier? name, program_unit* procs)
        attributes (int lineno, int col_offset)

stmt
    = Assignment(expr target, expr value)
    | SubroutineCall(identifier name, expr* args)
    | BuiltinCall(identifier name, expr* args)
    | If(expr test, stmt* body, stmt* orelse)
    | Where(expr test, stmt* body, stmt* orelse)
    | Stop(int? code)
    | ErrorStop()
    | DoLoop(do_loop_head? head, stmt* body)
    | Select(expr test, case_stmt* body, case_default? default)
    | Cycle()
    | Exit()
    | Return()
    | WhileLoop(expr test, stmt* body)
    | Print(string? fmt, expr* values)
        attributes (int lineno, int col_offset)

expr
    = BoolOp(expr left, boolop op, expr right)
    | BinOp(expr left, operator op, expr right)
    | UnaryOp(unaryop op, expr operand)
    | Compare(expr left, cmpop op, expr right)
    | FuncCall(identifier func, expr* args, keyword* keywords)
    | FuncCallOrArray(identifier func, expr* args, keyword* keywords)
    | Array(identifier name, array_index* args)
    | ArrayInitializer(expr* args)
    | Num(object n)
    | Str(string s)
    | Name(identifier id)
    | Constant(constant value)
        attributes (int lineno, int col_offset)

boolop = And | Or

operator = Add | Sub | Mul | Div | Pow

unaryop = Invert | Not | UAdd | USub

cmpop = Eq | NotEq | Lt | LtE | Gt | GtE

decl = (identifier sym, string sym_type, dimension* dims, attribute *attrs)

dimension = (expr? start, expr? end)

attribute = Attribute(identifier name, attribute_arg *args)

attribute_arg = (identifier arg)

arg = (identifier arg)
        attributes (int lineno, int col_offset)

keyword = (identifier? arg, expr value)

tbind = Bind(keyword* args)

array_index = ArrayIndex(expr? left, expr? right, expr? step)

do_loop_head = (identifier var, expr start, expr end, expr? increment)
        attributes (int lineno, int col_offset)

case_stmt = (expr test, stmt* body)
        attributes (int lineno, int col_offset)

case_default = (stmt* body)
        attributes (int lineno, int col_offset)

use_symbol = (identifier sym, identifier? rename)

}
