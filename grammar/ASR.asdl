-- Abstract Semantic Representation (ASR) definition

-- The aim of ASR is to represent all semantics in a non-redundant way, and that
-- has all the semantic information available locally, so that the backend can
-- do a single pass over ASR and have all the information at hand to generate
-- code.
--
-- ASR is always semantically valid Fortran code. It is as far from the original
-- Fortran language code as possible (i.e. everthing is explicitly figured out,
-- all semantic information gathered and readily available locally from each ASR
-- node), while ensuring no semantic information was lost (no lowering was
-- done), so one can still generate Fortran code from ASR that will be logically
-- equivalent to the original code.
--
-- ASR can be used to do Fortran level transformations (such as optimizations).

-- ASDL's builtin types are:
--   * identifier
--   * int (signed integers of infinite precision)
--   * string
-- We extend these by:
--   * object (any Python object)
--   * constant (.true. / .false.)
--   * symbol_table (scoped Symbol Table implementation)
--   * node (any ASR node)
--
-- Note: `symbol_table` contains `identifier` -> `symbol` mappings.

module ASR {

unit
    = TranslationUnit(symbol_table global_scope, node* items)

symbol
    = Program(symbol_table symtab, identifier name, stmt* body)
    | Module(symbol_table symtab, identifier name)
    | Subroutine(symbol_table symtab, identifier name, expr* args, stmt* body,
        tbind? bind, proc_external? external, access access)
    | Function(symbol_table symtab, identifier name, expr* args, stmt* body,
        tbind? bind, expr return_var, proc_external? external, access access)
    | GenericProcedure(identifier name, symbol* procs, access access)
    | ExternalProc(identifier name, proc_external external)
    | DerivedType(symbol_table symtab, identifier name)
    | Variable(symbol_table parent_symtab, identifier name, intent intent,
        expr? value, storage_type storage, ttype type, access access)

storage_type = Default | Save | Parameter
access = Public | Private

proc_external = (proc_external_type type, symbol? module_proc)
proc_external_type
    = LFortranModule
    | GFortranModule
    | Interactive
    | Intrinsic

stmt
    = Assignment(expr target, expr value)
    | SubroutineCall(symbol name, expr* args)
    | BuiltinCall(identifier name, expr* args)
    | If(expr test, stmt* body, stmt* orelse)
    | Where(expr test, stmt* body, stmt* orelse)
    | Stop(expr? code)
    | ErrorStop(expr? code)
    | DoLoop(do_loop_head head, stmt* body)
    | DoConcurrentLoop(do_loop_head head, stmt* body)
    | Select(expr test, case_stmt* body, case_default? default)
    | Cycle()
    | Exit()
    | WhileLoop(expr test, stmt* body)
    | Print(string? fmt, expr* values)

expr
    = BoolOp(expr left, boolop op, expr right, ttype type)
    | BinOp(expr left, binop op, expr right, ttype type)
    | UnaryOp(unaryop op, expr operand, ttype type)
    | Compare(expr left, cmpop op, expr right, ttype type)
    | FuncCall(symbol name, expr* args, keyword* keywords, ttype type)
    | ArrayInitializer(expr* args, ttype type)
    | ConstantInteger(object n, ttype type)
    | ConstantReal(string r, ttype type)
    | ConstantComplex(expr re, expr im, ttype type)
    | ConstantLogical(constant value, ttype type)
    | Str(string s, ttype type)
    | Var(symbol v)
    | ArrayRef(symbol v, array_index* args, ttype type)
    | ImplicitCast(expr arg, cast_kind kind, ttype type)
    | ExplicitCast(expr arg, cast_kind kind, ttype type)

ttype
    = Integer(int kind, dimension* dims)
    | Real(int kind, dimension* dims)
    | Complex(int kind, dimension* dims)
    | Character(int kind, dimension* dims)
    | Logical(int kind, dimension* dims)
    | Derived(symbol derived_type, dimension* dims)

boolop = And | Or | NEqv | Eqv

binop = Add | Sub | Mul | Div | Pow

unaryop = Invert | Not | UAdd | USub

cmpop = Eq | NotEq | Lt | LtE | Gt | GtE

intent = Local | In | Out | InOut | ReturnVar | External

cast_kind
    = RealToInteger
    | IntegerToReal
    | RealToReal
    | IntegerToInteger
    | RealToComplex
    | IntegerToComplex
    | IntegerToLogical

dimension = (expr? start, expr? end)

attribute = Attribute(identifier name, attribute_arg *args)

attribute_arg = (identifier arg)

arg = (identifier arg)

keyword = (identifier? arg, expr value)

tbind = Bind(string lang, string name)

array_index = (expr? left, expr? right, expr? step)

do_loop_head = (expr v, expr start, expr end, expr? increment)

case_stmt = (expr test, stmt* body)

case_default = (stmt* body)

}
