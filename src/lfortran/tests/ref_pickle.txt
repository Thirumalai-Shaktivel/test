(+ 1 (* 2 3))
(+ 1 (* 2 3))
(+ (* 1 2) 3)
(* (+ 1 2) 3)
(+ 1 (* 2 (** 3 4)))
(+ 1 (* 2 (** 3 4)))
(+ 1 (** (* 2 3) 4))
(** (+ 1 (* 2 3)) 4)
(+ 1 (* (** 2 3) 4))
(+ 1 (** 2 (* 3 4)))
(- 1 2)
(- (- 1 2) 3)
(- 1 (* 2 3))
(- 1 (** 2 3))
(+ (u- 2) 1)
(+ (* (u- 2) 3) 1)
(+ (u- (** 2 3)) 1)
(+ 1 (u- 2))
(+ 1 (* (u- 2) 3))
(+ 1 (- (u- 2) 3))
(* 3 (u- 2))
(* (u- 2) 3)
(* (u- 2) 3)
(+ (u+ 2) 1)
(+ (* (u+ 2) 3) 1)
(+ (u+ (** 2 3)) 1)
(+ 1 (u+ 2))
(+ 1 (* (u+ 2) 3))
(+ 1 (- (u+ 2) 3))
(* 3 (u+ 2))
(* (u+ 2) 3)
(* (u+ 2) 3)
(constant Unimplementedconstant)
(constant Unimplementedconstant)
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray log [] [])
(* u (funccallorarray sqrt [] []))
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(arrayinitializer [1])
(arrayinitializer [1 b])
(arrayinitializer [1 b c])
(arrayinitializer [(funccallorarray f [] []) (+ b c) (+ (** c 2) 1)])
1
(real "1.")
(real "1._dp")
(real "1.03_dp")
(real "1.e5_dp")
(+ 2 3)
(* (+ 1 3) 4)
(+ 1 (* 3 4))
x
yx
(+ x y)
(+ 2 x)
(** (+ x y) 2)
(* (+ x y) 3)
(+ x (* y 3))
(* (+ (+ 1 2) a) 3)
(+ (funccallorarray f [] []) 6)
(funccallorarray f [] [])
(funccallorarray real [] [])
(- (* 2 u) 1)
(funccallorarray sum [] [])
(funccallorarray u [] [])
(* u (funccallorarray sqrt [] []))
(not first)
(- a (/ (real "1._dp") 3))
(/ 1 (funccallorarray sqrt [] []))
(** (+ 1 (* c x)) 3)
(+ i 1)
(str ""s"")
(str ""some test"")
(funccallorarray a [] [])
(funccallorarray b [] [])
(+ (funccallorarray a [] []) (funccallorarray b [] []))
(arrayinitializer [1 2 3 i])
(funccallorarray f [] [])
a
(funccallorarray a [] [])
(funccallorarray b [] [])
(funccallorarray c [] [])
a
(funccallorarray b [] [])
(funccallorarray c [] [])
(str ""a'b'c"")
(str "'a"b"c'")
(str "'a""bc""x'")
(str ""a""c"")
(str ""a""b""c"")
(str """"zippo"""")
(str "'a''c'")
(str "'a''b''c'")
(str "'''zippo'''")
(str ""aaa"")
(str ""a"")
(boolop 1 boolopType0 2)
(boolop a boolopType0 b)
(boolop (== a 1) boolopType0 (== b 2))
(boolop (== a 1) boolopType1 (== b 2))
(boolop (boolop a boolopType0 b) boolopType0 c)
(boolop (boolop a boolopType1 b) boolopType1 c)
(not (== a 1))
(boolop (== a 1) boolopType0 (not (== b 2)))
(boolop a boolopType2 b)
(boolop a boolopType3 b)
(decl [(x "integer" [] [] ())])
(decl [(x "integer" [] [] ())])
(decl [(x "integer" [] [(attribute parameter [])] ())])
(decl [(x "integer" [] [(attribute parameter []) (attribute pointer [])] ())])
(decl [(x "character" [] [] ())])
(decl [(x "character" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [(attribute intent [(in)])] ())])
(decl [(x "real" [] [(attribute intent [(out)])] ())])
(decl [(x "real" [] [(attribute intent [(inout)])] ())])
(decl [(x "complex" [] [] ())])
(decl [(x "logical" [] [] ())])
(decl [(x "type" [] [] ())])
(decl [(x "integer" [] [] 3)])
(decl [(x "integer" [(1 5)] [] ())])
(decl [(x "integer" [(5 ())] [] ())])
(decl [(x "integer" [(5 ())] [] ())])
(decl [(x "integer" [(() 5)] [] ())])
(decl [(x "integer" [(() ())] [] ())])
(decl [(x "integer" [(3 5)] [] ())])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] ())])
(decl [(x "integer" [] [(attribute dimension [])] ())])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] 3)])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] (+ 3 2))])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] 3) (y "integer" [(() 3)] [] 4)])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] x)])
(fn g [] () () () [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ()) (y "integer" [] [] ())])] [] [])
(sub g [] [] [(decl [(x "integer" [] [] ()) (y "integer" [] [] ()) (z "integer" [] [] ())])] [] [])
(fn g [] () () () [] [(decl [(x "integer" [] [] ())]) (decl [(y "real" [] [] ()) (z "real" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ())]) (decl [(x "character" [] [] ())])] [(= x 1)] [])
(prog g [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(prog g [] [(decl [(x "integer" [] [] ())]) (decl [(x "complex" [] [] ())])] [(= x 1)] [])
