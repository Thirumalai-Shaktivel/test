add_executable(lfortran lfortran.cpp tpl/whereami/whereami.cpp)
target_link_libraries(lfortran lfortran_lib)
if (UNIX AND NOT APPLE)
    # This is sometimes needed to fix link errors for CLI11
    target_link_libraries(lfortran stdc++fs)
endif()
if (LFORTRAN_STATIC_BIN)
    if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
        # Link statically on Linux with gcc or clang
        if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
                CMAKE_CXX_COMPILER_ID MATCHES Clang)
            target_link_options(lfortran PRIVATE -static)
        endif()
    endif()
endif()
if (WITH_STACKTRACE AND APPLE AND CMAKE_CXX_COMPILER_ID MATCHES Clang)
    # On macOS we have to call dsymutil to create the dSYM bundle so that the
    # stacktrace can find debugging information corresponding to the lfortran
    # binary
    add_custom_command(
        TARGET lfortran
        POST_BUILD
        COMMAND dsymutil lfortran
    )
endif()

# Ensure "Release" is not appended to the path on Windows:
# https://stackoverflow.com/a/56201564/479532
set_target_properties(lfortran PROPERTIES RUNTIME_OUTPUT_DIRECTORY $<0:>)

set_target_properties(lfortran PROPERTIES
    INSTALL_RPATH_USE_LINK_PATH TRUE
)

install(TARGETS lfortran
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    ARCHIVE DESTINATION share/lfortran/lib
    LIBRARY DESTINATION share/lfortran/lib
)


add_executable(parse parse.cpp)
target_link_libraries(parse lfortran_lib)

add_executable(parse2 parse2.cpp)
target_link_libraries(parse2 lfortran_lib)

if (WITH_FMT)
    add_executable(parse3 parse3.cpp)
    target_link_libraries(parse3 lfortran_lib fmt::fmt)
endif()

add_executable(cpptranslate cpptranslate.cpp)
target_link_libraries(cpptranslate lfortran_lib)
if (UNIX AND NOT APPLE)
    # This is sometimes needed to fix link errors for CLI11
    target_link_libraries(cpptranslate stdc++fs)
endif()
